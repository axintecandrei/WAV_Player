
WAVPlayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf68  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800d0fc  0800d0fc  0001d0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d270  0800d270  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800d270  0800d270  0001d270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d278  0800d278  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d278  0800d278  0001d278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d27c  0800d27c  0001d27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800d280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005940  20000098  0800d318  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200059d8  0800d318  000259d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e12a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005580  00000000  00000000  0004e1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  00053778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001508  00000000  00000000  00054eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dfb2  00000000  00000000  000563c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b084  00000000  00000000  00074372  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098eb7  00000000  00000000  0008f3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001282ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006068  00000000  00000000  00128328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000098 	.word	0x20000098
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800d0e4 	.word	0x0800d0e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000009c 	.word	0x2000009c
 80001d0:	0800d0e4 	.word	0x0800d0e4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ABSinfo_INIT>:
void ABSinfo_Error_s(void);
void ABSinfo_Disconnect_s(void);


void ABSinfo_INIT(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
   ABSinfo.States = Init;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <ABSinfo_INIT+0x4c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
   ABSinfo.StateMachine[0] = ABSinfo_Init_s;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <ABSinfo_INIT+0x4c>)
 80004e0:	4a10      	ldr	r2, [pc, #64]	; (8000524 <ABSinfo_INIT+0x50>)
 80004e2:	605a      	str	r2, [r3, #4]
   ABSinfo.StateMachine[1] = ABSinfo_Idle_s;
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <ABSinfo_INIT+0x4c>)
 80004e6:	4a10      	ldr	r2, [pc, #64]	; (8000528 <ABSinfo_INIT+0x54>)
 80004e8:	609a      	str	r2, [r3, #8]
   ABSinfo.StateMachine[2] = ABSinfo_Prepare_s;
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <ABSinfo_INIT+0x4c>)
 80004ec:	4a0f      	ldr	r2, [pc, #60]	; (800052c <ABSinfo_INIT+0x58>)
 80004ee:	60da      	str	r2, [r3, #12]
   ABSinfo.StateMachine[3] = ABSinfo_Play_s;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <ABSinfo_INIT+0x4c>)
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <ABSinfo_INIT+0x5c>)
 80004f4:	611a      	str	r2, [r3, #16]
   ABSinfo.StateMachine[4] = ABSinfo_Error_s;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <ABSinfo_INIT+0x4c>)
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <ABSinfo_INIT+0x60>)
 80004fa:	615a      	str	r2, [r3, #20]
   ABSinfo.SelectOption = 0;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <ABSinfo_INIT+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	709a      	strb	r2, [r3, #2]
   ABSinfo.Enable = 0;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <ABSinfo_INIT+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	70da      	strb	r2, [r3, #3]
   ABSinfo.ABS_trigger = 0;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <ABSinfo_INIT+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	705a      	strb	r2, [r3, #1]
   wavPlayer_init();
 800050e:	f000 f967 	bl	80007e0 <wavPlayer_init>
   BlueLed_Off();
 8000512:	f006 fc47 	bl	8006da4 <BlueLed_Off>
   RedLed_Off();
 8000516:	f006 fc2d 	bl	8006d74 <RedLed_Off>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20001220 	.word	0x20001220
 8000524:	08000691 	.word	0x08000691
 8000528:	080006c9 	.word	0x080006c9
 800052c:	08000721 	.word	0x08000721
 8000530:	0800075d 	.word	0x0800075d
 8000534:	080007d5 	.word	0x080007d5

08000538 <ABSinfo_MAIN>:

void ABSinfo_MAIN(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
   MX_USB_HOST_Process();
 800053c:	f00c f9e6 	bl	800c90c <MX_USB_HOST_Process>
/*USB disk internal states.
 *  If there is no memory connected there is nothing to be played from*/
   switch (USBState)
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <ABSinfo_MAIN+0x68>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b03      	cmp	r3, #3
 8000546:	d829      	bhi.n	800059c <ABSinfo_MAIN+0x64>
 8000548:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <ABSinfo_MAIN+0x18>)
 800054a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054e:	bf00      	nop
 8000550:	08000597 	.word	0x08000597
 8000554:	08000571 	.word	0x08000571
 8000558:	08000561 	.word	0x08000561
 800055c:	0800058d 	.word	0x0800058d
   {
   case APPLICATION_READY:
      ABSinfo.StateMachine[ABSinfo.States]();
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <ABSinfo_MAIN+0x6c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <ABSinfo_MAIN+0x6c>)
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	4798      	blx	r3
      break;
 800056e:	e015      	b.n	800059c <ABSinfo_MAIN+0x64>
   case APPLICATION_START:
      if(f_mount(&AudioStorageFATFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 8000570:	2200      	movs	r2, #0
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <ABSinfo_MAIN+0x70>)
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <ABSinfo_MAIN+0x74>)
 8000576:	f00b fb19 	bl	800bbac <f_mount>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <ABSinfo_MAIN+0x4e>
      {
         BlueLed_On();
 8000580:	f006 fc04 	bl	8006d8c <BlueLed_On>
      else
      {
    	  RedLed_On();
      }

      break;
 8000584:	e00a      	b.n	800059c <ABSinfo_MAIN+0x64>
    	  RedLed_On();
 8000586:	f006 fbe9 	bl	8006d5c <RedLed_On>
      break;
 800058a:	e007      	b.n	800059c <ABSinfo_MAIN+0x64>
   case APPLICATION_DISCONNECT:
	   ABSinfo_Disconnect_s();
 800058c:	f000 f916 	bl	80007bc <ABSinfo_Disconnect_s>
	   BlueLed_Off();
 8000590:	f006 fc08 	bl	8006da4 <BlueLed_Off>
	   break;
 8000594:	e002      	b.n	800059c <ABSinfo_MAIN+0x64>
   case APPLICATION_IDLE:
	   BlueLed_Off();
 8000596:	f006 fc05 	bl	8006da4 <BlueLed_Off>
      /*reset all internal stats of ABSinfo state machine and players state machine
       * check the commands, if any arrive, set error*/
      break;
 800059a:	bf00      	nop
   }

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20001120 	.word	0x20001120
 80005a4:	20001220 	.word	0x20001220
 80005a8:	200032cc 	.word	0x200032cc
 80005ac:	20001238 	.word	0x20001238

080005b0 <ABSinfo_ProcessCommands>:

static uint8_t ABSinfo_ProcessCommands(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
   uint8_t  enable, selectOption;
   uint8_t  commands_status = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]

   /*get main switch state
    * 0 - Sound information not needed
    * 1 - Sound information needed, prepare everything*/
   enable = HAL_GPIO_ReadPin(OnOff_ABSinfo_GPIO_Port,OnOff_ABSinfo_Pin);
 80005ba:	2101      	movs	r1, #1
 80005bc:	4814      	ldr	r0, [pc, #80]	; (8000610 <ABSinfo_ProcessCommands+0x60>)
 80005be:	f001 fbdb 	bl	8001d78 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71bb      	strb	r3, [r7, #6]
   ABSinfo.Enable = enable;
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <ABSinfo_ProcessCommands+0x64>)
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	70d3      	strb	r3, [r2, #3]
   /*get select switch state
    * 0 - Option #1
    * 1 - Option #2 */
   selectOption = HAL_GPIO_ReadPin(Sel_audio_option_GPIO_Port,Sel_audio_option_Pin);
 80005cc:	2102      	movs	r1, #2
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <ABSinfo_ProcessCommands+0x60>)
 80005d0:	f001 fbd2 	bl	8001d78 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	717b      	strb	r3, [r7, #5]

   /*get ABS trigger and set player state*/
   ABSinfo.ABS_trigger = HAL_GPIO_ReadPin(ABS_trigger_GPIO_Port,ABS_trigger_Pin);
 80005d8:	2101      	movs	r1, #1
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <ABSinfo_ProcessCommands+0x68>)
 80005dc:	f001 fbcc 	bl	8001d78 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <ABSinfo_ProcessCommands+0x64>)
 80005e6:	705a      	strb	r2, [r3, #1]


   commands_status = (selectOption<<2) |(ABSinfo.ABS_trigger<<1) | enable;
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	b25a      	sxtb	r2, r3
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <ABSinfo_ProcessCommands+0x64>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	b25a      	sxtb	r2, r3
 80005fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000600:	4313      	orrs	r3, r2
 8000602:	b25b      	sxtb	r3, r3
 8000604:	71fb      	strb	r3, [r7, #7]
   return commands_status;
 8000606:	79fb      	ldrb	r3, [r7, #7]

}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020800 	.word	0x40020800
 8000614:	20001220 	.word	0x20001220
 8000618:	40020400 	.word	0x40020400

0800061c <ABSinfo_ProcessVolume>:

static void ABSinfo_ProcessVolume(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
   uint16_t         adc_value = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	80fb      	strh	r3, [r7, #6]
   static uint16_t  adc_value_prev = 0;


   /*read the pot*/
   adc_value = ADC_GetSingleConv();
 8000626:	f006 fae1 	bl	8006bec <ADC_GetSingleConv>
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]

   /*filter so the audio output would not flicker*/
   if (ABSolut(adc_value - adc_value_prev) > 10)
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <ABSinfo_ProcessVolume+0x68>)
 8000632:	8812      	ldrh	r2, [r2, #0]
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2b00      	cmp	r3, #0
 8000638:	bfb8      	it	lt
 800063a:	425b      	neglt	r3, r3
 800063c:	2b0a      	cmp	r3, #10
 800063e:	dd0f      	ble.n	8000660 <ABSinfo_ProcessVolume+0x44>
   {
      wavPlayer.volume  = ((float)adc_value/4096.0F);
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	ee07 3a90 	vmov	s15, r3
 8000646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800064a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000688 <ABSinfo_ProcessVolume+0x6c>
 800064e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <ABSinfo_ProcessVolume+0x70>)
 8000654:	edc3 7a05 	vstr	s15, [r3, #20]
      adc_value_prev = adc_value;
 8000658:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <ABSinfo_ProcessVolume+0x68>)
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	8013      	strh	r3, [r2, #0]
   }
   else
   {
      wavPlayer.volume  = ((float)adc_value_prev/4096.0F);
   }
}
 800065e:	e00c      	b.n	800067a <ABSinfo_ProcessVolume+0x5e>
      wavPlayer.volume  = ((float)adc_value_prev/4096.0F);
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <ABSinfo_ProcessVolume+0x68>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	ee07 3a90 	vmov	s15, r3
 8000668:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800066c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000688 <ABSinfo_ProcessVolume+0x6c>
 8000670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <ABSinfo_ProcessVolume+0x70>)
 8000676:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000b4 	.word	0x200000b4
 8000688:	45800000 	.word	0x45800000
 800068c:	2000226c 	.word	0x2000226c

08000690 <ABSinfo_Init_s>:
 * First state entered after power on
   Wait for commands
   It will be visited once per ign cycle
 * */
void ABSinfo_Init_s(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
   uint8_t  commands = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]


   commands = ABSinfo_ProcessCommands();
 800069a:	f7ff ff89 	bl	80005b0 <ABSinfo_ProcessCommands>
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
   ABSinfo.SelectOption = commands>>2;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	089b      	lsrs	r3, r3, #2
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <ABSinfo_Init_s+0x34>)
 80006aa:	709a      	strb	r2, [r3, #2]
   if ((commands & Triggered) == Triggered)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 0303 	and.w	r3, r3, #3
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d102      	bne.n	80006bc <ABSinfo_Init_s+0x2c>
   {
      ABSinfo.States = Prepare;
 80006b6:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <ABSinfo_Init_s+0x34>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
   }
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20001220 	.word	0x20001220

080006c8 <ABSinfo_Idle_s>:
 * Pause or standby
 * Visited if the Commands off (00/01/10) but previously the state was Play
 * If AudioOption is different: go into Prepare state to reopen the proper file and stop current dma transmit
*/
void ABSinfo_Idle_s(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
   uint8_t  commands = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]


   commands = ABSinfo_ProcessCommands();
 80006d2:	f7ff ff6d 	bl	80005b0 <ABSinfo_ProcessCommands>
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]

   if ((commands & Triggered) == Triggered)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 0303 	and.w	r3, r3, #3
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d116      	bne.n	8000712 <ABSinfo_Idle_s+0x4a>
   {
      if (ABSinfo.SelectOption != (commands>>2))
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <ABSinfo_Idle_s+0x54>)
 80006e6:	789a      	ldrb	r2, [r3, #2]
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	089b      	lsrs	r3, r3, #2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d00a      	beq.n	8000708 <ABSinfo_Idle_s+0x40>
      {
         ABSinfo.States = Prepare;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <ABSinfo_Idle_s+0x54>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
         ABSinfo.SelectOption = commands>>2;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	089b      	lsrs	r3, r3, #2
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <ABSinfo_Idle_s+0x54>)
 8000700:	709a      	strb	r2, [r3, #2]
         wavPlayer_stop();
 8000702:	f000 f953 	bl	80009ac <wavPlayer_stop>
      {
         ABSinfo.States = Play;
         wavPlayer_resume();
      }
   }
}
 8000706:	e004      	b.n	8000712 <ABSinfo_Idle_s+0x4a>
         ABSinfo.States = Play;
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <ABSinfo_Idle_s+0x54>)
 800070a:	2203      	movs	r2, #3
 800070c:	701a      	strb	r2, [r3, #0]
         wavPlayer_resume();
 800070e:	f000 f96d 	bl	80009ec <wavPlayer_resume>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20001220 	.word	0x20001220

08000720 <ABSinfo_Prepare_s>:

void ABSinfo_Prepare_s(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
   if (wavPlayer_fileSelect(audio_path[ABSinfo.SelectOption]))
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <ABSinfo_Prepare_s+0x34>)
 8000726:	789b      	ldrb	r3, [r3, #2]
 8000728:	461a      	mov	r2, r3
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <ABSinfo_Prepare_s+0x38>)
 800072c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f85b 	bl	80007ec <wavPlayer_fileSelect>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d005      	beq.n	8000748 <ABSinfo_Prepare_s+0x28>
   {
      wavPlayer_play();
 800073c:	f000 f87e 	bl	800083c <wavPlayer_play>
      ABSinfo.States = Play;
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <ABSinfo_Prepare_s+0x34>)
 8000742:	2203      	movs	r2, #3
 8000744:	701a      	strb	r2, [r3, #0]
   else
   {
      /*error; file could not be opened*/
      ABSinfo.States = Error;
   }
}
 8000746:	e002      	b.n	800074e <ABSinfo_Prepare_s+0x2e>
      ABSinfo.States = Error;
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <ABSinfo_Prepare_s+0x34>)
 800074a:	2204      	movs	r2, #4
 800074c:	701a      	strb	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20001220 	.word	0x20001220
 8000758:	20000000 	.word	0x20000000

0800075c <ABSinfo_Play_s>:

void ABSinfo_Play_s(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
   PLAYER_CONTROL_e player_state;
   ABSinfo_ProcessVolume();
 8000762:	f7ff ff5b 	bl	800061c <ABSinfo_ProcessVolume>
   player_state = wavPlayer_process();
 8000766:	f000 f89f 	bl	80008a8 <wavPlayer_process>
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]

   if (ABSinfo.SelectOption == 0) /*in case "ABS like" sound option is selected play as long the trigger is active*/
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <ABSinfo_Play_s+0x5c>)
 8000770:	789b      	ldrb	r3, [r3, #2]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10c      	bne.n	8000790 <ABSinfo_Play_s+0x34>
   {
	   if((ABSinfo_ProcessCommands() & Triggered) < Triggered)
 8000776:	f7ff ff1b 	bl	80005b0 <ABSinfo_ProcessCommands>
 800077a:	4603      	mov	r3, r0
 800077c:	f003 0303 	and.w	r3, r3, #3
 8000780:	2b02      	cmp	r3, #2
 8000782:	dc14      	bgt.n	80007ae <ABSinfo_Play_s+0x52>
	   {
	      ABSinfo.States = Idle;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <ABSinfo_Play_s+0x5c>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
	      wavPlayer_pause();
 800078a:	f000 f925 	bl	80009d8 <wavPlayer_pause>
	      ABSinfo.States = Idle;
	      wavPlayer_pause();
	   }
   }

}
 800078e:	e00e      	b.n	80007ae <ABSinfo_Play_s+0x52>
	   if(((ABSinfo_ProcessCommands() & Triggered) < Triggered) &&  (player_state == PLAYER_CONTROL_EndOfFile))
 8000790:	f7ff ff0e 	bl	80005b0 <ABSinfo_ProcessCommands>
 8000794:	4603      	mov	r3, r0
 8000796:	f003 0303 	and.w	r3, r3, #3
 800079a:	2b02      	cmp	r3, #2
 800079c:	dc07      	bgt.n	80007ae <ABSinfo_Play_s+0x52>
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d104      	bne.n	80007ae <ABSinfo_Play_s+0x52>
	      ABSinfo.States = Idle;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <ABSinfo_Play_s+0x5c>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
	      wavPlayer_pause();
 80007aa:	f000 f915 	bl	80009d8 <wavPlayer_pause>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20001220 	.word	0x20001220

080007bc <ABSinfo_Disconnect_s>:
void ABSinfo_Disconnect_s(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	wavPlayer_stop();
 80007c0:	f000 f8f4 	bl	80009ac <wavPlayer_stop>
	ABSinfo.States = Init;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <ABSinfo_Disconnect_s+0x14>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20001220 	.word	0x20001220

080007d4 <ABSinfo_Error_s>:

void ABSinfo_Error_s(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	RedLed_On();
 80007d8:	f006 fac0 	bl	8006d5c <RedLed_On>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <wavPlayer_init>:

static void wavPlayer_setVolume(float volume, int16_t * data, uint16_t size);
static void wavPlayer_reset(void);

void wavPlayer_init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
   wavPlayer_reset();
 80007e4:	f000 f934 	bl	8000a50 <wavPlayer_reset>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
   WAV_HeaderTypeDef  wavHeader;

   /* Open WAV file */
   if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 80007f4:	2201      	movs	r2, #1
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	480e      	ldr	r0, [pc, #56]	; (8000834 <wavPlayer_fileSelect+0x48>)
 80007fa:	f00b fa1d 	bl	800bc38 <f_open>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <wavPlayer_fileSelect+0x1c>
   {
      return false;
 8000804:	2300      	movs	r3, #0
 8000806:	e011      	b.n	800082c <wavPlayer_fileSelect+0x40>
   }

   /* Read WAV file Header */
   f_read(&wavFile, &wavHeader, WAV_HEADER_OFFSET, &wavPlayer.bytesRead);
 8000808:	f107 010c 	add.w	r1, r7, #12
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <wavPlayer_fileSelect+0x4c>)
 800080e:	222c      	movs	r2, #44	; 0x2c
 8000810:	4808      	ldr	r0, [pc, #32]	; (8000834 <wavPlayer_fileSelect+0x48>)
 8000812:	f00b fbdd 	bl	800bfd0 <f_read>
   /* Get audio data size */
   wavPlayer.DataSize = wavHeader.FileSize;
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <wavPlayer_fileSelect+0x4c>)
 800081a:	6053      	str	r3, [r2, #4]
   /* Play the WAV file with frequency specified in header */
   wavPlayer.samplingFreq = wavHeader.SampleRate;
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	4a06      	ldr	r2, [pc, #24]	; (8000838 <wavPlayer_fileSelect+0x4c>)
 8000820:	60d3      	str	r3, [r2, #12]
   wavPlayer.bitRate = wavHeader.BitPerSample;
 8000822:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000824:	461a      	mov	r2, r3
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <wavPlayer_fileSelect+0x4c>)
 8000828:	611a      	str	r2, [r3, #16]
   return true;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3738      	adds	r7, #56	; 0x38
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000b8 	.word	0x200000b8
 8000838:	2000226c 	.word	0x2000226c

0800083c <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

   /* Initialise I2S Audio Sampling settings */
   LLD_I2S_INIT(wavPlayer.samplingFreq);
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <wavPlayer_play+0x5c>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4618      	mov	r0, r3
 8000846:	f005 ffe7 	bl	8006818 <LLD_I2S_INIT>
   /* Read Audio data from USB Disk */
   f_lseek(&wavFile, WAV_HEADER_OFFSET);
 800084a:	212c      	movs	r1, #44	; 0x2c
 800084c:	4813      	ldr	r0, [pc, #76]	; (800089c <wavPlayer_play+0x60>)
 800084e:	f00b fdc6 	bl	800c3de <f_lseek>
   f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &wavPlayer.bytesRead);
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <wavPlayer_play+0x5c>)
 8000854:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000858:	4911      	ldr	r1, [pc, #68]	; (80008a0 <wavPlayer_play+0x64>)
 800085a:	4810      	ldr	r0, [pc, #64]	; (800089c <wavPlayer_play+0x60>)
 800085c:	f00b fbb8 	bl	800bfd0 <f_read>
   wavPlayer.audioRemainSize = wavPlayer.DataSize - wavPlayer.bytesRead;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <wavPlayer_play+0x5c>)
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <wavPlayer_play+0x5c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <wavPlayer_play+0x5c>)
 800086c:	6093      	str	r3, [r2, #8]
   wavPlayer_setVolume(wavPlayer.volume,(int16_t *)&audioBuffer[0],wavPlayer.bytesRead/2);
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <wavPlayer_play+0x5c>)
 8000870:	edd3 7a05 	vldr	s15, [r3, #20]
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <wavPlayer_play+0x5c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	b29b      	uxth	r3, r3
 800087c:	4619      	mov	r1, r3
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <wavPlayer_play+0x64>)
 8000880:	eeb0 0a67 	vmov.f32	s0, s15
 8000884:	f000 f8fa 	bl	8000a7c <wavPlayer_setVolume>
   /* Start playing the WAV */
   HAL_I2S_Transmit_DMA(&hAudioI2S, (uint16_t *)&audioBuffer[0], DMA_MAX(AUDIO_BUFFER_SIZE/AUDIODATA_SIZE));
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	4904      	ldr	r1, [pc, #16]	; (80008a0 <wavPlayer_play+0x64>)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <wavPlayer_play+0x68>)
 8000890:	f003 f8f8 	bl	8003a84 <HAL_I2S_Transmit_DMA>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000226c 	.word	0x2000226c
 800089c:	200000b8 	.word	0x200000b8
 80008a0:	20002288 	.word	0x20002288
 80008a4:	20001130 	.word	0x20001130

080008a8 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
PLAYER_CONTROL_e wavPlayer_process(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

   switch(wavPlayer.playerControlSM)
 80008ac:	4b3b      	ldr	r3, [pc, #236]	; (800099c <wavPlayer_process+0xf4>)
 80008ae:	7e1b      	ldrb	r3, [r3, #24]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d86c      	bhi.n	8000990 <wavPlayer_process+0xe8>
 80008b6:	a201      	add	r2, pc, #4	; (adr r2, 80008bc <wavPlayer_process+0x14>)
 80008b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008bc:	08000991 	.word	0x08000991
 80008c0:	080008cd 	.word	0x080008cd
 80008c4:	08000929 	.word	0x08000929
 80008c8:	08000985 	.word	0x08000985
   {
   case PLAYER_CONTROL_Idle:
      break;

   case PLAYER_CONTROL_HalfBuffer:
      wavPlayer.bytesRead = 0;
 80008cc:	4b33      	ldr	r3, [pc, #204]	; (800099c <wavPlayer_process+0xf4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
      wavPlayer.playerControlSM = PLAYER_CONTROL_Idle;
 80008d2:	4b32      	ldr	r3, [pc, #200]	; (800099c <wavPlayer_process+0xf4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	761a      	strb	r2, [r3, #24]
      f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &wavPlayer.bytesRead);
 80008d8:	4b30      	ldr	r3, [pc, #192]	; (800099c <wavPlayer_process+0xf4>)
 80008da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008de:	4930      	ldr	r1, [pc, #192]	; (80009a0 <wavPlayer_process+0xf8>)
 80008e0:	4830      	ldr	r0, [pc, #192]	; (80009a4 <wavPlayer_process+0xfc>)
 80008e2:	f00b fb75 	bl	800bfd0 <f_read>
      wavPlayer_setVolume(wavPlayer.volume,(int16_t *)&audioBuffer[0],wavPlayer.bytesRead/2);
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <wavPlayer_process+0xf4>)
 80008e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <wavPlayer_process+0xf4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	482a      	ldr	r0, [pc, #168]	; (80009a0 <wavPlayer_process+0xf8>)
 80008f8:	eeb0 0a67 	vmov.f32	s0, s15
 80008fc:	f000 f8be 	bl	8000a7c <wavPlayer_setVolume>
      if(wavPlayer.audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <wavPlayer_process+0xf4>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000908:	d907      	bls.n	800091a <wavPlayer_process+0x72>
      {
         wavPlayer.audioRemainSize -= wavPlayer.bytesRead;
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <wavPlayer_process+0xf4>)
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <wavPlayer_process+0xf4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <wavPlayer_process+0xf4>)
 8000916:	6093      	str	r3, [r2, #8]
      {
         wavPlayer.audioRemainSize = 0;
         wavPlayer.playerControlSM = PLAYER_CONTROL_EndOfFile;
      }

      break;
 8000918:	e03a      	b.n	8000990 <wavPlayer_process+0xe8>
         wavPlayer.audioRemainSize = 0;
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <wavPlayer_process+0xf4>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
         wavPlayer.playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <wavPlayer_process+0xf4>)
 8000922:	2203      	movs	r2, #3
 8000924:	761a      	strb	r2, [r3, #24]
      break;
 8000926:	e033      	b.n	8000990 <wavPlayer_process+0xe8>

   case PLAYER_CONTROL_FullBuffer:
      wavPlayer.bytesRead = 0;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <wavPlayer_process+0xf4>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
      wavPlayer.playerControlSM = PLAYER_CONTROL_Idle;
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <wavPlayer_process+0xf4>)
 8000930:	2200      	movs	r2, #0
 8000932:	761a      	strb	r2, [r3, #24]
      f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &wavPlayer.bytesRead);
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <wavPlayer_process+0xf4>)
 8000936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800093a:	491b      	ldr	r1, [pc, #108]	; (80009a8 <wavPlayer_process+0x100>)
 800093c:	4819      	ldr	r0, [pc, #100]	; (80009a4 <wavPlayer_process+0xfc>)
 800093e:	f00b fb47 	bl	800bfd0 <f_read>
      wavPlayer_setVolume(wavPlayer.volume,(int16_t *)&audioBuffer[(AUDIO_BUFFER_SIZE/2)],wavPlayer.bytesRead/2);
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <wavPlayer_process+0xf4>)
 8000944:	edd3 7a05 	vldr	s15, [r3, #20]
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <wavPlayer_process+0xf4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	b29b      	uxth	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	4815      	ldr	r0, [pc, #84]	; (80009a8 <wavPlayer_process+0x100>)
 8000954:	eeb0 0a67 	vmov.f32	s0, s15
 8000958:	f000 f890 	bl	8000a7c <wavPlayer_setVolume>
      if(wavPlayer.audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <wavPlayer_process+0xf4>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000964:	d907      	bls.n	8000976 <wavPlayer_process+0xce>
      {
         wavPlayer.audioRemainSize -= wavPlayer.bytesRead;
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <wavPlayer_process+0xf4>)
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <wavPlayer_process+0xf4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <wavPlayer_process+0xf4>)
 8000972:	6093      	str	r3, [r2, #8]
      {
         wavPlayer.audioRemainSize = 0;
         wavPlayer.playerControlSM = PLAYER_CONTROL_EndOfFile;
      }

      break;
 8000974:	e00c      	b.n	8000990 <wavPlayer_process+0xe8>
         wavPlayer.audioRemainSize = 0;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <wavPlayer_process+0xf4>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
         wavPlayer.playerControlSM = PLAYER_CONTROL_EndOfFile;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <wavPlayer_process+0xf4>)
 800097e:	2203      	movs	r2, #3
 8000980:	761a      	strb	r2, [r3, #24]
      break;
 8000982:	e005      	b.n	8000990 <wavPlayer_process+0xe8>

   case PLAYER_CONTROL_EndOfFile:
      wavPlayer_repeat();
 8000984:	f000 f83c 	bl	8000a00 <wavPlayer_repeat>
      wavPlayer.playerControlSM = PLAYER_CONTROL_Idle;
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <wavPlayer_process+0xf4>)
 800098a:	2200      	movs	r2, #0
 800098c:	761a      	strb	r2, [r3, #24]
      break;
 800098e:	bf00      	nop
   }
   return wavPlayer.playerControlSM;
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <wavPlayer_process+0xf4>)
 8000992:	7e1b      	ldrb	r3, [r3, #24]
 8000994:	b2db      	uxtb	r3, r3
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000226c 	.word	0x2000226c
 80009a0:	20002288 	.word	0x20002288
 80009a4:	200000b8 	.word	0x200000b8
 80009a8:	20002a88 	.word	0x20002a88

080009ac <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
   f_close(&wavFile);
 80009b0:	4806      	ldr	r0, [pc, #24]	; (80009cc <wavPlayer_stop+0x20>)
 80009b2:	f00b fcea 	bl	800c38a <f_close>
   wavPlayer_reset();
 80009b6:	f000 f84b 	bl	8000a50 <wavPlayer_reset>
   wavPlayer.playerControlSM = PLAYER_CONTROL_Idle;
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <wavPlayer_stop+0x24>)
 80009bc:	2200      	movs	r2, #0
 80009be:	761a      	strb	r2, [r3, #24]
   HAL_I2S_DMAStop(&hAudioI2S);
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <wavPlayer_stop+0x28>)
 80009c2:	f003 f9fd 	bl	8003dc0 <HAL_I2S_DMAStop>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000b8 	.word	0x200000b8
 80009d0:	2000226c 	.word	0x2000226c
 80009d4:	20001130 	.word	0x20001130

080009d8 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
   HAL_I2S_DMAPause(&hAudioI2S);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <wavPlayer_pause+0x10>)
 80009de:	f003 f8f9 	bl	8003bd4 <HAL_I2S_DMAPause>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20001130 	.word	0x20001130

080009ec <wavPlayer_resume>:

void wavPlayer_resume(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
   HAL_I2S_DMAResume(&hAudioI2S);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <wavPlayer_resume+0x10>)
 80009f2:	f003 f951 	bl	8003c98 <HAL_I2S_DMAResume>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20001130 	.word	0x20001130

08000a00 <wavPlayer_repeat>:

void wavPlayer_repeat(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
   f_lseek(&wavFile, WAV_HEADER_OFFSET);
 8000a04:	212c      	movs	r1, #44	; 0x2c
 8000a06:	480e      	ldr	r0, [pc, #56]	; (8000a40 <wavPlayer_repeat+0x40>)
 8000a08:	f00b fce9 	bl	800c3de <f_lseek>
   f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &wavPlayer.bytesRead);
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <wavPlayer_repeat+0x44>)
 8000a0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <wavPlayer_repeat+0x48>)
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <wavPlayer_repeat+0x40>)
 8000a16:	f00b fadb 	bl	800bfd0 <f_read>
   wavPlayer_setVolume(0,(int16_t *)&audioBuffer[0],wavPlayer.bytesRead/2);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <wavPlayer_repeat+0x44>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	085b      	lsrs	r3, r3, #1
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4619      	mov	r1, r3
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <wavPlayer_repeat+0x48>)
 8000a26:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000a4c <wavPlayer_repeat+0x4c>
 8000a2a:	f000 f827 	bl	8000a7c <wavPlayer_setVolume>
   wavPlayer.audioRemainSize = wavPlayer.DataSize - wavPlayer.bytesRead;
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <wavPlayer_repeat+0x44>)
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <wavPlayer_repeat+0x44>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	4a02      	ldr	r2, [pc, #8]	; (8000a44 <wavPlayer_repeat+0x44>)
 8000a3a:	6093      	str	r3, [r2, #8]
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000b8 	.word	0x200000b8
 8000a44:	2000226c 	.word	0x2000226c
 8000a48:	20002288 	.word	0x20002288
 8000a4c:	00000000 	.word	0x00000000

08000a50 <wavPlayer_reset>:
static void wavPlayer_reset(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
   wavPlayer.audioRemainSize = 0;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <wavPlayer_reset+0x28>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
   wavPlayer.bytesRead = 0;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <wavPlayer_reset+0x28>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
   wavPlayer.DataSize = 0;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <wavPlayer_reset+0x28>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
   wavPlayer.volume = 0;
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <wavPlayer_reset+0x28>)
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	2000226c 	.word	0x2000226c

08000a7c <wavPlayer_setVolume>:

/**
 * @brief Set Volume
 */
static void wavPlayer_setVolume(float volume, int16_t * data, uint16_t size)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b087      	sub	sp, #28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a86:	60b8      	str	r0, [r7, #8]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	80fb      	strh	r3, [r7, #6]
   uint16_t  idx;


   for(idx = 0; idx < size; idx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	82fb      	strh	r3, [r7, #22]
 8000a90:	e01a      	b.n	8000ac8 <wavPlayer_setVolume+0x4c>
   {
      data[idx] = (int16_t)((float)(data[idx]) * volume);
 8000a92:	8afb      	ldrh	r3, [r7, #22]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aae:	8afb      	ldrh	r3, [r7, #22]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aba:	ee17 2a90 	vmov	r2, s15
 8000abe:	b212      	sxth	r2, r2
 8000ac0:	801a      	strh	r2, [r3, #0]
   for(idx = 0; idx < size; idx++)
 8000ac2:	8afb      	ldrh	r3, [r7, #22]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	82fb      	strh	r3, [r7, #22]
 8000ac8:	8afa      	ldrh	r2, [r7, #22]
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d3e0      	bcc.n	8000a92 <wavPlayer_setVolume+0x16>
   }
}
 8000ad0:	bf00      	nop
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <HAL_I2S_TxCpltCallback>:
/**
 * @brief Half/Full transfer Audio callback for buffer management
 */

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
   if(hi2s->Instance == SPI3)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <HAL_I2S_TxCpltCallback+0x24>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d102      	bne.n	8000af4 <HAL_I2S_TxCpltCallback+0x18>
   {
      wavPlayer.playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_I2S_TxCpltCallback+0x28>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	761a      	strb	r2, [r3, #24]
   }
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40003c00 	.word	0x40003c00
 8000b04:	2000226c 	.word	0x2000226c

08000b08 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
   if(hi2s->Instance == SPI3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d102      	bne.n	8000b20 <HAL_I2S_TxHalfCpltCallback+0x18>
   {
      wavPlayer.playerControlSM =  PLAYER_CONTROL_HalfBuffer ;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	761a      	strb	r2, [r3, #24]
   }
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40003c00 	.word	0x40003c00
 8000b30:	2000226c 	.word	0x2000226c

08000b34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

   /* USER CODE END DMA1_Stream5_IRQn 0 */
   HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA1_Stream5_IRQHandler+0x10>)
 8000b3a:	f000 fd33 	bl	80015a4 <HAL_DMA_IRQHandler>
   /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

   /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20001178 	.word	0x20001178

08000b48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN EXTI15_10_IRQn 0 */

   /* USER CODE END EXTI15_10_IRQn 0 */
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b50:	f001 f944 	bl	8001ddc <HAL_GPIO_EXTI_IRQHandler>
   /* USER CODE BEGIN EXTI15_10_IRQn 1 */

   /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN TIM5_IRQn 0 */

   /* USER CODE END TIM5_IRQn 0 */
   HAL_TIM_IRQHandler(&htim5);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM5_IRQHandler+0x10>)
 8000b5e:	f004 fd4a 	bl	80055f6 <HAL_TIM_IRQHandler>
   /* USER CODE BEGIN TIM5_IRQn 1 */

   /* USER CODE END TIM5_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000328c 	.word	0x2000328c

08000b6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN OTG_FS_IRQn 0 */

   /* USER CODE END OTG_FS_IRQn 0 */
   HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <OTG_FS_IRQHandler+0x10>)
 8000b72:	f001 fbe5 	bl	8002340 <HAL_HCD_IRQHandler>
   /* USER CODE BEGIN OTG_FS_IRQn 1 */

   /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20005710 	.word	0x20005710

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
   MAIN_INIT();
 8000b84:	f000 f803 	bl	8000b8e <MAIN_INIT>
   /* Infinite loop */
   while (1)
   {
      ABSinfo_MAIN();
 8000b88:	f7ff fcd6 	bl	8000538 <ABSinfo_MAIN>
 8000b8c:	e7fc      	b.n	8000b88 <main+0x8>

08000b8e <MAIN_INIT>:
 *      Author: uidp7521
 */
#include "main_init.h"

void MAIN_INIT(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
   SystemClock_Config();
 8000b92:	f006 f929 	bl	8006de8 <SystemClock_Config>
   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000b96:	f006 f843 	bl	8006c20 <MX_GPIO_Init>
   MX_DMA_Init();
 8000b9a:	f005 ff75 	bl	8006a88 <MX_DMA_Init>
   MX_ADC1_Init();
 8000b9e:	f005 ff93 	bl	8006ac8 <MX_ADC1_Init>
   MX_FATFS_Init();
 8000ba2:	f006 fa01 	bl	8006fa8 <MX_FATFS_Init>
   MX_USB_HOST_Init();
 8000ba6:	f00b fe9b 	bl	800c8e0 <MX_USB_HOST_Init>
   ABSinfo_INIT();
 8000baa:	f7ff fc93 	bl	80004d4 <ABSinfo_INIT>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bba:	e003      	b.n	8000bc4 <LoopCopyDataInit>

08000bbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bc2:	3104      	adds	r1, #4

08000bc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bcc:	d3f6      	bcc.n	8000bbc <CopyDataInit>
  ldr  r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bd0:	e002      	b.n	8000bd8 <LoopFillZerobss>

08000bd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bd4:	f842 3b04 	str.w	r3, [r2], #4

08000bd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bdc:	d3f9      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bde:	f006 f8ed 	bl	8006dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f00c f96f 	bl	800cec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff ffcb 	bl	8000b80 <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bec:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000bf0:	0800d280 	.word	0x0800d280
  ldr  r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bf8:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8000bfc:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8000c00:	200059d8 	.word	0x200059d8

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>
	...

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	20003288 	.word	0x20003288

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20003288 	.word	0x20003288

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff ffee 	bl	8000c30 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_Delay+0x40>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffde 	bl	8000c30 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000000c 	.word	0x2000000c

08000c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e033      	b.n	8000d0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d109      	bne.n	8000cbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f005 ff5a 	bl	8006b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d118      	bne.n	8000cfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cd2:	f023 0302 	bic.w	r3, r3, #2
 8000cd6:	f043 0202 	orr.w	r2, r3, #2
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f93a 	bl	8000f58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f023 0303 	bic.w	r3, r3, #3
 8000cf2:	f043 0201 	orr.w	r2, r3, #1
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfa:	e001      	b.n	8000d00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d101      	bne.n	8000d30 <HAL_ADC_ConfigChannel+0x1c>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e105      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x228>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b09      	cmp	r3, #9
 8000d3e:	d925      	bls.n	8000d8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68d9      	ldr	r1, [r3, #12]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	3b1e      	subs	r3, #30
 8000d56:	2207      	movs	r2, #7
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43da      	mvns	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	400a      	ands	r2, r1
 8000d64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68d9      	ldr	r1, [r3, #12]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	4603      	mov	r3, r0
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4403      	add	r3, r0
 8000d7e:	3b1e      	subs	r3, #30
 8000d80:	409a      	lsls	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	e022      	b.n	8000dd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6919      	ldr	r1, [r3, #16]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	2207      	movs	r2, #7
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	400a      	ands	r2, r1
 8000dae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6919      	ldr	r1, [r3, #16]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4403      	add	r3, r0
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d824      	bhi.n	8000e24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	3b05      	subs	r3, #5
 8000dec:	221f      	movs	r2, #31
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	400a      	ands	r2, r1
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	3b05      	subs	r3, #5
 8000e16:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	635a      	str	r2, [r3, #52]	; 0x34
 8000e22:	e04c      	b.n	8000ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b0c      	cmp	r3, #12
 8000e2a:	d824      	bhi.n	8000e76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3b23      	subs	r3, #35	; 0x23
 8000e3e:	221f      	movs	r2, #31
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43da      	mvns	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	3b23      	subs	r3, #35	; 0x23
 8000e68:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30
 8000e74:	e023      	b.n	8000ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	3b41      	subs	r3, #65	; 0x41
 8000e88:	221f      	movs	r2, #31
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	400a      	ands	r2, r1
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	3b41      	subs	r3, #65	; 0x41
 8000eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_ADC_ConfigChannel+0x234>)
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <HAL_ADC_ConfigChannel+0x238>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d109      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x1cc>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d105      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_ADC_ConfigChannel+0x238>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d123      	bne.n	8000f32 <HAL_ADC_ConfigChannel+0x21e>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b10      	cmp	r3, #16
 8000ef0:	d003      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x1e6>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b11      	cmp	r3, #17
 8000ef8:	d11b      	bne.n	8000f32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b10      	cmp	r3, #16
 8000f0c:	d111      	bne.n	8000f32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_ADC_ConfigChannel+0x23c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_ADC_ConfigChannel+0x240>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	0c9a      	lsrs	r2, r3, #18
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000f24:	e002      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f9      	bne.n	8000f26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40012300 	.word	0x40012300
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	20000010 	.word	0x20000010
 8000f54:	431bde83 	.word	0x431bde83

08000f58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f60:	4b79      	ldr	r3, [pc, #484]	; (8001148 <ADC_Init+0x1f0>)
 8000f62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6859      	ldr	r1, [r3, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	021a      	lsls	r2, r3, #8
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6859      	ldr	r1, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6899      	ldr	r1, [r3, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	4a58      	ldr	r2, [pc, #352]	; (800114c <ADC_Init+0x1f4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d022      	beq.n	8001036 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ffe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6899      	ldr	r1, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001020:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6899      	ldr	r1, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	e00f      	b.n	8001056 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001054:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0202 	bic.w	r2, r2, #2
 8001064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6899      	ldr	r1, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7e1b      	ldrb	r3, [r3, #24]
 8001070:	005a      	lsls	r2, r3, #1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d01b      	beq.n	80010bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001092:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80010a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6859      	ldr	r1, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	3b01      	subs	r3, #1
 80010b0:	035a      	lsls	r2, r3, #13
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	e007      	b.n	80010cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	051a      	lsls	r2, r3, #20
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6899      	ldr	r1, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800110e:	025a      	lsls	r2, r3, #9
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6899      	ldr	r1, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	029a      	lsls	r2, r3, #10
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	609a      	str	r2, [r3, #8]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40012300 	.word	0x40012300
 800114c:	0f000001 	.word	0x0f000001

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <__NVIC_EnableIRQ+0x38>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001274:	f7ff ff6c 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	6978      	ldr	r0, [r7, #20]
 8001280:	f7ff ffbc 	bl	80011fc <NVIC_EncodePriority>
 8001284:	4602      	mov	r2, r0
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff8b 	bl	80011a8 <__NVIC_SetPriority>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fcb4 	bl	8000c30 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e099      	b.n	8001408 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2202      	movs	r2, #2
 80012e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f4:	e00f      	b.n	8001316 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f6:	f7ff fc9b 	bl	8000c30 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b05      	cmp	r3, #5
 8001302:	d908      	bls.n	8001316 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2220      	movs	r2, #32
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e078      	b.n	8001408 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e8      	bne.n	80012f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_DMA_Init+0x158>)
 8001330:	4013      	ands	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	2b04      	cmp	r3, #4
 800136e:	d107      	bne.n	8001380 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4313      	orrs	r3, r2
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4313      	orrs	r3, r2
 800137e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f023 0307 	bic.w	r3, r3, #7
 8001396:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	4313      	orrs	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d117      	bne.n	80013da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fadf 	bl	8001980 <DMA_CheckFifoParam>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013d6:	2301      	movs	r3, #1
 80013d8:	e016      	b.n	8001408 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fa96 	bl	8001914 <DMA_CalcBaseAndBitshift>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f0:	223f      	movs	r2, #63	; 0x3f
 80013f2:	409a      	lsls	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	f010803f 	.word	0xf010803f

08001414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_DMA_Start_IT+0x26>
 8001436:	2302      	movs	r3, #2
 8001438:	e040      	b.n	80014bc <HAL_DMA_Start_IT+0xa8>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d12f      	bne.n	80014ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2202      	movs	r2, #2
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 fa28 	bl	80018b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	223f      	movs	r2, #63	; 0x3f
 800146e:	409a      	lsls	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0216 	orr.w	r2, r2, #22
 8001482:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0208 	orr.w	r2, r2, #8
 800149a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e005      	b.n	80014ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014b6:	2302      	movs	r3, #2
 80014b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014d2:	f7ff fbad 	bl	8000c30 <HAL_GetTick>
 80014d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d008      	beq.n	80014f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e052      	b.n	800159c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0216 	bic.w	r2, r2, #22
 8001504:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001514:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <HAL_DMA_Abort+0x62>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0208 	bic.w	r2, r2, #8
 8001534:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001546:	e013      	b.n	8001570 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001548:	f7ff fb72 	bl	8000c30 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b05      	cmp	r3, #5
 8001554:	d90c      	bls.n	8001570 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2203      	movs	r2, #3
 8001568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e015      	b.n	800159c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1e4      	bne.n	8001548 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	223f      	movs	r2, #63	; 0x3f
 8001584:	409a      	lsls	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015b0:	4b92      	ldr	r3, [pc, #584]	; (80017fc <HAL_DMA_IRQHandler+0x258>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a92      	ldr	r2, [pc, #584]	; (8001800 <HAL_DMA_IRQHandler+0x25c>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0a9b      	lsrs	r3, r3, #10
 80015bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ce:	2208      	movs	r2, #8
 80015d0:	409a      	lsls	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01a      	beq.n	8001610 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0204 	bic.w	r2, r2, #4
 80015f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	2208      	movs	r2, #8
 80015fe:	409a      	lsls	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2201      	movs	r2, #1
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d012      	beq.n	8001646 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001632:	2201      	movs	r2, #1
 8001634:	409a      	lsls	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163e:	f043 0202 	orr.w	r2, r3, #2
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	2204      	movs	r2, #4
 800164c:	409a      	lsls	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d012      	beq.n	800167c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2204      	movs	r2, #4
 800166a:	409a      	lsls	r2, r3
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	f043 0204 	orr.w	r2, r3, #4
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2210      	movs	r2, #16
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d043      	beq.n	8001714 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d03c      	beq.n	8001714 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	2210      	movs	r2, #16
 80016a0:	409a      	lsls	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d018      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d108      	bne.n	80016d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d024      	beq.n	8001714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
 80016d2:	e01f      	b.n	8001714 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01b      	beq.n	8001714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
 80016e4:	e016      	b.n	8001714 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d107      	bne.n	8001704 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0208 	bic.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001718:	2220      	movs	r2, #32
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 808e 	beq.w	8001842 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 8086 	beq.w	8001842 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	2220      	movs	r2, #32
 800173c:	409a      	lsls	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b05      	cmp	r3, #5
 800174c:	d136      	bne.n	80017bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0216 	bic.w	r2, r2, #22
 800175c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800176c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d103      	bne.n	800177e <HAL_DMA_IRQHandler+0x1da>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0208 	bic.w	r2, r2, #8
 800178c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001792:	223f      	movs	r2, #63	; 0x3f
 8001794:	409a      	lsls	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d07d      	beq.n	80018ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
        }
        return;
 80017ba:	e078      	b.n	80018ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d01c      	beq.n	8001804 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d108      	bne.n	80017ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d030      	beq.n	8001842 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
 80017e8:	e02b      	b.n	8001842 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d027      	beq.n	8001842 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
 80017fa:	e022      	b.n	8001842 <HAL_DMA_IRQHandler+0x29e>
 80017fc:	20000010 	.word	0x20000010
 8001800:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0210 	bic.w	r2, r2, #16
 8001820:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001846:	2b00      	cmp	r3, #0
 8001848:	d032      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d022      	beq.n	800189c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2205      	movs	r2, #5
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3301      	adds	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	429a      	cmp	r2, r3
 8001878:	d307      	bcc.n	800188a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f2      	bne.n	800186e <HAL_DMA_IRQHandler+0x2ca>
 8001888:	e000      	b.n	800188c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800188a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
 80018ac:	e000      	b.n	80018b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018ae:	bf00      	nop
    }
  }
}
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop

080018b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b40      	cmp	r3, #64	; 0x40
 80018e4:	d108      	bne.n	80018f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018f6:	e007      	b.n	8001908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3b10      	subs	r3, #16
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <DMA_CalcBaseAndBitshift+0x64>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <DMA_CalcBaseAndBitshift+0x68>)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d909      	bls.n	8001956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	1d1a      	adds	r2, r3, #4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	659a      	str	r2, [r3, #88]	; 0x58
 8001954:	e007      	b.n	8001966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	aaaaaaab 	.word	0xaaaaaaab
 800197c:	0800d15c 	.word	0x0800d15c

08001980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11f      	bne.n	80019da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d855      	bhi.n	8001a4c <DMA_CheckFifoParam+0xcc>
 80019a0:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <DMA_CheckFifoParam+0x28>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019cb 	.word	0x080019cb
 80019b0:	080019b9 	.word	0x080019b9
 80019b4:	08001a4d 	.word	0x08001a4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d045      	beq.n	8001a50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c8:	e042      	b.n	8001a50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d2:	d13f      	bne.n	8001a54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d8:	e03c      	b.n	8001a54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e2:	d121      	bne.n	8001a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d836      	bhi.n	8001a58 <DMA_CheckFifoParam+0xd8>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <DMA_CheckFifoParam+0x70>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a07 	.word	0x08001a07
 80019f8:	08001a01 	.word	0x08001a01
 80019fc:	08001a19 	.word	0x08001a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      break;
 8001a04:	e02f      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d024      	beq.n	8001a5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a16:	e021      	b.n	8001a5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a20:	d11e      	bne.n	8001a60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a26:	e01b      	b.n	8001a60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d902      	bls.n	8001a34 <DMA_CheckFifoParam+0xb4>
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d003      	beq.n	8001a3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a32:	e018      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
      break;
 8001a38:	e015      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00e      	beq.n	8001a64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4a:	e00b      	b.n	8001a64 <DMA_CheckFifoParam+0xe4>
      break;
 8001a4c:	bf00      	nop
 8001a4e:	e00a      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      break;
 8001a50:	bf00      	nop
 8001a52:	e008      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      break;
 8001a54:	bf00      	nop
 8001a56:	e006      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      break;
 8001a58:	bf00      	nop
 8001a5a:	e004      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      break;
 8001a5c:	bf00      	nop
 8001a5e:	e002      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a60:	bf00      	nop
 8001a62:	e000      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      break;
 8001a64:	bf00      	nop
    }
  } 
  
  return status; 
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e159      	b.n	8001d44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8148 	bne.w	8001d3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d00b      	beq.n	8001ace <HAL_GPIO_Init+0x5a>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac2:	2b11      	cmp	r3, #17
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0xfc>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80a2 	beq.w	8001d3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <HAL_GPIO_Init+0x2e4>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a55      	ldr	r2, [pc, #340]	; (8001d58 <HAL_GPIO_Init+0x2e4>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_GPIO_Init+0x2e4>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c16:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_GPIO_Init+0x2e8>)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x2ec>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x202>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a47      	ldr	r2, [pc, #284]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x1fe>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a46      	ldr	r2, [pc, #280]	; (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x1fa>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a45      	ldr	r2, [pc, #276]	; (8001d6c <HAL_GPIO_Init+0x2f8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x1f6>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <HAL_GPIO_Init+0x2fc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x1f2>
 8001c62:	2304      	movs	r3, #4
 8001c64:	e008      	b.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c66:	2307      	movs	r3, #7
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e004      	b.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c76:	2300      	movs	r3, #0
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	f002 0203 	and.w	r2, r2, #3
 8001c7e:	0092      	lsls	r2, r2, #2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c88:	4934      	ldr	r1, [pc, #208]	; (8001d5c <HAL_GPIO_Init+0x2e8>)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cba:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce4:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0e:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d38:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	f67f aea2 	bls.w	8001a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3724      	adds	r7, #36	; 0x24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	e001      	b.n	8001d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc4:	e003      	b.n	8001dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	041a      	lsls	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	619a      	str	r2, [r3, #24]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f806 	bl	8001e0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e24:	b08f      	sub	sp, #60	; 0x3c
 8001e26:	af0a      	add	r7, sp, #40	; 0x28
 8001e28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e054      	b.n	8001ede <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f00a fd94 	bl	800c97c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2203      	movs	r2, #3
 8001e58:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fdf6 	bl	8005a64 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	687e      	ldr	r6, [r7, #4]
 8001e80:	466d      	mov	r5, sp
 8001e82:	f106 0410 	add.w	r4, r6, #16
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e92:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e96:	1d33      	adds	r3, r6, #4
 8001e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9a:	6838      	ldr	r0, [r7, #0]
 8001e9c:	f003 fd70 	bl	8005980 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fded 	bl	8005a86 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	687e      	ldr	r6, [r7, #4]
 8001eb4:	466d      	mov	r5, sp
 8001eb6:	f106 0410 	add.w	r4, r6, #16
 8001eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eca:	1d33      	adds	r3, r6, #4
 8001ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ece:	6838      	ldr	r0, [r7, #0]
 8001ed0:	f003 ff00 	bl	8005cd4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ee6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ee6:	b590      	push	{r4, r7, lr}
 8001ee8:	b089      	sub	sp, #36	; 0x24
 8001eea:	af04      	add	r7, sp, #16
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	4608      	mov	r0, r1
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	70fb      	strb	r3, [r7, #3]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70bb      	strb	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_HCD_HC_Init+0x28>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e07f      	b.n	800200e <HAL_HCD_HC_Init+0x128>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	333d      	adds	r3, #61	; 0x3d
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	3338      	adds	r3, #56	; 0x38
 8001f3a:	787a      	ldrb	r2, [r7, #1]
 8001f3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3340      	adds	r3, #64	; 0x40
 8001f4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f50:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3339      	adds	r3, #57	; 0x39
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	333f      	adds	r3, #63	; 0x3f
 8001f76:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	78bb      	ldrb	r3, [r7, #2]
 8001f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f84:	b2d8      	uxtb	r0, r3
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	333a      	adds	r3, #58	; 0x3a
 8001f94:	4602      	mov	r2, r0
 8001f96:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da0a      	bge.n	8001fb6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	333b      	adds	r3, #59	; 0x3b
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e009      	b.n	8001fca <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	333b      	adds	r3, #59	; 0x3b
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	333c      	adds	r3, #60	; 0x3c
 8001fda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fde:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	787c      	ldrb	r4, [r7, #1]
 8001fe6:	78ba      	ldrb	r2, [r7, #2]
 8001fe8:	78f9      	ldrb	r1, [r7, #3]
 8001fea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	f003 ffec 	bl	8005fd8 <USB_HC_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}

08002016 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_HCD_HC_Halt+0x1e>
 8002030:	2302      	movs	r3, #2
 8002032:	e00f      	b.n	8002054 <HAL_HCD_HC_Halt+0x3e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f004 fa26 	bl	8006496 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	461a      	mov	r2, r3
 800206a:	4603      	mov	r3, r0
 800206c:	70fb      	strb	r3, [r7, #3]
 800206e:	460b      	mov	r3, r1
 8002070:	70bb      	strb	r3, [r7, #2]
 8002072:	4613      	mov	r3, r2
 8002074:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	333b      	adds	r3, #59	; 0x3b
 8002086:	78ba      	ldrb	r2, [r7, #2]
 8002088:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	333f      	adds	r3, #63	; 0x3f
 800209a:	787a      	ldrb	r2, [r7, #1]
 800209c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800209e:	7c3b      	ldrb	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d114      	bne.n	80020ce <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3342      	adds	r3, #66	; 0x42
 80020b4:	2203      	movs	r2, #3
 80020b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	333d      	adds	r3, #61	; 0x3d
 80020c8:	7f3a      	ldrb	r2, [r7, #28]
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	e009      	b.n	80020e2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	3342      	adds	r3, #66	; 0x42
 80020de:	2202      	movs	r2, #2
 80020e0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020e2:	787b      	ldrb	r3, [r7, #1]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	f200 80d6 	bhi.w	8002296 <HAL_HCD_HC_SubmitRequest+0x23a>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002281 	.word	0x08002281
 80020f8:	0800216d 	.word	0x0800216d
 80020fc:	080021f7 	.word	0x080021f7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002100:	7c3b      	ldrb	r3, [r7, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 80c9 	bne.w	800229a <HAL_HCD_HC_SubmitRequest+0x23e>
 8002108:	78bb      	ldrb	r3, [r7, #2]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 80c5 	bne.w	800229a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002110:	8b3b      	ldrh	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	3351      	adds	r3, #81	; 0x51
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3351      	adds	r3, #81	; 0x51
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	3342      	adds	r3, #66	; 0x42
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002154:	e0a1      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	3342      	adds	r3, #66	; 0x42
 8002166:	2202      	movs	r2, #2
 8002168:	701a      	strb	r2, [r3, #0]
      break;
 800216a:	e096      	b.n	800229a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800216c:	78bb      	ldrb	r3, [r7, #2]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d120      	bne.n	80021b4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	3351      	adds	r3, #81	; 0x51
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3342      	adds	r3, #66	; 0x42
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800219c:	e07e      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	3342      	adds	r3, #66	; 0x42
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
      break;
 80021b2:	e073      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3350      	adds	r3, #80	; 0x50
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3342      	adds	r3, #66	; 0x42
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
      break;
 80021de:	e05d      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	3342      	adds	r3, #66	; 0x42
 80021f0:	2202      	movs	r2, #2
 80021f2:	701a      	strb	r2, [r3, #0]
      break;
 80021f4:	e052      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021f6:	78bb      	ldrb	r3, [r7, #2]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d120      	bne.n	800223e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	3351      	adds	r3, #81	; 0x51
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10a      	bne.n	8002228 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	3342      	adds	r3, #66	; 0x42
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002226:	e039      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	3342      	adds	r3, #66	; 0x42
 8002238:	2202      	movs	r2, #2
 800223a:	701a      	strb	r2, [r3, #0]
      break;
 800223c:	e02e      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	3350      	adds	r3, #80	; 0x50
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3342      	adds	r3, #66	; 0x42
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
      break;
 8002268:	e018      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	3342      	adds	r3, #66	; 0x42
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
      break;
 800227e:	e00d      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	3342      	adds	r3, #66	; 0x42
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
      break;
 8002294:	e002      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800229a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3344      	adds	r3, #68	; 0x44
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	8b39      	ldrh	r1, [r7, #24]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4403      	add	r3, r0
 80022c0:	3348      	adds	r3, #72	; 0x48
 80022c2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	334c      	adds	r3, #76	; 0x4c
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	3339      	adds	r3, #57	; 0x39
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	335d      	adds	r3, #93	; 0x5d
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	3338      	adds	r3, #56	; 0x38
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	18d1      	adds	r1, r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	f003 ff5c 	bl	80061ec <USB_HC_StartXfer>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop

08002340 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fc79 	bl	8005c4e <USB_GetMode>
 800235c:	4603      	mov	r3, r0
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 80ef 	bne.w	8002542 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fc5d 	bl	8005c28 <USB_ReadInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80e5 	beq.w	8002540 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fc54 	bl	8005c28 <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800238a:	d104      	bne.n	8002396 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002394:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fc44 	bl	8005c28 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023aa:	d104      	bne.n	80023b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fc34 	bl	8005c28 <USB_ReadInterrupts>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ca:	d104      	bne.n	80023d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fc24 	bl	8005c28 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d103      	bne.n	80023f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2202      	movs	r2, #2
 80023f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fc16 	bl	8005c28 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002406:	d115      	bne.n	8002434 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002410:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d108      	bne.n	8002434 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f00a fb1a 	bl	800ca5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fd0c 	bl	8005e4c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 fbf5 	bl	8005c28 <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002448:	d102      	bne.n	8002450 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f001 f966 	bl	800371c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fbe7 	bl	8005c28 <USB_ReadInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b08      	cmp	r3, #8
 8002462:	d106      	bne.n	8002472 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f00a fadd 	bl	800ca24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2208      	movs	r2, #8
 8002470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fbd6 	bl	8005c28 <USB_ReadInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002486:	d138      	bne.n	80024fa <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fff1 	bl	8006474 <USB_HC_ReadInterrupt>
 8002492:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e025      	b.n	80024e6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d018      	beq.n	80024e0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c4:	d106      	bne.n	80024d4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8cf 	bl	8002670 <HCD_HC_IN_IRQHandler>
 80024d2:	e005      	b.n	80024e0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fcfd 	bl	8002eda <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d3d4      	bcc.n	800249a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fb92 	bl	8005c28 <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b10      	cmp	r3, #16
 800250c:	d101      	bne.n	8002512 <HAL_HCD_IRQHandler+0x1d2>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_HCD_IRQHandler+0x1d4>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d014      	beq.n	8002542 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0210 	bic.w	r2, r2, #16
 8002526:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f001 f84b 	bl	80035c4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0210 	orr.w	r2, r2, #16
 800253c:	619a      	str	r2, [r3, #24]
 800253e:	e000      	b.n	8002542 <HAL_HCD_IRQHandler+0x202>
      return;
 8002540:	bf00      	nop
    }
  }
}
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_HCD_Start+0x16>
 800255a:	2302      	movs	r3, #2
 800255c:	e013      	b.n	8002586 <HAL_HCD_Start+0x3e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f003 fa69 	bl	8005a42 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fccc 	bl	8005f14 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_HCD_Stop+0x16>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e00d      	b.n	80025c0 <HAL_HCD_Stop+0x32>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 f8ab 	bl	800670c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fc73 	bl	8005ec0 <USB_ResetPort>
 80025da:	4603      	mov	r3, r0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	781b      	ldrb	r3, [r3, #0]
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	334c      	adds	r3, #76	; 0x4c
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f003 fcb5 	bl	8005fb4 <USB_GetCurrentFrame>
 800264a:	4603      	mov	r3, r0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fc90 	bl	8005f86 <USB_GetHostSpeed>
 8002666:	4603      	mov	r3, r0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d119      	bne.n	80026d4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	2304      	movs	r3, #4
 80026b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	0151      	lsls	r1, r2, #5
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	440a      	add	r2, r1
 80026c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	60d3      	str	r3, [r2, #12]
 80026d2:	e0ce      	b.n	8002872 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ea:	d12c      	bne.n	8002746 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	335d      	adds	r3, #93	; 0x5d
 8002710:	2207      	movs	r2, #7
 8002712:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	0151      	lsls	r1, r2, #5
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	440a      	add	r2, r1
 800272a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fea9 	bl	8006496 <USB_HC_Halt>
 8002744:	e095      	b.n	8002872 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b20      	cmp	r3, #32
 800275a:	d109      	bne.n	8002770 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	2320      	movs	r3, #32
 800276c:	6093      	str	r3, [r2, #8]
 800276e:	e080      	b.n	8002872 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d134      	bne.n	80027f0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	0151      	lsls	r1, r2, #5
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	440a      	add	r2, r1
 800279c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	335d      	adds	r3, #93	; 0x5d
 80027b6:	2205      	movs	r2, #5
 80027b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	461a      	mov	r2, r3
 80027c8:	2310      	movs	r3, #16
 80027ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	461a      	mov	r2, r3
 80027da:	2308      	movs	r3, #8
 80027dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f003 fe54 	bl	8006496 <USB_HC_Halt>
 80027ee:	e040      	b.n	8002872 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002806:	d134      	bne.n	8002872 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	0151      	lsls	r1, r2, #5
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	440a      	add	r2, r1
 800281e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f003 fe2f 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	461a      	mov	r2, r3
 8002846:	2310      	movs	r3, #16
 8002848:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	335d      	adds	r3, #93	; 0x5d
 800285a:	2208      	movs	r2, #8
 800285c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	461a      	mov	r2, r3
 800286c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002870:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002888:	d122      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fdee 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	461a      	mov	r2, r3
 80028c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028cc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028ce:	e300      	b.n	8002ed2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 80fd 	bne.w	8002ae2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	3348      	adds	r3, #72	; 0x48
 8002900:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	0159      	lsls	r1, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	440b      	add	r3, r1
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002914:	1ad1      	subs	r1, r2, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4403      	add	r3, r0
 8002924:	334c      	adds	r3, #76	; 0x4c
 8002926:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	440b      	add	r3, r1
 8002936:	335d      	adds	r3, #93	; 0x5d
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	3358      	adds	r3, #88	; 0x58
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	2301      	movs	r3, #1
 8002960:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	333f      	adds	r3, #63	; 0x3f
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	333f      	adds	r3, #63	; 0x3f
 8002988:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800298a:	2b02      	cmp	r3, #2
 800298c:	d121      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	0151      	lsls	r1, r2, #5
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	440a      	add	r2, r1
 80029a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 fd6c 	bl	8006496 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	461a      	mov	r2, r3
 80029cc:	2310      	movs	r3, #16
 80029ce:	6093      	str	r3, [r2, #8]
 80029d0:	e070      	b.n	8002ab4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	333f      	adds	r3, #63	; 0x3f
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d12a      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	0151      	lsls	r1, r2, #5
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	440a      	add	r2, r1
 80029fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a06:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	335c      	adds	r3, #92	; 0x5c
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	b2d8      	uxtb	r0, r3
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	335c      	adds	r3, #92	; 0x5c
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	4601      	mov	r1, r0
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f00a f81e 	bl	800ca78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a3c:	e03a      	b.n	8002ab4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	333f      	adds	r3, #63	; 0x3f
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d12f      	bne.n	8002ab4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	3350      	adds	r3, #80	; 0x50
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	f083 0301 	eor.w	r3, r3, #1
 8002a7e:	b2d8      	uxtb	r0, r3
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3350      	adds	r3, #80	; 0x50
 8002a90:	4602      	mov	r2, r0
 8002a92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	335c      	adds	r3, #92	; 0x5c
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4601      	mov	r1, r0
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f009 ffe2 	bl	800ca78 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3350      	adds	r3, #80	; 0x50
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f083 0301 	eor.w	r3, r3, #1
 8002aca:	b2d8      	uxtb	r0, r3
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3350      	adds	r3, #80	; 0x50
 8002adc:	4602      	mov	r2, r0
 8002ade:	701a      	strb	r2, [r3, #0]
}
 8002ae0:	e1f7      	b.n	8002ed2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	f040 811a 	bne.w	8002d2e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	0151      	lsls	r1, r2, #5
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	440a      	add	r2, r1
 8002b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b14:	f023 0302 	bic.w	r3, r3, #2
 8002b18:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	335d      	adds	r3, #93	; 0x5d
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10a      	bne.n	8002b46 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	335c      	adds	r3, #92	; 0x5c
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e0d9      	b.n	8002cfa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	335d      	adds	r3, #93	; 0x5d
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d10a      	bne.n	8002b72 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e0c3      	b.n	8002cfa <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	335d      	adds	r3, #93	; 0x5d
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d00a      	beq.n	8002b9e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	335d      	adds	r3, #93	; 0x5d
 8002b98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d156      	bne.n	8002c4c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3358      	adds	r3, #88	; 0x58
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1c59      	adds	r1, r3, #1
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4403      	add	r3, r0
 8002bc0:	3358      	adds	r3, #88	; 0x58
 8002bc2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3358      	adds	r3, #88	; 0x58
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d914      	bls.n	8002c04 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3358      	adds	r3, #88	; 0x58
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	335c      	adds	r3, #92	; 0x5c
 8002bfe:	2204      	movs	r2, #4
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e009      	b.n	8002c18 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	335c      	adds	r3, #92	; 0x5c
 8002c14:	2202      	movs	r2, #2
 8002c16:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c2e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c36:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e056      	b.n	8002cfa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	335d      	adds	r3, #93	; 0x5d
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d123      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	335c      	adds	r3, #92	; 0x5c
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c8c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c94:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e027      	b.n	8002cfa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	335d      	adds	r3, #93	; 0x5d
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b07      	cmp	r3, #7
 8002cbe:	d11c      	bne.n	8002cfa <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	3358      	adds	r3, #88	; 0x58
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1c59      	adds	r1, r3, #1
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4403      	add	r3, r0
 8002ce2:	3358      	adds	r3, #88	; 0x58
 8002ce4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	335c      	adds	r3, #92	; 0x5c
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	461a      	mov	r2, r3
 8002d08:	2302      	movs	r3, #2
 8002d0a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	b2d8      	uxtb	r0, r3
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	335c      	adds	r3, #92	; 0x5c
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	4601      	mov	r1, r0
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f009 fea6 	bl	800ca78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d2c:	e0d1      	b.n	8002ed2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d13e      	bne.n	8002dc2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	0151      	lsls	r1, r2, #5
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	440a      	add	r2, r1
 8002d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	3358      	adds	r3, #88	; 0x58
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	1c59      	adds	r1, r3, #1
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4403      	add	r3, r0
 8002d86:	3358      	adds	r3, #88	; 0x58
 8002d88:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	335d      	adds	r3, #93	; 0x5d
 8002d9a:	2206      	movs	r2, #6
 8002d9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fb74 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	6093      	str	r3, [r2, #8]
}
 8002dc0:	e087      	b.n	8002ed2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d17c      	bne.n	8002ed2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	333f      	adds	r3, #63	; 0x3f
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d122      	bne.n	8002e34 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3358      	adds	r3, #88	; 0x58
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	0151      	lsls	r1, r2, #5
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	440a      	add	r2, r1
 8002e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 fb32 	bl	8006496 <USB_HC_Halt>
 8002e32:	e045      	b.n	8002ec0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	333f      	adds	r3, #63	; 0x3f
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	333f      	adds	r3, #63	; 0x3f
 8002e5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d12f      	bne.n	8002ec0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3358      	adds	r3, #88	; 0x58
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d121      	bne.n	8002ec0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	335d      	adds	r3, #93	; 0x5d
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	0151      	lsls	r1, r2, #5
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	440a      	add	r2, r1
 8002ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 faeb 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2310      	movs	r3, #16
 8002ed0:	6093      	str	r3, [r2, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d119      	bne.n	8002f3e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	461a      	mov	r2, r3
 8002f18:	2304      	movs	r3, #4
 8002f1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	0151      	lsls	r1, r2, #5
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	440a      	add	r2, r1
 8002f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f36:	f043 0302 	orr.w	r3, r3, #2
 8002f3a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002f3c:	e33e      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d141      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	2320      	movs	r3, #32
 8002f64:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	333d      	adds	r3, #61	; 0x3d
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 831f 	bne.w	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	333d      	adds	r3, #61	; 0x3d
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	335c      	adds	r3, #92	; 0x5c
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	0151      	lsls	r1, r2, #5
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	440a      	add	r2, r1
 8002fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fa60 	bl	8006496 <USB_HC_Halt>
}
 8002fd6:	e2f1      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	d13f      	bne.n	800306e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	335d      	adds	r3, #93	; 0x5d
 8002ffe:	2204      	movs	r2, #4
 8003000:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	440b      	add	r3, r1
 8003010:	333d      	adds	r3, #61	; 0x3d
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	440b      	add	r3, r1
 8003024:	3358      	adds	r3, #88	; 0x58
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	0151      	lsls	r1, r2, #5
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	440a      	add	r2, r1
 8003040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f003 fa1e 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	2340      	movs	r3, #64	; 0x40
 800306a:	6093      	str	r3, [r2, #8]
}
 800306c:	e2a6      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d122      	bne.n	80030cc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	0151      	lsls	r1, r2, #5
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	440a      	add	r2, r1
 800309c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 f9f0 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c8:	6093      	str	r3, [r2, #8]
}
 80030ca:	e277      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d135      	bne.n	800314e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	3358      	adds	r3, #88	; 0x58
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	0151      	lsls	r1, r2, #5
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	440a      	add	r2, r1
 800310c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f003 f9b8 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	461a      	mov	r2, r3
 8003134:	2301      	movs	r3, #1
 8003136:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	335d      	adds	r3, #93	; 0x5d
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
}
 800314c:	e236      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b08      	cmp	r3, #8
 8003162:	d12b      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	2308      	movs	r3, #8
 8003174:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	0151      	lsls	r1, r2, #5
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	440a      	add	r2, r1
 800318c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 f978 	bl	8006496 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	335d      	adds	r3, #93	; 0x5d
 80031b6:	2205      	movs	r2, #5
 80031b8:	701a      	strb	r2, [r3, #0]
}
 80031ba:	e1ff      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b10      	cmp	r3, #16
 80031d0:	d155      	bne.n	800327e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	3358      	adds	r3, #88	; 0x58
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	335d      	adds	r3, #93	; 0x5d
 80031f6:	2203      	movs	r2, #3
 80031f8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	333d      	adds	r3, #61	; 0x3d
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d114      	bne.n	800323a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	333c      	adds	r3, #60	; 0x3c
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	333d      	adds	r3, #61	; 0x3d
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	0151      	lsls	r1, r2, #5
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	440a      	add	r2, r1
 8003250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f003 f916 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	2310      	movs	r3, #16
 800327a:	6093      	str	r3, [r2, #8]
}
 800327c:	e19e      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b80      	cmp	r3, #128	; 0x80
 8003292:	d12b      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 f8e9 	bl	8006496 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	335d      	adds	r3, #93	; 0x5d
 80032d4:	2206      	movs	r2, #6
 80032d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	6093      	str	r3, [r2, #8]
}
 80032ea:	e167      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d135      	bne.n	8003370 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	0151      	lsls	r1, r2, #5
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	440a      	add	r2, r1
 800331a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f003 f8b1 	bl	8006496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	461a      	mov	r2, r3
 8003342:	2310      	movs	r3, #16
 8003344:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003358:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	335d      	adds	r3, #93	; 0x5d
 800336a:	2208      	movs	r2, #8
 800336c:	701a      	strb	r2, [r3, #0]
}
 800336e:	e125      	b.n	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	f040 811a 	bne.w	80035bc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	440a      	add	r2, r1
 800339e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a2:	f023 0302 	bic.w	r3, r3, #2
 80033a6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	335d      	adds	r3, #93	; 0x5d
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d137      	bne.n	800342e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	335c      	adds	r3, #92	; 0x5c
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	333f      	adds	r3, #63	; 0x3f
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d00b      	beq.n	8003400 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	333f      	adds	r3, #63	; 0x3f
 80033f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	f040 80c5 	bne.w	800358a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	3351      	adds	r3, #81	; 0x51
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f083 0301 	eor.w	r3, r3, #1
 8003416:	b2d8      	uxtb	r0, r3
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	3351      	adds	r3, #81	; 0x51
 8003428:	4602      	mov	r2, r0
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e0ad      	b.n	800358a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	335d      	adds	r3, #93	; 0x5d
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d10a      	bne.n	800345a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	335c      	adds	r3, #92	; 0x5c
 8003454:	2202      	movs	r2, #2
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e097      	b.n	800358a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	335d      	adds	r3, #93	; 0x5d
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d10a      	bne.n	8003486 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	440b      	add	r3, r1
 800347e:	335c      	adds	r3, #92	; 0x5c
 8003480:	2202      	movs	r2, #2
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e081      	b.n	800358a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	335d      	adds	r3, #93	; 0x5d
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b05      	cmp	r3, #5
 800349a:	d10a      	bne.n	80034b2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	335c      	adds	r3, #92	; 0x5c
 80034ac:	2205      	movs	r2, #5
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e06b      	b.n	800358a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	440b      	add	r3, r1
 80034c0:	335d      	adds	r3, #93	; 0x5d
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d00a      	beq.n	80034de <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	335d      	adds	r3, #93	; 0x5d
 80034d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d155      	bne.n	800358a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	3358      	adds	r3, #88	; 0x58
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	1c59      	adds	r1, r3, #1
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4403      	add	r3, r0
 8003500:	3358      	adds	r3, #88	; 0x58
 8003502:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	3358      	adds	r3, #88	; 0x58
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d914      	bls.n	8003544 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	3358      	adds	r3, #88	; 0x58
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	335c      	adds	r3, #92	; 0x5c
 800353e:	2204      	movs	r2, #4
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e009      	b.n	8003558 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	335c      	adds	r3, #92	; 0x5c
 8003554:	2202      	movs	r2, #2
 8003556:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800356e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003576:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	2302      	movs	r3, #2
 800359a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	b2d8      	uxtb	r0, r3
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	335c      	adds	r3, #92	; 0x5c
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4601      	mov	r1, r0
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f009 fa5e 	bl	800ca78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	0c5b      	lsrs	r3, r3, #17
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035f8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d003      	beq.n	8003608 <HCD_RXQLVL_IRQHandler+0x44>
 8003600:	2b05      	cmp	r3, #5
 8003602:	f000 8082 	beq.w	800370a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003606:	e083      	b.n	8003710 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d07f      	beq.n	800370e <HCD_RXQLVL_IRQHandler+0x14a>
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	440b      	add	r3, r1
 800361c:	3344      	adds	r3, #68	; 0x44
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d074      	beq.n	800370e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	3344      	adds	r3, #68	; 0x44
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	b292      	uxth	r2, r2
 800363e:	4619      	mov	r1, r3
 8003640:	f002 fac9 	bl	8005bd6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	3344      	adds	r3, #68	; 0x44
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	18d1      	adds	r1, r2, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4403      	add	r3, r0
 8003668:	3344      	adds	r3, #68	; 0x44
 800366a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	334c      	adds	r3, #76	; 0x4c
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	18d1      	adds	r1, r2, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4403      	add	r3, r0
 8003690:	334c      	adds	r3, #76	; 0x4c
 8003692:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HCD_RXQLVL_IRQHandler+0x154>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d031      	beq.n	800370e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036c0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036c8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d6:	461a      	mov	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	3350      	adds	r3, #80	; 0x50
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f083 0301 	eor.w	r3, r3, #1
 80036f2:	b2d8      	uxtb	r0, r3
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	3350      	adds	r3, #80	; 0x50
 8003704:	4602      	mov	r2, r0
 8003706:	701a      	strb	r2, [r3, #0]
      break;
 8003708:	e001      	b.n	800370e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800370e:	bf00      	nop
  }
}
 8003710:	bf00      	nop
 8003712:	3728      	adds	r7, #40	; 0x28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	1ff80000 	.word	0x1ff80000

0800371c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003748:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d10b      	bne.n	800376c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f009 f96e 	bl	800ca40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d132      	bne.n	80037dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b04      	cmp	r3, #4
 8003786:	d126      	bne.n	80037d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d113      	bne.n	80037b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800379a:	d106      	bne.n	80037aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2102      	movs	r1, #2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f002 fb52 	bl	8005e4c <USB_InitFSLSPClkSel>
 80037a8:	e011      	b.n	80037ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 fb4b 	bl	8005e4c <USB_InitFSLSPClkSel>
 80037b6:	e00a      	b.n	80037ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037c6:	461a      	mov	r2, r3
 80037c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f009 f960 	bl	800ca94 <HAL_HCD_PortEnabled_Callback>
 80037d4:	e002      	b.n	80037dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f009 f96a 	bl	800cab0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d103      	bne.n	80037ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f043 0320 	orr.w	r3, r3, #32
 80037ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6013      	str	r3, [r2, #0]
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e128      	b.n	8003a68 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a90      	ldr	r2, [pc, #576]	; (8003a70 <HAL_I2S_Init+0x26c>)
 800382e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f003 f887 	bl	8006944 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800384c:	f023 030f 	bic.w	r3, r3, #15
 8003850:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2202      	movs	r2, #2
 8003858:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d060      	beq.n	8003924 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800386a:	2310      	movs	r3, #16
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e001      	b.n	8003874 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003870:	2320      	movs	r3, #32
 8003872:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b20      	cmp	r3, #32
 800387a:	d802      	bhi.n	8003882 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003882:	2001      	movs	r0, #1
 8003884:	f001 fe02 	bl	800548c <HAL_RCCEx_GetPeriphCLKFreq>
 8003888:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003892:	d125      	bne.n	80038e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	3305      	adds	r3, #5
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e01f      	b.n	80038fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038da:	3305      	adds	r3, #5
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	e00e      	b.n	80038fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	461a      	mov	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	3305      	adds	r3, #5
 80038fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4a5c      	ldr	r2, [pc, #368]	; (8003a74 <HAL_I2S_Init+0x270>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	08db      	lsrs	r3, r3, #3
 8003908:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	e003      	b.n	800392c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003924:	2302      	movs	r3, #2
 8003926:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d902      	bls.n	8003938 <HAL_I2S_Init+0x134>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2bff      	cmp	r3, #255	; 0xff
 8003936:	d907      	bls.n	8003948 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f043 0210 	orr.w	r2, r3, #16
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e08f      	b.n	8003a68 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	ea42 0103 	orr.w	r1, r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	430a      	orrs	r2, r1
 800395a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003966:	f023 030f 	bic.w	r3, r3, #15
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6851      	ldr	r1, [r2, #4]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6892      	ldr	r2, [r2, #8]
 8003972:	4311      	orrs	r1, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68d2      	ldr	r2, [r2, #12]
 8003978:	4311      	orrs	r1, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6992      	ldr	r2, [r2, #24]
 800397e:	430a      	orrs	r2, r1
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d161      	bne.n	8003a58 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a38      	ldr	r2, [pc, #224]	; (8003a78 <HAL_I2S_Init+0x274>)
 8003998:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a37      	ldr	r2, [pc, #220]	; (8003a7c <HAL_I2S_Init+0x278>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <HAL_I2S_Init+0x1a4>
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_I2S_Init+0x27c>)
 80039a6:	e001      	b.n	80039ac <HAL_I2S_Init+0x1a8>
 80039a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	4932      	ldr	r1, [pc, #200]	; (8003a7c <HAL_I2S_Init+0x278>)
 80039b4:	428a      	cmp	r2, r1
 80039b6:	d101      	bne.n	80039bc <HAL_I2S_Init+0x1b8>
 80039b8:	4a31      	ldr	r2, [pc, #196]	; (8003a80 <HAL_I2S_Init+0x27c>)
 80039ba:	e001      	b.n	80039c0 <HAL_I2S_Init+0x1bc>
 80039bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80039c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2b      	ldr	r2, [pc, #172]	; (8003a7c <HAL_I2S_Init+0x278>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_I2S_Init+0x1d4>
 80039d4:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <HAL_I2S_Init+0x27c>)
 80039d6:	e001      	b.n	80039dc <HAL_I2S_Init+0x1d8>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039dc:	2202      	movs	r2, #2
 80039de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <HAL_I2S_Init+0x278>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_I2S_Init+0x1ea>
 80039ea:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_I2S_Init+0x27c>)
 80039ec:	e001      	b.n	80039f2 <HAL_I2S_Init+0x1ee>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fe:	d003      	beq.n	8003a08 <HAL_I2S_Init+0x204>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e001      	b.n	8003a14 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	b299      	uxth	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003a2a:	4303      	orrs	r3, r0
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003a32:	4313      	orrs	r3, r2
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a40:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a0d      	ldr	r2, [pc, #52]	; (8003a7c <HAL_I2S_Init+0x278>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_I2S_Init+0x24c>
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_I2S_Init+0x27c>)
 8003a4e:	e001      	b.n	8003a54 <HAL_I2S_Init+0x250>
 8003a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a54:	897a      	ldrh	r2, [r7, #10]
 8003a56:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	08004301 	.word	0x08004301
 8003a74:	cccccccd 	.word	0xcccccccd
 8003a78:	08004489 	.word	0x08004489
 8003a7c:	40003800 	.word	0x40003800
 8003a80:	40003400 	.word	0x40003400

08003a84 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_I2S_Transmit_DMA+0x1a>
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e08e      	b.n	8003bc0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2S_Transmit_DMA+0x2e>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e086      	b.n	8003bc0 <HAL_I2S_Transmit_DMA+0x13c>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d005      	beq.n	8003ad2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e076      	b.n	8003bc0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d002      	beq.n	8003afe <HAL_I2S_Transmit_DMA+0x7a>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10a      	bne.n	8003b14 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b12:	e005      	b.n	8003b20 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	4a28      	ldr	r2, [pc, #160]	; (8003bc8 <HAL_I2S_Transmit_DMA+0x144>)
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_I2S_Transmit_DMA+0x148>)
 8003b2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <HAL_I2S_Transmit_DMA+0x14c>)
 8003b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003b40:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003b48:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003b50:	f7fd fc60 	bl	8001414 <HAL_DMA_Start_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00f      	beq.n	8003b7a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f043 0208 	orr.w	r2, r3, #8
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e022      	b.n	8003bc0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b96:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d107      	bne.n	8003bb6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0202 	orr.w	r2, r2, #2
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	080041df 	.word	0x080041df
 8003bcc:	0800419d 	.word	0x0800419d
 8003bd0:	080041fb 	.word	0x080041fb

08003bd4 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2S_DMAPause+0x18>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e04a      	b.n	8003c82 <HAL_I2S_DMAPause+0xae>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d108      	bne.n	8003c12 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0202 	bic.w	r2, r2, #2
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	e032      	b.n	8003c78 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d108      	bne.n	8003c30 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	e023      	b.n	8003c78 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d11d      	bne.n	8003c78 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0203 	bic.w	r2, r2, #3
 8003c4a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0f      	ldr	r2, [pc, #60]	; (8003c90 <HAL_I2S_DMAPause+0xbc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_I2S_DMAPause+0x86>
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_I2S_DMAPause+0xc0>)
 8003c58:	e001      	b.n	8003c5e <HAL_I2S_DMAPause+0x8a>
 8003c5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	490a      	ldr	r1, [pc, #40]	; (8003c90 <HAL_I2S_DMAPause+0xbc>)
 8003c66:	428b      	cmp	r3, r1
 8003c68:	d101      	bne.n	8003c6e <HAL_I2S_DMAPause+0x9a>
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_I2S_DMAPause+0xc0>)
 8003c6c:	e001      	b.n	8003c72 <HAL_I2S_DMAPause+0x9e>
 8003c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c72:	f022 0203 	bic.w	r2, r2, #3
 8003c76:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40003800 	.word	0x40003800
 8003c94:	40003400 	.word	0x40003400

08003c98 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_I2S_DMAResume+0x18>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e07d      	b.n	8003dac <HAL_I2S_DMAResume+0x114>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d108      	bne.n	8003cd6 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0202 	orr.w	r2, r2, #2
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	e056      	b.n	8003d84 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d108      	bne.n	8003cf4 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	e047      	b.n	8003d84 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d141      	bne.n	8003d84 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0203 	orr.w	r2, r2, #3
 8003d0e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <HAL_I2S_DMAResume+0x120>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_I2S_DMAResume+0x86>
 8003d1a:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_I2S_DMAResume+0x124>)
 8003d1c:	e001      	b.n	8003d22 <HAL_I2S_DMAResume+0x8a>
 8003d1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4923      	ldr	r1, [pc, #140]	; (8003db8 <HAL_I2S_DMAResume+0x120>)
 8003d2a:	428b      	cmp	r3, r1
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2S_DMAResume+0x9a>
 8003d2e:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <HAL_I2S_DMAResume+0x124>)
 8003d30:	e001      	b.n	8003d36 <HAL_I2S_DMAResume+0x9e>
 8003d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d36:	f042 0203 	orr.w	r2, r2, #3
 8003d3a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <HAL_I2S_DMAResume+0x120>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_I2S_DMAResume+0xb2>
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_I2S_DMAResume+0x124>)
 8003d48:	e001      	b.n	8003d4e <HAL_I2S_DMAResume+0xb6>
 8003d4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d115      	bne.n	8003d84 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <HAL_I2S_DMAResume+0x120>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <HAL_I2S_DMAResume+0xce>
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <HAL_I2S_DMAResume+0x124>)
 8003d64:	e001      	b.n	8003d6a <HAL_I2S_DMAResume+0xd2>
 8003d66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4911      	ldr	r1, [pc, #68]	; (8003db8 <HAL_I2S_DMAResume+0x120>)
 8003d72:	428b      	cmp	r3, r1
 8003d74:	d101      	bne.n	8003d7a <HAL_I2S_DMAResume+0xe2>
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_I2S_DMAResume+0x124>)
 8003d78:	e001      	b.n	8003d7e <HAL_I2S_DMAResume+0xe6>
 8003d7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d82:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d107      	bne.n	8003da2 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da0:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	40003800 	.word	0x40003800
 8003dbc:	40003400 	.word	0x40003400

08003dc0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd4:	d004      	beq.n	8003de0 <HAL_I2S_DMAStop+0x20>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80d1 	bne.w	8003f82 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00f      	beq.n	8003e08 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd fb69 	bl	80014c4 <HAL_DMA_Abort>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	f043 0208 	orr.w	r2, r3, #8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003e08:	2364      	movs	r3, #100	; 0x64
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fb00 	bl	8004414 <I2S_WaitFlagStateUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f043 0201 	orr.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003e32:	2364      	movs	r3, #100	; 0x64
 8003e34:	2200      	movs	r2, #0
 8003e36:	2180      	movs	r1, #128	; 0x80
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 faeb 	bl	8004414 <I2S_WaitFlagStateUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0202 	bic.w	r2, r2, #2
 8003e88:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	f040 8165 	bne.w	8004162 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00f      	beq.n	8003ec0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fd fb0d 	bl	80014c4 <HAL_DMA_Abort>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f043 0208 	orr.w	r2, r3, #8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a8a      	ldr	r2, [pc, #552]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <HAL_I2S_DMAStop+0x10e>
 8003eca:	4b8a      	ldr	r3, [pc, #552]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8003ecc:	e001      	b.n	8003ed2 <HAL_I2S_DMAStop+0x112>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4985      	ldr	r1, [pc, #532]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 8003eda:	428b      	cmp	r3, r1
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2S_DMAStop+0x122>
 8003ede:	4b85      	ldr	r3, [pc, #532]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8003ee0:	e001      	b.n	8003ee6 <HAL_I2S_DMAStop+0x126>
 8003ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eea:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a7e      	ldr	r2, [pc, #504]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d101      	bne.n	8003efe <HAL_I2S_DMAStop+0x13e>
 8003efa:	4b7e      	ldr	r3, [pc, #504]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8003efc:	e001      	b.n	8003f02 <HAL_I2S_DMAStop+0x142>
 8003efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a79      	ldr	r2, [pc, #484]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_I2S_DMAStop+0x154>
 8003f10:	4b78      	ldr	r3, [pc, #480]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8003f12:	e001      	b.n	8003f18 <HAL_I2S_DMAStop+0x158>
 8003f14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a73      	ldr	r2, [pc, #460]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_I2S_DMAStop+0x16c>
 8003f28:	4b72      	ldr	r3, [pc, #456]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8003f2a:	e001      	b.n	8003f30 <HAL_I2S_DMAStop+0x170>
 8003f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	496e      	ldr	r1, [pc, #440]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	d101      	bne.n	8003f40 <HAL_I2S_DMAStop+0x180>
 8003f3c:	4b6d      	ldr	r3, [pc, #436]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8003f3e:	e001      	b.n	8003f44 <HAL_I2S_DMAStop+0x184>
 8003f40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003f6a:	e0fa      	b.n	8004162 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5f      	ldr	r2, [pc, #380]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_I2S_DMAStop+0x1ba>
 8003f76:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8003f78:	e001      	b.n	8003f7e <HAL_I2S_DMAStop+0x1be>
 8003f7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f7e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003f80:	e0ef      	b.n	8004162 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8a:	d005      	beq.n	8003f98 <HAL_I2S_DMAStop+0x1d8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f94:	f040 80e5 	bne.w	8004162 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00f      	beq.n	8003fc0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fa8d 	bl	80014c4 <HAL_DMA_Abort>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f043 0208 	orr.w	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	f040 809a 	bne.w	8004102 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00f      	beq.n	8003ff6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd fa72 	bl	80014c4 <HAL_DMA_Abort>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f043 0208 	orr.w	r2, r3, #8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8003ff6:	f7fc fe1b 	bl	8000c30 <HAL_GetTick>
 8003ffa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003ffc:	e012      	b.n	8004024 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003ffe:	f7fc fe17 	bl	8000c30 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b64      	cmp	r3, #100	; 0x64
 800400a:	d90b      	bls.n	8004024 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a31      	ldr	r2, [pc, #196]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_I2S_DMAStop+0x272>
 800402e:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8004030:	e001      	b.n	8004036 <HAL_I2S_DMAStop+0x276>
 8004032:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	d1de      	bne.n	8003ffe <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004040:	e012      	b.n	8004068 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004042:	f7fc fdf5 	bl	8000c30 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b64      	cmp	r3, #100	; 0x64
 800404e:	d90b      	bls.n	8004068 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <HAL_I2S_DMAStop+0x2b6>
 8004072:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8004074:	e001      	b.n	800407a <HAL_I2S_DMAStop+0x2ba>
 8004076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	d0de      	beq.n	8004042 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_I2S_DMAStop+0x2d2>
 800408e:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 8004090:	e001      	b.n	8004096 <HAL_I2S_DMAStop+0x2d6>
 8004092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4914      	ldr	r1, [pc, #80]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 800409e:	428b      	cmp	r3, r1
 80040a0:	d101      	bne.n	80040a6 <HAL_I2S_DMAStop+0x2e6>
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 80040a4:	e001      	b.n	80040aa <HAL_I2S_DMAStop+0x2ea>
 80040a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ae:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <HAL_I2S_DMAStop+0x302>
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 80040c0:	e001      	b.n	80040c6 <HAL_I2S_DMAStop+0x306>
 80040c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d101      	bne.n	80040da <HAL_I2S_DMAStop+0x31a>
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 80040d8:	e001      	b.n	80040de <HAL_I2S_DMAStop+0x31e>
 80040da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4902      	ldr	r1, [pc, #8]	; (80040f0 <HAL_I2S_DMAStop+0x330>)
 80040e6:	428b      	cmp	r3, r1
 80040e8:	d106      	bne.n	80040f8 <HAL_I2S_DMAStop+0x338>
 80040ea:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <HAL_I2S_DMAStop+0x334>)
 80040ec:	e006      	b.n	80040fc <HAL_I2S_DMAStop+0x33c>
 80040ee:	bf00      	nop
 80040f0:	40003800 	.word	0x40003800
 80040f4:	40003400 	.word	0x40003400
 80040f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fc:	f022 0202 	bic.w	r2, r2, #2
 8004100:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004110:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004140:	d10c      	bne.n	800415c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e002      	b.n	8004162 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800416a:	7ffb      	ldrb	r3, [r7, #31]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10e      	bne.n	80041d0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0202 	bic.w	r2, r2, #2
 80041c0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7fc fc83 	bl	8000adc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7fc fc8b 	bl	8000b08 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0203 	bic.w	r2, r2, #3
 8004216:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	f043 0208 	orr.w	r2, r3, #8
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff ffa5 	bl	8004188 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	881a      	ldrh	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10e      	bne.n	800429a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800428a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fc fc21 	bl	8000adc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	b292      	uxth	r2, r2
 80042b6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	1c9a      	adds	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ff3e 	bl	8004174 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b04      	cmp	r3, #4
 800431a:	d13a      	bne.n	8004392 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d109      	bne.n	800433a <I2S_IRQHandler+0x3a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d102      	bne.n	800433a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ffb4 	bl	80042a2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d126      	bne.n	8004392 <I2S_IRQHandler+0x92>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b20      	cmp	r3, #32
 8004350:	d11f      	bne.n	8004392 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004360:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	f043 0202 	orr.w	r2, r3, #2
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fefb 	bl	8004188 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b03      	cmp	r3, #3
 800439c:	d136      	bne.n	800440c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d109      	bne.n	80043bc <I2S_IRQHandler+0xbc>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d102      	bne.n	80043bc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ff45 	bl	8004246 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d122      	bne.n	800440c <I2S_IRQHandler+0x10c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d11b      	bne.n	800440c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043e2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff febe 	bl	8004188 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800440c:	bf00      	nop
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004424:	f7fc fc04 	bl	8000c30 <HAL_GetTick>
 8004428:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800442a:	e018      	b.n	800445e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d014      	beq.n	800445e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004434:	f7fc fbfc 	bl	8000c30 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d902      	bls.n	800444a <I2S_WaitFlagStateUntilTimeout+0x36>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e00f      	b.n	800447e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	429a      	cmp	r2, r3
 800447a:	d1d7      	bne.n	800442c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4aa2      	ldr	r2, [pc, #648]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044a2:	4ba2      	ldr	r3, [pc, #648]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044a4:	e001      	b.n	80044aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a9b      	ldr	r2, [pc, #620]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044c0:	4b9a      	ldr	r3, [pc, #616]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044c2:	e001      	b.n	80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d4:	d004      	beq.n	80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 8099 	bne.w	8004612 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d107      	bne.n	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f925 	bl	8004744 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d107      	bne.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9c8 	bl	80048a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d13a      	bne.n	8004594 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d035      	beq.n	8004594 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a7e      	ldr	r2, [pc, #504]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004532:	4b7e      	ldr	r3, [pc, #504]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004534:	e001      	b.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4979      	ldr	r1, [pc, #484]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004542:	428b      	cmp	r3, r1
 8004544:	d101      	bne.n	800454a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004546:	4b79      	ldr	r3, [pc, #484]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004548:	e001      	b.n	800454e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800454a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800454e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004552:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004562:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f043 0202 	orr.w	r2, r3, #2
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fdfa 	bl	8004188 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	f040 80be 	bne.w	800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80b8 	beq.w	800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a59      	ldr	r2, [pc, #356]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d101      	bne.n	80045ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045c6:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045c8:	e001      	b.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4954      	ldr	r1, [pc, #336]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045d6:	428b      	cmp	r3, r1
 80045d8:	d101      	bne.n	80045de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045da:	4b54      	ldr	r3, [pc, #336]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045dc:	e001      	b.n	80045e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045e8:	2300      	movs	r3, #0
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f043 0204 	orr.w	r2, r3, #4
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fdbc 	bl	8004188 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004610:	e084      	b.n	800471c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d107      	bne.n	800462c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8be 	bl	80047a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d107      	bne.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f8fd 	bl	8004840 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d12f      	bne.n	80046b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d02a      	beq.n	80046b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004668:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2e      	ldr	r2, [pc, #184]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d101      	bne.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004676:	e001      	b.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4929      	ldr	r1, [pc, #164]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004684:	428b      	cmp	r3, r1
 8004686:	d101      	bne.n	800468c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800468a:	e001      	b.n	8004690 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800468c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004694:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	f043 0202 	orr.w	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff fd6c 	bl	8004188 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d131      	bne.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02c      	beq.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a17      	ldr	r2, [pc, #92]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046ce:	4b17      	ldr	r3, [pc, #92]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046d0:	e001      	b.n	80046d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4912      	ldr	r1, [pc, #72]	; (8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046de:	428b      	cmp	r3, r1
 80046e0:	d101      	bne.n	80046e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046e4:	e001      	b.n	80046ea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80046e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046fe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	f043 0204 	orr.w	r2, r3, #4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fd37 	bl	8004188 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800471a:	e000      	b.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800471c:	bf00      	nop
}
 800471e:	bf00      	nop
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40003800 	.word	0x40003800
 800472c:	40003400 	.word	0x40003400

08004730 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	1c99      	adds	r1, r3, #2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6251      	str	r1, [r2, #36]	; 0x24
 8004756:	881a      	ldrh	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d113      	bne.n	800479e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004784:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ffc9 	bl	8004730 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	1c99      	adds	r1, r3, #2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6251      	str	r1, [r2, #36]	; 0x24
 80047ba:	8819      	ldrh	r1, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <I2SEx_TxISR_I2SExt+0x90>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <I2SEx_TxISR_I2SExt+0x22>
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <I2SEx_TxISR_I2SExt+0x94>)
 80047c8:	e001      	b.n	80047ce <I2SEx_TxISR_I2SExt+0x26>
 80047ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ce:	460a      	mov	r2, r1
 80047d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d121      	bne.n	800482e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a12      	ldr	r2, [pc, #72]	; (8004838 <I2SEx_TxISR_I2SExt+0x90>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <I2SEx_TxISR_I2SExt+0x50>
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <I2SEx_TxISR_I2SExt+0x94>)
 80047f6:	e001      	b.n	80047fc <I2SEx_TxISR_I2SExt+0x54>
 80047f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	490d      	ldr	r1, [pc, #52]	; (8004838 <I2SEx_TxISR_I2SExt+0x90>)
 8004804:	428b      	cmp	r3, r1
 8004806:	d101      	bne.n	800480c <I2SEx_TxISR_I2SExt+0x64>
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <I2SEx_TxISR_I2SExt+0x94>)
 800480a:	e001      	b.n	8004810 <I2SEx_TxISR_I2SExt+0x68>
 800480c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004814:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff81 	bl	8004730 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40003800 	.word	0x40003800
 800483c:	40003400 	.word	0x40003400

08004840 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68d8      	ldr	r0, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	1c99      	adds	r1, r3, #2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004858:	b282      	uxth	r2, r0
 800485a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d113      	bne.n	800489c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004882:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff4a 	bl	8004730 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a20      	ldr	r2, [pc, #128]	; (8004934 <I2SEx_RxISR_I2SExt+0x90>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <I2SEx_RxISR_I2SExt+0x16>
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <I2SEx_RxISR_I2SExt+0x94>)
 80048b8:	e001      	b.n	80048be <I2SEx_RxISR_I2SExt+0x1a>
 80048ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048be:	68d8      	ldr	r0, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	1c99      	adds	r1, r3, #2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048ca:	b282      	uxth	r2, r0
 80048cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d121      	bne.n	800492a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a12      	ldr	r2, [pc, #72]	; (8004934 <I2SEx_RxISR_I2SExt+0x90>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <I2SEx_RxISR_I2SExt+0x50>
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <I2SEx_RxISR_I2SExt+0x94>)
 80048f2:	e001      	b.n	80048f8 <I2SEx_RxISR_I2SExt+0x54>
 80048f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	490d      	ldr	r1, [pc, #52]	; (8004934 <I2SEx_RxISR_I2SExt+0x90>)
 8004900:	428b      	cmp	r3, r1
 8004902:	d101      	bne.n	8004908 <I2SEx_RxISR_I2SExt+0x64>
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <I2SEx_RxISR_I2SExt+0x94>)
 8004906:	e001      	b.n	800490c <I2SEx_RxISR_I2SExt+0x68>
 8004908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004910:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ff03 	bl	8004730 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40003800 	.word	0x40003800
 8004938:	40003400 	.word	0x40003400

0800493c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e25b      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d075      	beq.n	8004a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495a:	4ba3      	ldr	r3, [pc, #652]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b04      	cmp	r3, #4
 8004964:	d00c      	beq.n	8004980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4ba0      	ldr	r3, [pc, #640]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800496e:	2b08      	cmp	r3, #8
 8004970:	d112      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004972:	4b9d      	ldr	r3, [pc, #628]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497e:	d10b      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	4b99      	ldr	r3, [pc, #612]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d05b      	beq.n	8004a44 <HAL_RCC_OscConfig+0x108>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d157      	bne.n	8004a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e236      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d106      	bne.n	80049b0 <HAL_RCC_OscConfig+0x74>
 80049a2:	4b91      	ldr	r3, [pc, #580]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a90      	ldr	r2, [pc, #576]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e01d      	b.n	80049ec <HAL_RCC_OscConfig+0xb0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x98>
 80049ba:	4b8b      	ldr	r3, [pc, #556]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a8a      	ldr	r2, [pc, #552]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a87      	ldr	r2, [pc, #540]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0xb0>
 80049d4:	4b84      	ldr	r3, [pc, #528]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a83      	ldr	r2, [pc, #524]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b81      	ldr	r3, [pc, #516]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a80      	ldr	r2, [pc, #512]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fc f91c 	bl	8000c30 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fc f918 	bl	8000c30 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e1fb      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0xc0>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fc f908 	bl	8000c30 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fc f904 	bl	8000c30 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1e7      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a36:	4b6c      	ldr	r3, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0xe8>
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d063      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a52:	4b65      	ldr	r3, [pc, #404]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5e:	4b62      	ldr	r3, [pc, #392]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d116      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	4b5c      	ldr	r3, [pc, #368]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x152>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1bb      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8e:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4952      	ldr	r1, [pc, #328]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	e03a      	b.n	8004b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d020      	beq.n	8004aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aac:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <HAL_RCC_OscConfig+0x2b0>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fc f8bd 	bl	8000c30 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fc f8b9 	bl	8000c30 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e19c      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004acc:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4940      	ldr	r1, [pc, #256]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
 8004aec:	e015      	b.n	8004b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aee:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <HAL_RCC_OscConfig+0x2b0>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fc f89c 	bl	8000c30 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004afc:	f7fc f898 	bl	8000c30 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e17b      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d030      	beq.n	8004b88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2e:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HAL_RCC_OscConfig+0x2b4>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fc f87c 	bl	8000c30 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fc f878 	bl	8000c30 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e15b      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x200>
 8004b5a:	e015      	b.n	8004b88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCC_OscConfig+0x2b4>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fc f865 	bl	8000c30 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6a:	f7fc f861 	bl	8000c30 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e144      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80a0 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d121      	bne.n	8004c16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a07      	ldr	r2, [pc, #28]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bde:	f7fc f827 	bl	8000c30 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	e011      	b.n	8004c0a <HAL_RCC_OscConfig+0x2ce>
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	42470000 	.word	0x42470000
 8004bf0:	42470e80 	.word	0x42470e80
 8004bf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf8:	f7fc f81a 	bl	8000c30 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0fd      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b81      	ldr	r3, [pc, #516]	; (8004e10 <HAL_RCC_OscConfig+0x4d4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d106      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2f0>
 8004c1e:	4b7d      	ldr	r3, [pc, #500]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a7c      	ldr	r2, [pc, #496]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	e01c      	b.n	8004c66 <HAL_RCC_OscConfig+0x32a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	d10c      	bne.n	8004c4e <HAL_RCC_OscConfig+0x312>
 8004c34:	4b77      	ldr	r3, [pc, #476]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a76      	ldr	r2, [pc, #472]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c40:	4b74      	ldr	r3, [pc, #464]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	4a73      	ldr	r2, [pc, #460]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4c:	e00b      	b.n	8004c66 <HAL_RCC_OscConfig+0x32a>
 8004c4e:	4b71      	ldr	r3, [pc, #452]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a70      	ldr	r2, [pc, #448]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	4a6d      	ldr	r2, [pc, #436]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c60:	f023 0304 	bic.w	r3, r3, #4
 8004c64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d015      	beq.n	8004c9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6e:	f7fb ffdf 	bl	8000c30 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fb ffdb 	bl	8000c30 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0bc      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8c:	4b61      	ldr	r3, [pc, #388]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ee      	beq.n	8004c76 <HAL_RCC_OscConfig+0x33a>
 8004c98:	e014      	b.n	8004cc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9a:	f7fb ffc9 	bl	8000c30 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fb ffc5 	bl	8000c30 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e0a6      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb8:	4b56      	ldr	r3, [pc, #344]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ee      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cca:	4b52      	ldr	r3, [pc, #328]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a51      	ldr	r2, [pc, #324]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8092 	beq.w	8004e04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce0:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d05c      	beq.n	8004da6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d141      	bne.n	8004d78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf4:	4b48      	ldr	r3, [pc, #288]	; (8004e18 <HAL_RCC_OscConfig+0x4dc>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fb ff99 	bl	8000c30 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fb ff95 	bl	8000c30 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e078      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d14:	4b3f      	ldr	r3, [pc, #252]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	019b      	lsls	r3, r3, #6
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	061b      	lsls	r3, r3, #24
 8004d44:	4933      	ldr	r1, [pc, #204]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4a:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <HAL_RCC_OscConfig+0x4dc>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fb ff6e 	bl	8000c30 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fb ff6a 	bl	8000c30 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e04d      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6a:	4b2a      	ldr	r3, [pc, #168]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x41c>
 8004d76:	e045      	b.n	8004e04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d78:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <HAL_RCC_OscConfig+0x4dc>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fb ff57 	bl	8000c30 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fb ff53 	bl	8000c30 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e036      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x44a>
 8004da4:	e02e      	b.n	8004e04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e029      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db2:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <HAL_RCC_OscConfig+0x4d8>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d11c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d115      	bne.n	8004e00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dda:	4013      	ands	r3, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d10d      	bne.n	8004e00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d106      	bne.n	8004e00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e000      	b.n	8004e06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40007000 	.word	0x40007000
 8004e14:	40023800 	.word	0x40023800
 8004e18:	42470060 	.word	0x42470060

08004e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0cc      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b68      	ldr	r3, [pc, #416]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d90c      	bls.n	8004e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b63      	ldr	r3, [pc, #396]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0b8      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d020      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e70:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4a58      	ldr	r2, [pc, #352]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e88:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4a52      	ldr	r2, [pc, #328]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e94:	4b50      	ldr	r3, [pc, #320]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	494d      	ldr	r1, [pc, #308]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d044      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d107      	bne.n	8004eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d119      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e07f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b3f      	ldr	r3, [pc, #252]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e06f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e067      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b37      	ldr	r3, [pc, #220]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4934      	ldr	r1, [pc, #208]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f0c:	f7fb fe90 	bl	8000c30 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fb fe8c 	bl	8000c30 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e04f      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d20c      	bcs.n	8004f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e032      	b.n	8004fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4916      	ldr	r1, [pc, #88]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	490e      	ldr	r1, [pc, #56]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fa2:	f000 f821 	bl	8004fe8 <HAL_RCC_GetSysClockFreq>
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004fb4:	5cd3      	ldrb	r3, [r2, r3]
 8004fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8004fba:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 ff96 	bl	8006ef4 <HAL_InitTick>

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023c00 	.word	0x40023c00
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	0800d1c4 	.word	0x0800d1c4
 8004fe0:	20000010 	.word	0x20000010
 8004fe4:	20000008 	.word	0x20000008

08004fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ffe:	4b63      	ldr	r3, [pc, #396]	; (800518c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d007      	beq.n	800501a <HAL_RCC_GetSysClockFreq+0x32>
 800500a:	2b08      	cmp	r3, #8
 800500c:	d008      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x38>
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 80b4 	bne.w	800517c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005014:	4b5e      	ldr	r3, [pc, #376]	; (8005190 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005016:	60bb      	str	r3, [r7, #8]
       break;
 8005018:	e0b3      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800501a:	4b5e      	ldr	r3, [pc, #376]	; (8005194 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800501c:	60bb      	str	r3, [r7, #8]
      break;
 800501e:	e0b0      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005020:	4b5a      	ldr	r3, [pc, #360]	; (800518c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005028:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800502a:	4b58      	ldr	r3, [pc, #352]	; (800518c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d04a      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005036:	4b55      	ldr	r3, [pc, #340]	; (800518c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	099b      	lsrs	r3, r3, #6
 800503c:	f04f 0400 	mov.w	r4, #0
 8005040:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	ea03 0501 	and.w	r5, r3, r1
 800504c:	ea04 0602 	and.w	r6, r4, r2
 8005050:	4629      	mov	r1, r5
 8005052:	4632      	mov	r2, r6
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	f04f 0400 	mov.w	r4, #0
 800505c:	0154      	lsls	r4, r2, #5
 800505e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005062:	014b      	lsls	r3, r1, #5
 8005064:	4619      	mov	r1, r3
 8005066:	4622      	mov	r2, r4
 8005068:	1b49      	subs	r1, r1, r5
 800506a:	eb62 0206 	sbc.w	r2, r2, r6
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	f04f 0400 	mov.w	r4, #0
 8005076:	0194      	lsls	r4, r2, #6
 8005078:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800507c:	018b      	lsls	r3, r1, #6
 800507e:	1a5b      	subs	r3, r3, r1
 8005080:	eb64 0402 	sbc.w	r4, r4, r2
 8005084:	f04f 0100 	mov.w	r1, #0
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	00e2      	lsls	r2, r4, #3
 800508e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005092:	00d9      	lsls	r1, r3, #3
 8005094:	460b      	mov	r3, r1
 8005096:	4614      	mov	r4, r2
 8005098:	195b      	adds	r3, r3, r5
 800509a:	eb44 0406 	adc.w	r4, r4, r6
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	0262      	lsls	r2, r4, #9
 80050a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80050ac:	0259      	lsls	r1, r3, #9
 80050ae:	460b      	mov	r3, r1
 80050b0:	4614      	mov	r4, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	4621      	mov	r1, r4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	461a      	mov	r2, r3
 80050be:	4623      	mov	r3, r4
 80050c0:	f7fb f888 	bl	80001d4 <__aeabi_uldivmod>
 80050c4:	4603      	mov	r3, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	e049      	b.n	8005160 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050cc:	4b2f      	ldr	r3, [pc, #188]	; (800518c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	099b      	lsrs	r3, r3, #6
 80050d2:	f04f 0400 	mov.w	r4, #0
 80050d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	ea03 0501 	and.w	r5, r3, r1
 80050e2:	ea04 0602 	and.w	r6, r4, r2
 80050e6:	4629      	mov	r1, r5
 80050e8:	4632      	mov	r2, r6
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f04f 0400 	mov.w	r4, #0
 80050f2:	0154      	lsls	r4, r2, #5
 80050f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050f8:	014b      	lsls	r3, r1, #5
 80050fa:	4619      	mov	r1, r3
 80050fc:	4622      	mov	r2, r4
 80050fe:	1b49      	subs	r1, r1, r5
 8005100:	eb62 0206 	sbc.w	r2, r2, r6
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	f04f 0400 	mov.w	r4, #0
 800510c:	0194      	lsls	r4, r2, #6
 800510e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005112:	018b      	lsls	r3, r1, #6
 8005114:	1a5b      	subs	r3, r3, r1
 8005116:	eb64 0402 	sbc.w	r4, r4, r2
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	00e2      	lsls	r2, r4, #3
 8005124:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005128:	00d9      	lsls	r1, r3, #3
 800512a:	460b      	mov	r3, r1
 800512c:	4614      	mov	r4, r2
 800512e:	195b      	adds	r3, r3, r5
 8005130:	eb44 0406 	adc.w	r4, r4, r6
 8005134:	f04f 0100 	mov.w	r1, #0
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	02a2      	lsls	r2, r4, #10
 800513e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005142:	0299      	lsls	r1, r3, #10
 8005144:	460b      	mov	r3, r1
 8005146:	4614      	mov	r4, r2
 8005148:	4618      	mov	r0, r3
 800514a:	4621      	mov	r1, r4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	461a      	mov	r2, r3
 8005154:	4623      	mov	r3, r4
 8005156:	f7fb f83d 	bl	80001d4 <__aeabi_uldivmod>
 800515a:	4603      	mov	r3, r0
 800515c:	460c      	mov	r4, r1
 800515e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	3301      	adds	r3, #1
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	60bb      	str	r3, [r7, #8]
      break;
 800517a:	e002      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800517e:	60bb      	str	r3, [r7, #8]
      break;
 8005180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005182:	68bb      	ldr	r3, [r7, #8]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	00f42400 	.word	0x00f42400
 8005194:	007a1200 	.word	0x007a1200

08005198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800519c:	4b03      	ldr	r3, [pc, #12]	; (80051ac <HAL_RCC_GetHCLKFreq+0x14>)
 800519e:	681b      	ldr	r3, [r3, #0]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000010 	.word	0x20000010

080051b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051b4:	f7ff fff0 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 80051b8:	4601      	mov	r1, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0a9b      	lsrs	r3, r3, #10
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4a03      	ldr	r2, [pc, #12]	; (80051d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c6:	5cd3      	ldrb	r3, [r2, r3]
 80051c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	0800d1d4 	.word	0x0800d1d4

080051d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	220f      	movs	r2, #15
 80051e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <HAL_RCC_GetClockConfig+0x5c>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0203 	and.w	r2, r3, #3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <HAL_RCC_GetClockConfig+0x5c>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005200:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <HAL_RCC_GetClockConfig+0x5c>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <HAL_RCC_GetClockConfig+0x5c>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <HAL_RCC_GetClockConfig+0x60>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40023800 	.word	0x40023800
 8005238:	40023c00 	.word	0x40023c00

0800523c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d105      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d035      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005264:	4b67      	ldr	r3, [pc, #412]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800526a:	f7fb fce1 	bl	8000c30 <HAL_GetTick>
 800526e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005272:	f7fb fcdd 	bl	8000c30 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e0ba      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005284:	4b60      	ldr	r3, [pc, #384]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	019a      	lsls	r2, r3, #6
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	071b      	lsls	r3, r3, #28
 800529c:	495a      	ldr	r1, [pc, #360]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052a4:	4b57      	ldr	r3, [pc, #348]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052aa:	f7fb fcc1 	bl	8000c30 <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052b2:	f7fb fcbd 	bl	8000c30 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e09a      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052c4:	4b50      	ldr	r3, [pc, #320]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8083 	beq.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	4b49      	ldr	r3, [pc, #292]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a48      	ldr	r2, [pc, #288]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
 80052ee:	4b46      	ldr	r3, [pc, #280]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052fa:	4b44      	ldr	r3, [pc, #272]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a43      	ldr	r2, [pc, #268]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005304:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005306:	f7fb fc93 	bl	8000c30 <HAL_GetTick>
 800530a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800530e:	f7fb fc8f 	bl	8000c30 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e06c      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005320:	4b3a      	ldr	r3, [pc, #232]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800532c:	4b36      	ldr	r3, [pc, #216]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005334:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d02f      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	429a      	cmp	r2, r3
 8005348:	d028      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005352:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005354:	4b2e      	ldr	r3, [pc, #184]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800535a:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005366:	4b28      	ldr	r3, [pc, #160]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b01      	cmp	r3, #1
 8005370:	d114      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005372:	f7fb fc5d 	bl	8000c30 <HAL_GetTick>
 8005376:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005378:	e00a      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800537a:	f7fb fc59 	bl	8000c30 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f241 3288 	movw	r2, #5000	; 0x1388
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e034      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005390:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ee      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a8:	d10d      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053aa:	4b17      	ldr	r3, [pc, #92]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053be:	4912      	ldr	r1, [pc, #72]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]
 80053c4:	e005      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053c6:	4b10      	ldr	r3, [pc, #64]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4a0f      	ldr	r2, [pc, #60]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053d0:	6093      	str	r3, [r2, #8]
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053de:	490a      	ldr	r1, [pc, #40]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7c1a      	ldrb	r2, [r3, #16]
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053f6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	42470068 	.word	0x42470068
 8005408:	40023800 	.word	0x40023800
 800540c:	40007000 	.word	0x40007000
 8005410:	42470e40 	.word	0x42470e40
 8005414:	424711e0 	.word	0x424711e0

08005418 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2203      	movs	r2, #3
 8005424:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8005426:	4b18      	ldr	r3, [pc, #96]	; (8005488 <HAL_RCCEx_GetPeriphCLKConfig+0x70>)
 8005428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542c:	099b      	lsrs	r3, r3, #6
 800542e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005436:	4b14      	ldr	r3, [pc, #80]	; (8005488 <HAL_RCCEx_GetPeriphCLKConfig+0x70>)
 8005438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543c:	0f1b      	lsrs	r3, r3, #28
 800543e:	f003 0207 	and.w	r2, r3, #7
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <HAL_RCCEx_GetPeriphCLKConfig+0x70>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800544e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <HAL_RCCEx_GetPeriphCLKConfig+0x70>)
 8005452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005454:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCCEx_GetPeriphCLKConfig+0x70>)
 8005462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKConfig+0x5e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	741a      	strb	r2, [r3, #16]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8005474:	e002      	b.n	800547c <HAL_RCCEx_GetPeriphCLKConfig+0x64>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	741a      	strb	r2, [r3, #16]
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40023800 	.word	0x40023800

0800548c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d13d      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80054aa:	4b22      	ldr	r3, [pc, #136]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d12f      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80054be:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80054c0:	617b      	str	r3, [r7, #20]
          break;
 80054c2:	e02f      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054c4:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d0:	d108      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054d2:	4b18      	ldr	r3, [pc, #96]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	e007      	b.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054e4:	4b13      	ldr	r3, [pc, #76]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ec:	4a14      	ldr	r2, [pc, #80]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80054f4:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80054f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fa:	099b      	lsrs	r3, r3, #6
 80054fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800550a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550e:	0f1b      	lsrs	r3, r3, #28
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	617b      	str	r3, [r7, #20]
          break;
 800551c:	e002      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
          break;
 8005522:	bf00      	nop
        }
      }
      break;
 8005524:	bf00      	nop
    }
  }
  return frequency;
 8005526:	697b      	ldr	r3, [r7, #20]
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40023800 	.word	0x40023800
 8005538:	00bb8000 	.word	0x00bb8000
 800553c:	007a1200 	.word	0x007a1200
 8005540:	00f42400 	.word	0x00f42400

08005544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e01d      	b.n	8005592 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f815 	bl	800559a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f000 f968 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b06      	cmp	r3, #6
 80055d6:	d007      	beq.n	80055e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b02      	cmp	r3, #2
 800560a:	d122      	bne.n	8005652 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b02      	cmp	r3, #2
 8005618:	d11b      	bne.n	8005652 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0202 	mvn.w	r2, #2
 8005622:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f8ee 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 800563e:	e005      	b.n	800564c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8e0 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8f1 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b04      	cmp	r3, #4
 800565e:	d122      	bne.n	80056a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d11b      	bne.n	80056a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f06f 0204 	mvn.w	r2, #4
 8005676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f8c4 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 8005692:	e005      	b.n	80056a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f8b6 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8c7 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d122      	bne.n	80056fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d11b      	bne.n	80056fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f06f 0208 	mvn.w	r2, #8
 80056ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2204      	movs	r2, #4
 80056d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f89a 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 80056e6:	e005      	b.n	80056f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f88c 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f89d 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b10      	cmp	r3, #16
 8005706:	d122      	bne.n	800574e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b10      	cmp	r3, #16
 8005714:	d11b      	bne.n	800574e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f06f 0210 	mvn.w	r2, #16
 800571e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2208      	movs	r2, #8
 8005724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f870 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 800573a:	e005      	b.n	8005748 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f862 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f873 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10e      	bne.n	800577a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d107      	bne.n	800577a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0201 	mvn.w	r2, #1
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 fbab 	bl	8006ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005784:	2b80      	cmp	r3, #128	; 0x80
 8005786:	d10e      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8e3 	bl	800596c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d10e      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d107      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f838 	bl	8005842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d10e      	bne.n	80057fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d107      	bne.n	80057fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0220 	mvn.w	r2, #32
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f8ad 	bl	8005958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a34      	ldr	r2, [pc, #208]	; (800593c <TIM_Base_SetConfig+0xe4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00f      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d00b      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a31      	ldr	r2, [pc, #196]	; (8005940 <TIM_Base_SetConfig+0xe8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a30      	ldr	r2, [pc, #192]	; (8005944 <TIM_Base_SetConfig+0xec>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <TIM_Base_SetConfig+0xf0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d108      	bne.n	80058a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <TIM_Base_SetConfig+0xe4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01b      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d017      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <TIM_Base_SetConfig+0xe8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a21      	ldr	r2, [pc, #132]	; (8005944 <TIM_Base_SetConfig+0xec>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a20      	ldr	r2, [pc, #128]	; (8005948 <TIM_Base_SetConfig+0xf0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1f      	ldr	r2, [pc, #124]	; (800594c <TIM_Base_SetConfig+0xf4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1e      	ldr	r2, [pc, #120]	; (8005950 <TIM_Base_SetConfig+0xf8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <TIM_Base_SetConfig+0xfc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a08      	ldr	r2, [pc, #32]	; (800593c <TIM_Base_SetConfig+0xe4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40014000 	.word	0x40014000
 8005950:	40014400 	.word	0x40014400
 8005954:	40014800 	.word	0x40014800

08005958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005980:	b084      	sub	sp, #16
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	f107 001c 	add.w	r0, r7, #28
 800598e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	2b01      	cmp	r3, #1
 8005996:	d122      	bne.n	80059de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d105      	bne.n	80059d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f94a 	bl	8005c6c <USB_CoreReset>
 80059d8:	4603      	mov	r3, r0
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e01a      	b.n	8005a14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f93e 	bl	8005c6c <USB_CoreReset>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
 8005a06:	e005      	b.n	8005a14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10b      	bne.n	8005a32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f043 0206 	orr.w	r2, r3, #6
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f043 0220 	orr.w	r2, r3, #32
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a3e:	b004      	add	sp, #16
 8005a40:	4770      	bx	lr

08005a42 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f043 0201 	orr.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f023 0201 	bic.w	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d106      	bne.n	8005ab2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
 8005ab0:	e00b      	b.n	8005aca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]
 8005ac4:	e001      	b.n	8005aca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e003      	b.n	8005ad2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005aca:	2032      	movs	r0, #50	; 0x32
 8005acc:	f7fb f8bc 	bl	8000c48 <HAL_Delay>

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	f043 0220 	orr.w	r2, r3, #32
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <USB_FlushTxFifo+0x48>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d901      	bls.n	8005b08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e006      	b.n	8005b16 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d0f0      	beq.n	8005af6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	00030d40 	.word	0x00030d40

08005b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2210      	movs	r2, #16
 8005b38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a09      	ldr	r2, [pc, #36]	; (8005b68 <USB_FlushRxFifo+0x40>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d901      	bls.n	8005b4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e006      	b.n	8005b5a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d0f0      	beq.n	8005b3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	00030d40 	.word	0x00030d40

08005b6c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b089      	sub	sp, #36	; 0x24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4611      	mov	r1, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	71fb      	strb	r3, [r7, #7]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005b8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d11a      	bne.n	8005bc8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b92:	88bb      	ldrh	r3, [r7, #4]
 8005b94:	3303      	adds	r3, #3
 8005b96:	089b      	lsrs	r3, r3, #2
 8005b98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	e00f      	b.n	8005bc0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	031a      	lsls	r2, r3, #12
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bac:	461a      	mov	r2, r3
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d3eb      	bcc.n	8005ba0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3724      	adds	r7, #36	; 0x24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b089      	sub	sp, #36	; 0x24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	4613      	mov	r3, r2
 8005be2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	3303      	adds	r3, #3
 8005bf0:	089b      	lsrs	r3, r3, #2
 8005bf2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e00b      	b.n	8005c12 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d3ef      	bcc.n	8005bfa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3724      	adds	r7, #36	; 0x24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c40:	68fb      	ldr	r3, [r7, #12]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <USB_CoreReset+0x64>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e01b      	b.n	8005cc2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	daf2      	bge.n	8005c78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f043 0201 	orr.w	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <USB_CoreReset+0x64>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e006      	b.n	8005cc2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d0f0      	beq.n	8005ca2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	00030d40 	.word	0x00030d40

08005cd4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	f107 001c 	add.w	r0, r7, #28
 8005ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d018      	beq.n	8005d58 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10a      	bne.n	8005d42 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d3a:	f043 0304 	orr.w	r3, r3, #4
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e014      	b.n	8005d6c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d50:	f023 0304 	bic.w	r3, r3, #4
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e009      	b.n	8005d6c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d66:	f023 0304 	bic.w	r3, r3, #4
 8005d6a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005d6c:	2110      	movs	r1, #16
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff feb4 	bl	8005adc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff fed7 	bl	8005b28 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e015      	b.n	8005dac <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	461a      	mov	r2, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d3e5      	bcc.n	8005d80 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005db4:	2101      	movs	r1, #1
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f8ac 	bl	8005f14 <USB_DriveVbus>

  HAL_Delay(200U);
 8005dbc:	20c8      	movs	r0, #200	; 0xc8
 8005dbe:	f7fa ff43 	bl	8000c48 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f04f 32ff 	mov.w	r2, #4294967295
 8005dce:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a14      	ldr	r2, [pc, #80]	; (8005e38 <USB_HostInit+0x164>)
 8005de8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <USB_HostInit+0x168>)
 8005dee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005df2:	e009      	b.n	8005e08 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2280      	movs	r2, #128	; 0x80
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a10      	ldr	r2, [pc, #64]	; (8005e40 <USB_HostInit+0x16c>)
 8005dfe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <USB_HostInit+0x170>)
 8005e04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f043 0210 	orr.w	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <USB_HostInit+0x174>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e32:	b004      	add	sp, #16
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	01000200 	.word	0x01000200
 8005e3c:	00e00300 	.word	0x00e00300
 8005e40:	00600080 	.word	0x00600080
 8005e44:	004000e0 	.word	0x004000e0
 8005e48:	a3200008 	.word	0xa3200008

08005e4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e84:	4313      	orrs	r3, r2
 8005e86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d107      	bne.n	8005e9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e94:	461a      	mov	r2, r3
 8005e96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e9a:	6053      	str	r3, [r2, #4]
 8005e9c:	e009      	b.n	8005eb2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d106      	bne.n	8005eb2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f241 7370 	movw	r3, #6000	; 0x1770
 8005eb0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ee0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ef0:	2064      	movs	r0, #100	; 0x64
 8005ef2:	f7fa fea9 	bl	8000c48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f02:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f04:	200a      	movs	r0, #10
 8005f06:	f7fa fe9f 	bl	8000c48 <HAL_Delay>

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f38:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d109      	bne.n	8005f58 <USB_DriveVbus+0x44>
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d106      	bne.n	8005f58 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f56:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f62:	d109      	bne.n	8005f78 <USB_DriveVbus+0x64>
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f76:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	0c5b      	lsrs	r3, r3, #17
 8005fa4:	f003 0303 	and.w	r3, r3, #3
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	b29b      	uxth	r3, r3
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	70fb      	strb	r3, [r7, #3]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70bb      	strb	r3, [r7, #2]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006006:	461a      	mov	r2, r3
 8006008:	f04f 33ff 	mov.w	r3, #4294967295
 800600c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800600e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006012:	2b03      	cmp	r3, #3
 8006014:	d87e      	bhi.n	8006114 <USB_HC_Init+0x13c>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <USB_HC_Init+0x44>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	0800602d 	.word	0x0800602d
 8006020:	080060d7 	.word	0x080060d7
 8006024:	0800602d 	.word	0x0800602d
 8006028:	08006099 	.word	0x08006099
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	461a      	mov	r2, r3
 800603a:	f240 439d 	movw	r3, #1181	; 0x49d
 800603e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006040:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006044:	2b00      	cmp	r3, #0
 8006046:	da10      	bge.n	800606a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4413      	add	r3, r2
 8006050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	440a      	add	r2, r1
 800605e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006066:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006068:	e057      	b.n	800611a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d051      	beq.n	800611a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	440a      	add	r2, r1
 800608c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006090:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006094:	60d3      	str	r3, [r2, #12]
      break;
 8006096:	e040      	b.n	800611a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	461a      	mov	r2, r3
 80060a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80060aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da34      	bge.n	800611e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060d4:	e023      	b.n	800611e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e2:	461a      	mov	r2, r3
 80060e4:	f240 2325 	movw	r3, #549	; 0x225
 80060e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da17      	bge.n	8006122 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	440a      	add	r2, r1
 8006108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800610c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006110:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006112:	e006      	b.n	8006122 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	75fb      	strb	r3, [r7, #23]
      break;
 8006118:	e004      	b.n	8006124 <USB_HC_Init+0x14c>
      break;
 800611a:	bf00      	nop
 800611c:	e002      	b.n	8006124 <USB_HC_Init+0x14c>
      break;
 800611e:	bf00      	nop
 8006120:	e000      	b.n	8006124 <USB_HC_Init+0x14c>
      break;
 8006122:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800612a:	699a      	ldr	r2, [r3, #24]
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	2101      	movs	r1, #1
 8006134:	fa01 f303 	lsl.w	r3, r1, r3
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800613e:	4313      	orrs	r3, r2
 8006140:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800614e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006152:	2b00      	cmp	r3, #0
 8006154:	da03      	bge.n	800615e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	e001      	b.n	8006162 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006162:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d103      	bne.n	8006172 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800616a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e001      	b.n	8006176 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006176:	787b      	ldrb	r3, [r7, #1]
 8006178:	059b      	lsls	r3, r3, #22
 800617a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800617e:	78bb      	ldrb	r3, [r7, #2]
 8006180:	02db      	lsls	r3, r3, #11
 8006182:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006186:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006188:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800618c:	049b      	lsls	r3, r3, #18
 800618e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006192:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006194:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006196:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800619a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	0159      	lsls	r1, r3, #5
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	440b      	add	r3, r1
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061b2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80061b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d10f      	bne.n	80061dc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061da:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop

080061ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	; 0x30
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006208:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d028      	beq.n	8006268 <USB_HC_StartXfer+0x7c>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	791b      	ldrb	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d124      	bne.n	8006268 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <USB_HC_StartXfer+0x50>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	795b      	ldrb	r3, [r3, #5]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d107      	bne.n	800623c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	4619      	mov	r1, r3
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fa2e 	bl	8006694 <USB_DoPing>
      return HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	e112      	b.n	8006462 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d112      	bne.n	8006268 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	440a      	add	r2, r1
 8006258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006260:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d018      	beq.n	80062a2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	8912      	ldrh	r2, [r2, #8]
 8006278:	4413      	add	r3, r2
 800627a:	3b01      	subs	r3, #1
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	8912      	ldrh	r2, [r2, #8]
 8006280:	fbb3 f3f2 	udiv	r3, r3, r2
 8006284:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006286:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006288:	8b7b      	ldrh	r3, [r7, #26]
 800628a:	429a      	cmp	r2, r3
 800628c:	d90b      	bls.n	80062a6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800628e:	8b7b      	ldrh	r3, [r7, #26]
 8006290:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	8912      	ldrh	r2, [r2, #8]
 8006298:	fb02 f203 	mul.w	r2, r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	611a      	str	r2, [r3, #16]
 80062a0:	e001      	b.n	80062a6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80062a2:	2301      	movs	r3, #1
 80062a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d006      	beq.n	80062bc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80062ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	8912      	ldrh	r2, [r2, #8]
 80062b4:	fb02 f203 	mul.w	r2, r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062c6:	04d9      	lsls	r1, r3, #19
 80062c8:	4b68      	ldr	r3, [pc, #416]	; (800646c <USB_HC_StartXfer+0x280>)
 80062ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80062cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	7a9b      	ldrb	r3, [r3, #10]
 80062d2:	075b      	lsls	r3, r3, #29
 80062d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d8:	69f9      	ldr	r1, [r7, #28]
 80062da:	0148      	lsls	r0, r1, #5
 80062dc:	6a39      	ldr	r1, [r7, #32]
 80062de:	4401      	add	r1, r0
 80062e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80062e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	68d9      	ldr	r1, [r3, #12]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	460a      	mov	r2, r1
 8006300:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	440a      	add	r2, r1
 8006330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006334:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006338:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	7e7b      	ldrb	r3, [r7, #25]
 800634a:	075b      	lsls	r3, r3, #29
 800634c:	69f9      	ldr	r1, [r7, #28]
 800634e:	0148      	lsls	r0, r1, #5
 8006350:	6a39      	ldr	r1, [r7, #32]
 8006352:	4401      	add	r1, r0
 8006354:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a41      	ldr	r2, [pc, #260]	; (8006470 <USB_HC_StartXfer+0x284>)
 800636c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800636e:	4b40      	ldr	r3, [pc, #256]	; (8006470 <USB_HC_StartXfer+0x284>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006376:	4a3e      	ldr	r2, [pc, #248]	; (8006470 <USB_HC_StartXfer+0x284>)
 8006378:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	78db      	ldrb	r3, [r3, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d006      	beq.n	8006390 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006382:	4b3b      	ldr	r3, [pc, #236]	; (8006470 <USB_HC_StartXfer+0x284>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638a:	4a39      	ldr	r2, [pc, #228]	; (8006470 <USB_HC_StartXfer+0x284>)
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e005      	b.n	800639c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006390:	4b37      	ldr	r3, [pc, #220]	; (8006470 <USB_HC_StartXfer+0x284>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006398:	4a35      	ldr	r2, [pc, #212]	; (8006470 <USB_HC_StartXfer+0x284>)
 800639a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800639c:	4b34      	ldr	r3, [pc, #208]	; (8006470 <USB_HC_StartXfer+0x284>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	4a32      	ldr	r2, [pc, #200]	; (8006470 <USB_HC_StartXfer+0x284>)
 80063a6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	461a      	mov	r2, r3
 80063b6:	4b2e      	ldr	r3, [pc, #184]	; (8006470 <USB_HC_StartXfer+0x284>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d14e      	bne.n	8006460 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	78db      	ldrb	r3, [r3, #3]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d14a      	bne.n	8006460 <USB_HC_StartXfer+0x274>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d046      	beq.n	8006460 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	79db      	ldrb	r3, [r3, #7]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d830      	bhi.n	800643c <USB_HC_StartXfer+0x250>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <USB_HC_StartXfer+0x1f4>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	08006415 	.word	0x08006415
 80063e8:	080063f1 	.word	0x080063f1
 80063ec:	08006415 	.word	0x08006415
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	3303      	adds	r3, #3
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063fa:	8afa      	ldrh	r2, [r7, #22]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	b29b      	uxth	r3, r3
 8006402:	429a      	cmp	r2, r3
 8006404:	d91c      	bls.n	8006440 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	619a      	str	r2, [r3, #24]
          }
          break;
 8006412:	e015      	b.n	8006440 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	3303      	adds	r3, #3
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800641e:	8afa      	ldrh	r2, [r7, #22]
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	b29b      	uxth	r3, r3
 800642a:	429a      	cmp	r2, r3
 800642c:	d90a      	bls.n	8006444 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	619a      	str	r2, [r3, #24]
          }
          break;
 800643a:	e003      	b.n	8006444 <USB_HC_StartXfer+0x258>

        default:
          break;
 800643c:	bf00      	nop
 800643e:	e002      	b.n	8006446 <USB_HC_StartXfer+0x25a>
          break;
 8006440:	bf00      	nop
 8006442:	e000      	b.n	8006446 <USB_HC_StartXfer+0x25a>
          break;
 8006444:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68d9      	ldr	r1, [r3, #12]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	785a      	ldrb	r2, [r3, #1]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	b298      	uxth	r0, r3
 8006454:	2300      	movs	r3, #0
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4603      	mov	r3, r0
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff fb86 	bl	8005b6c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3728      	adds	r7, #40	; 0x28
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	1ff80000 	.word	0x1ff80000
 8006470:	200010e8 	.word	0x200010e8

08006474 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	b29b      	uxth	r3, r3
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006496:	b480      	push	{r7}
 8006498:	b087      	sub	sp, #28
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	0c9b      	lsrs	r3, r3, #18
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <USB_HC_Halt+0x3a>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d16c      	bne.n	80065aa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ee:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d143      	bne.n	8006584 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	440a      	add	r2, r1
 8006512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800651a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	440a      	add	r2, r1
 8006532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800653a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	440a      	add	r2, r1
 8006552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800655a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	3301      	adds	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006568:	d81d      	bhi.n	80065a6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006580:	d0ec      	beq.n	800655c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006582:	e080      	b.n	8006686 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	440a      	add	r2, r1
 800659a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065a4:	e06f      	b.n	8006686 <USB_HC_Halt+0x1f0>
          break;
 80065a6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065a8:	e06d      	b.n	8006686 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d143      	bne.n	8006662 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	440a      	add	r2, r1
 8006610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006614:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006618:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	440a      	add	r2, r1
 8006630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006638:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3301      	adds	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006646:	d81d      	bhi.n	8006684 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800665a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665e:	d0ec      	beq.n	800663a <USB_HC_Halt+0x1a4>
 8006660:	e011      	b.n	8006686 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	440a      	add	r2, r1
 8006678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e000      	b.n	8006686 <USB_HC_Halt+0x1f0>
          break;
 8006684:	bf00      	nop
    }
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066a8:	2301      	movs	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	04da      	lsls	r2, r3, #19
 80066b0:	4b15      	ldr	r3, [pc, #84]	; (8006708 <USB_DoPing+0x74>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f2:	461a      	mov	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	1ff80000 	.word	0x1ff80000

0800670c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff f9a1 	bl	8005a64 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006722:	2110      	movs	r1, #16
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff f9d9 	bl	8005adc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff f9fc 	bl	8005b28 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	e01f      	b.n	8006776 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800674c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006754:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800675c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	461a      	mov	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	3301      	adds	r3, #1
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b0f      	cmp	r3, #15
 800677a:	d9dc      	bls.n	8006736 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	e034      	b.n	80067ec <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006798:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	461a      	mov	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	3301      	adds	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c8:	d80c      	bhi.n	80067e4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067e0:	d0ec      	beq.n	80067bc <USB_StopHost+0xb0>
 80067e2:	e000      	b.n	80067e6 <USB_StopHost+0xda>
        break;
 80067e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3301      	adds	r3, #1
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2b0f      	cmp	r3, #15
 80067f0:	d9c7      	bls.n	8006782 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f8:	461a      	mov	r2, r3
 80067fa:	f04f 33ff 	mov.w	r3, #4294967295
 80067fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f04f 32ff 	mov.w	r2, #4294967295
 8006806:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff f91a 	bl	8005a42 <USB_EnableGlobalInt>

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <LLD_I2S_INIT>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
void LLD_I2S_INIT(uint32_t audioFreq)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
   /*Update PLL Clock Frequency setting*/
   lld_I2S_pllClockConfig(audioFreq);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f807 	bl	8006834 <lld_I2S_pllClockConfig>
   /*Update I2S peripheral sampling frequency*/
   lld_I2S_freqUpdate(audioFreq);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f850 	bl	80068cc <lld_I2S_freqUpdate>
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <lld_I2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void lld_I2S_pllClockConfig(uint32_t audioFreq)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
   RCC_PeriphCLKInitTypeDef  rccclkinit;
   uint8_t                   index = 0, freqindex = 0xFF;
 800683c:	2300      	movs	r3, #0
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	23ff      	movs	r3, #255	; 0xff
 8006842:	77bb      	strb	r3, [r7, #30]


   for(index = 0; index < 8; index++)
 8006844:	2300      	movs	r3, #0
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e00b      	b.n	8006862 <lld_I2S_pllClockConfig+0x2e>
   {
      if(I2SFreq[index] == audioFreq)
 800684a:	7ffb      	ldrb	r3, [r7, #31]
 800684c:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <lld_I2S_pllClockConfig+0x8c>)
 800684e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d101      	bne.n	800685c <lld_I2S_pllClockConfig+0x28>
      {
         freqindex = index;
 8006858:	7ffb      	ldrb	r3, [r7, #31]
 800685a:	77bb      	strb	r3, [r7, #30]
   for(index = 0; index < 8; index++)
 800685c:	7ffb      	ldrb	r3, [r7, #31]
 800685e:	3301      	adds	r3, #1
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	7ffb      	ldrb	r3, [r7, #31]
 8006864:	2b07      	cmp	r3, #7
 8006866:	d9f0      	bls.n	800684a <lld_I2S_pllClockConfig+0x16>
      }
   }
   /* Enable PLLI2S clock */
   HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fdd3 	bl	8005418 <HAL_RCCEx_GetPeriphCLKConfig>
   /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
   if ((freqindex & 0x7) == 0)
 8006872:	7fbb      	ldrb	r3, [r7, #30]
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	2b00      	cmp	r3, #0
 800687a:	d111      	bne.n	80068a0 <lld_I2S_pllClockConfig+0x6c>
   {
      /* I2S clock config
      PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
      I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800687c:	2301      	movs	r3, #1
 800687e:	60bb      	str	r3, [r7, #8]
      rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8006880:	7fbb      	ldrb	r3, [r7, #30]
 8006882:	4a10      	ldr	r2, [pc, #64]	; (80068c4 <lld_I2S_pllClockConfig+0x90>)
 8006884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006888:	60fb      	str	r3, [r7, #12]
      rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800688a:	7fbb      	ldrb	r3, [r7, #30]
 800688c:	4a0e      	ldr	r2, [pc, #56]	; (80068c8 <lld_I2S_pllClockConfig+0x94>)
 800688e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006892:	613b      	str	r3, [r7, #16]
      HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8006894:	f107 0308 	add.w	r3, r7, #8
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe fccf 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
      rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
      rccclkinit.PLLI2S.PLLI2SN = 258;
      rccclkinit.PLLI2S.PLLI2SR = 3;
      HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
   }
}
 800689e:	e00b      	b.n	80068b8 <lld_I2S_pllClockConfig+0x84>
      rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80068a0:	2301      	movs	r3, #1
 80068a2:	60bb      	str	r3, [r7, #8]
      rccclkinit.PLLI2S.PLLI2SN = 258;
 80068a4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80068a8:	60fb      	str	r3, [r7, #12]
      rccclkinit.PLLI2S.PLLI2SR = 3;
 80068aa:	2303      	movs	r3, #3
 80068ac:	613b      	str	r3, [r7, #16]
      HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80068ae:	f107 0308 	add.w	r3, r7, #8
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fcc2 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
}
 80068b8:	bf00      	nop
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	0800d164 	.word	0x0800d164
 80068c4:	0800d184 	.word	0x0800d184
 80068c8:	0800d1a4 	.word	0x0800d1a4

080068cc <lld_I2S_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static void lld_I2S_freqUpdate(uint32_t AudioFreq)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
   /* Initialize the hAudioOutI2s Instance parameter */
   hAudioI2S.Instance         = SPI3;
 80068d4:	4b19      	ldr	r3, [pc, #100]	; (800693c <lld_I2S_freqUpdate+0x70>)
 80068d6:	4a1a      	ldr	r2, [pc, #104]	; (8006940 <lld_I2S_freqUpdate+0x74>)
 80068d8:	601a      	str	r2, [r3, #0]

   /* Disable I2S block */
   __HAL_I2S_DISABLE(&hAudioI2S);
 80068da:	4b18      	ldr	r3, [pc, #96]	; (800693c <lld_I2S_freqUpdate+0x70>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	4b16      	ldr	r3, [pc, #88]	; (800693c <lld_I2S_freqUpdate+0x70>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e8:	61da      	str	r2, [r3, #28]
   CLEAR_BIT(hAudioI2S.Instance->I2SCFGR, SPI_I2SCFGR_I2SE);
 80068ea:	4b14      	ldr	r3, [pc, #80]	; (800693c <lld_I2S_freqUpdate+0x70>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	4b12      	ldr	r3, [pc, #72]	; (800693c <lld_I2S_freqUpdate+0x70>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f8:	61da      	str	r2, [r3, #28]

   /* I2S3 peripheral configuration */
   hAudioI2S.Init.Mode        = I2S_MODE_MASTER_TX;
 80068fa:	4b10      	ldr	r3, [pc, #64]	; (800693c <lld_I2S_freqUpdate+0x70>)
 80068fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006900:	605a      	str	r2, [r3, #4]
   hAudioI2S.Init.Standard    = I2S_STANDARD_PHILIPS;
 8006902:	4b0e      	ldr	r3, [pc, #56]	; (800693c <lld_I2S_freqUpdate+0x70>)
 8006904:	2200      	movs	r2, #0
 8006906:	609a      	str	r2, [r3, #8]
   hAudioI2S.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8006908:	4b0c      	ldr	r3, [pc, #48]	; (800693c <lld_I2S_freqUpdate+0x70>)
 800690a:	2200      	movs	r2, #0
 800690c:	60da      	str	r2, [r3, #12]
   hAudioI2S.Init.MCLKOutput  = I2S_MCLKOUTPUT_DISABLE;
 800690e:	4b0b      	ldr	r3, [pc, #44]	; (800693c <lld_I2S_freqUpdate+0x70>)
 8006910:	2200      	movs	r2, #0
 8006912:	611a      	str	r2, [r3, #16]
   hAudioI2S.Init.AudioFreq   = AudioFreq;
 8006914:	4a09      	ldr	r2, [pc, #36]	; (800693c <lld_I2S_freqUpdate+0x70>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6153      	str	r3, [r2, #20]
   hAudioI2S.Init.CPOL        = I2S_CPOL_LOW;
 800691a:	4b08      	ldr	r3, [pc, #32]	; (800693c <lld_I2S_freqUpdate+0x70>)
 800691c:	2200      	movs	r2, #0
 800691e:	619a      	str	r2, [r3, #24]
   hAudioI2S.Init.ClockSource = I2S_CLOCK_PLL;
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <lld_I2S_freqUpdate+0x70>)
 8006922:	2200      	movs	r2, #0
 8006924:	61da      	str	r2, [r3, #28]
   hAudioI2S.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <lld_I2S_freqUpdate+0x70>)
 8006928:	2200      	movs	r2, #0
 800692a:	621a      	str	r2, [r3, #32]
   /* Initialize the I2S peripheral with the structure above */
   HAL_I2S_Init(&hAudioI2S);
 800692c:	4803      	ldr	r0, [pc, #12]	; (800693c <lld_I2S_freqUpdate+0x70>)
 800692e:	f7fc ff69 	bl	8003804 <HAL_I2S_Init>
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20001130 	.word	0x20001130
 8006940:	40003c00 	.word	0x40003c00

08006944 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	; 0x28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
   GPIO_InitTypeDef  GPIO_InitStruct =
 800694c:	f107 0314 	add.w	r3, r7, #20
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	609a      	str	r2, [r3, #8]
 8006958:	60da      	str	r2, [r3, #12]
 800695a:	611a      	str	r2, [r3, #16]
   {
      0
   };


   if(hi2s->Instance == SPI3)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a43      	ldr	r2, [pc, #268]	; (8006a70 <HAL_I2S_MspInit+0x12c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d17f      	bne.n	8006a66 <HAL_I2S_MspInit+0x122>
   {
      /* USER CODE BEGIN SPI3_MspInit 0 */

      /* USER CODE END SPI3_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_SPI3_CLK_ENABLE();
 8006966:	2300      	movs	r3, #0
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	4b42      	ldr	r3, [pc, #264]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	4a41      	ldr	r2, [pc, #260]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 8006970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006974:	6413      	str	r3, [r2, #64]	; 0x40
 8006976:	4b3f      	ldr	r3, [pc, #252]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	4b3b      	ldr	r3, [pc, #236]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	4a3a      	ldr	r2, [pc, #232]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	6313      	str	r3, [r2, #48]	; 0x30
 8006992:	4b38      	ldr	r3, [pc, #224]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_GPIOC_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	4b34      	ldr	r3, [pc, #208]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	4a33      	ldr	r2, [pc, #204]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 80069a8:	f043 0304 	orr.w	r3, r3, #4
 80069ac:	6313      	str	r3, [r2, #48]	; 0x30
 80069ae:	4b31      	ldr	r3, [pc, #196]	; (8006a74 <HAL_I2S_MspInit+0x130>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	60bb      	str	r3, [r7, #8]
 80069b8:	68bb      	ldr	r3, [r7, #8]
      /**I2S3 GPIO Configuration
      PA4     ------> I2S3_WS
      PC10     ------> I2S3_CK
      PC12     ------> I2S3_SD
      */
      GPIO_InitStruct.Pin = GPIO_PIN_4;
 80069ba:	2310      	movs	r3, #16
 80069bc:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069be:	2302      	movs	r3, #2
 80069c0:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c6:	2300      	movs	r3, #0
 80069c8:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80069ca:	2306      	movs	r3, #6
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	4619      	mov	r1, r3
 80069d4:	4828      	ldr	r0, [pc, #160]	; (8006a78 <HAL_I2S_MspInit+0x134>)
 80069d6:	f7fb f84d 	bl	8001a74 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80069da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80069de:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e0:	2302      	movs	r3, #2
 80069e2:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e8:	2300      	movs	r3, #0
 80069ea:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80069ec:	2306      	movs	r3, #6
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	4619      	mov	r1, r3
 80069f6:	4821      	ldr	r0, [pc, #132]	; (8006a7c <HAL_I2S_MspInit+0x138>)
 80069f8:	f7fb f83c 	bl	8001a74 <HAL_GPIO_Init>

      /* I2S3 DMA Init */
      /* SPI3_TX Init */
      hdma_spi3_tx.Instance = DMA1_Stream5;
 80069fc:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 80069fe:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <HAL_I2S_MspInit+0x140>)
 8006a00:	601a      	str	r2, [r3, #0]
      hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8006a02:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	605a      	str	r2, [r3, #4]
      hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a08:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a0a:	2240      	movs	r2, #64	; 0x40
 8006a0c:	609a      	str	r2, [r3, #8]
      hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a0e:	4b1c      	ldr	r3, [pc, #112]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	60da      	str	r2, [r3, #12]
      hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a1a:	611a      	str	r2, [r3, #16]
      hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006a1c:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a22:	615a      	str	r2, [r3, #20]
      hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006a24:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a2a:	619a      	str	r2, [r3, #24]
      hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8006a2c:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a32:	61da      	str	r2, [r3, #28]
      hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006a34:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a3a:	621a      	str	r2, [r3, #32]
      hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a3c:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a3e:	2204      	movs	r2, #4
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24
      hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a44:	2203      	movs	r2, #3
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28
      hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Init(&hdma_spi3_tx);
 8006a54:	480a      	ldr	r0, [pc, #40]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a56:	f7fa fc2f 	bl	80012b8 <HAL_DMA_Init>

      __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8006a60:	4a07      	ldr	r2, [pc, #28]	; (8006a80 <HAL_I2S_MspInit+0x13c>)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6393      	str	r3, [r2, #56]	; 0x38

      /* USER CODE BEGIN SPI3_MspInit 1 */

      /* USER CODE END SPI3_MspInit 1 */
   }
}
 8006a66:	bf00      	nop
 8006a68:	3728      	adds	r7, #40	; 0x28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40003c00 	.word	0x40003c00
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40020000 	.word	0x40020000
 8006a7c:	40020800 	.word	0x40020800
 8006a80:	20001178 	.word	0x20001178
 8006a84:	40026088 	.word	0x40026088

08006a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0

   /* DMA controller clock enable */
   __HAL_RCC_DMA1_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <MX_DMA_Init+0x3c>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	4a0b      	ldr	r2, [pc, #44]	; (8006ac4 <MX_DMA_Init+0x3c>)
 8006a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <MX_DMA_Init+0x3c>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]

   /* DMA interrupt init */
   /* DMA1_Stream5_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2100      	movs	r1, #0
 8006aae:	2010      	movs	r0, #16
 8006ab0:	f7fa fbd7 	bl	8001262 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006ab4:	2010      	movs	r0, #16
 8006ab6:	f7fa fbf0 	bl	800129a <HAL_NVIC_EnableIRQ>

}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023800 	.word	0x40023800

08006ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN ADC1_Init 0 */

   /* USER CODE END ADC1_Init 0 */

   ADC_ChannelConfTypeDef  sConfig =
 8006ace:	463b      	mov	r3, r7
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	60da      	str	r2, [r3, #12]
   /* USER CODE BEGIN ADC1_Init 1 */

   /* USER CODE END ADC1_Init 1 */
   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
   hadc1.Instance = ADC1;
 8006ada:	4b1f      	ldr	r3, [pc, #124]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <MX_ADC1_Init+0x94>)
 8006ade:	601a      	str	r2, [r3, #0]
   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006ae0:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ae6:	605a      	str	r2, [r3, #4]
   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]
   hadc1.Init.ScanConvMode = ENABLE;
 8006aee:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	611a      	str	r2, [r3, #16]
   hadc1.Init.ContinuousConvMode = DISABLE;
 8006af4:	4b18      	ldr	r3, [pc, #96]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	761a      	strb	r2, [r3, #24]
   hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006afa:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2020 	strb.w	r2, [r3, #32]
   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	62da      	str	r2, [r3, #44]	; 0x2c
   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006b08:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006b0a:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <MX_ADC1_Init+0x98>)
 8006b0c:	629a      	str	r2, [r3, #40]	; 0x28
   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006b0e:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	60da      	str	r2, [r3, #12]
   hadc1.Init.NbrOfConversion = 1;
 8006b14:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	61da      	str	r2, [r3, #28]
   hadc1.Init.DMAContinuousRequests = DISABLE;
 8006b1a:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006b22:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	615a      	str	r2, [r3, #20]
   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006b28:	480b      	ldr	r0, [pc, #44]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006b2a:	f7fa f8af 	bl	8000c8c <HAL_ADC_Init>
      /* Error_Handler(); */
   }

   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
   sConfig.Channel = ADC_CHANNEL_0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	603b      	str	r3, [r7, #0]
   sConfig.Rank = 1;
 8006b32:	2301      	movs	r3, #1
 8006b34:	607b      	str	r3, [r7, #4]
   sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8006b36:	2301      	movs	r3, #1
 8006b38:	60bb      	str	r3, [r7, #8]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4806      	ldr	r0, [pc, #24]	; (8006b58 <MX_ADC1_Init+0x90>)
 8006b40:	f7fa f8e8 	bl	8000d14 <HAL_ADC_ConfigChannel>
   {
      /* Error_Handler(); */
   }

   /* USER CODE BEGIN ADC1_Init 2 */
   ADC1->CR2 |= 1;
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <MX_ADC1_Init+0x94>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4a04      	ldr	r2, [pc, #16]	; (8006b5c <MX_ADC1_Init+0x94>)
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	6093      	str	r3, [r2, #8]
   /* USER CODE END ADC1_Init 2 */

}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	200011d8 	.word	0x200011d8
 8006b5c:	40012000 	.word	0x40012000
 8006b60:	0f000001 	.word	0x0f000001

08006b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
   GPIO_InitTypeDef  GPIO_InitStruct =
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	60da      	str	r2, [r3, #12]
 8006b7a:	611a      	str	r2, [r3, #16]
   {
      0
   };


   if(hadc->Instance == ADC1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a17      	ldr	r2, [pc, #92]	; (8006be0 <HAL_ADC_MspInit+0x7c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d127      	bne.n	8006bd6 <HAL_ADC_MspInit+0x72>
   {
      /* USER CODE BEGIN ADC1_MspInit 0 */

      /* USER CODE END ADC1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_ADC1_CLK_ENABLE();
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <HAL_ADC_MspInit+0x80>)
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	4a15      	ldr	r2, [pc, #84]	; (8006be4 <HAL_ADC_MspInit+0x80>)
 8006b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b94:	6453      	str	r3, [r2, #68]	; 0x44
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <HAL_ADC_MspInit+0x80>)
 8006b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <HAL_ADC_MspInit+0x80>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <HAL_ADC_MspInit+0x80>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <HAL_ADC_MspInit+0x80>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
      /**ADC1 GPIO Configuration
      PA0-WKUP     ------> ADC1_IN0
      */
      GPIO_InitStruct.Pin = Volume_adc_pin_Pin;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61fb      	str	r3, [r7, #28]
      HAL_GPIO_Init(Volume_adc_pin_GPIO_Port, &GPIO_InitStruct);
 8006bca:	f107 0314 	add.w	r3, r7, #20
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4805      	ldr	r0, [pc, #20]	; (8006be8 <HAL_ADC_MspInit+0x84>)
 8006bd2:	f7fa ff4f 	bl	8001a74 <HAL_GPIO_Init>

      /* USER CODE BEGIN ADC1_MspInit 1 */

      /* USER CODE END ADC1_MspInit 1 */
   }
}
 8006bd6:	bf00      	nop
 8006bd8:	3728      	adds	r7, #40	; 0x28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40012000 	.word	0x40012000
 8006be4:	40023800 	.word	0x40023800
 8006be8:	40020000 	.word	0x40020000

08006bec <ADC_GetSingleConv>:


uint16_t ADC_GetSingleConv(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
   /*Start conversion*/
   ADC1->CR2 |= 1 << 30;
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <ADC_GetSingleConv+0x30>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <ADC_GetSingleConv+0x30>)
 8006bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bfa:	6093      	str	r3, [r2, #8]

   /*Wait till conversion done*/
   while(!((ADC1->SR & 0x02)>>1)) ;
 8006bfc:	bf00      	nop
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <ADC_GetSingleConv+0x30>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f9      	beq.n	8006bfe <ADC_GetSingleConv+0x12>

   /*Return the converted data*/
   return ADC1->DR;
 8006c0a:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <ADC_GetSingleConv+0x30>)
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0e:	b29b      	uxth	r3, r3
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40012000 	.word	0x40012000

08006c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef  GPIO_InitStruct =
 8006c26:	f107 0314 	add.w	r3, r7, #20
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	605a      	str	r2, [r3, #4]
 8006c30:	609a      	str	r2, [r3, #8]
 8006c32:	60da      	str	r2, [r3, #12]
 8006c34:	611a      	str	r2, [r3, #16]
      0
   };


   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	4b44      	ldr	r3, [pc, #272]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	4a43      	ldr	r2, [pc, #268]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c40:	f043 0304 	orr.w	r3, r3, #4
 8006c44:	6313      	str	r3, [r2, #48]	; 0x30
 8006c46:	4b41      	ldr	r3, [pc, #260]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	4b3d      	ldr	r3, [pc, #244]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	4a3c      	ldr	r2, [pc, #240]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	6313      	str	r3, [r2, #48]	; 0x30
 8006c62:	4b3a      	ldr	r3, [pc, #232]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	4a35      	ldr	r2, [pc, #212]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c78:	f043 0301 	orr.w	r3, r3, #1
 8006c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c7e:	4b33      	ldr	r3, [pc, #204]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	4a2e      	ldr	r2, [pc, #184]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c94:	f043 0302 	orr.w	r3, r3, #2
 8006c98:	6313      	str	r3, [r2, #48]	; 0x30
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <MX_GPIO_Init+0x12c>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	607b      	str	r3, [r7, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cac:	4828      	ldr	r0, [pc, #160]	; (8006d50 <MX_GPIO_Init+0x130>)
 8006cae:	f7fb f87b 	bl	8001da8 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cb8:	4826      	ldr	r0, [pc, #152]	; (8006d54 <MX_GPIO_Init+0x134>)
 8006cba:	f7fb f875 	bl	8001da8 <HAL_GPIO_WritePin>

   /*Configure GPIO pin : ABS_trigger_Pin */
   GPIO_InitStruct.Pin = ABS_trigger_Pin;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT; /* GPIO_MODE_IT_FALLING; */
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_PULLDOWN;//GPIO_NOPULL;
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(ABS_trigger_GPIO_Port, &GPIO_InitStruct);
 8006cca:	f107 0314 	add.w	r3, r7, #20
 8006cce:	4619      	mov	r1, r3
 8006cd0:	481f      	ldr	r0, [pc, #124]	; (8006d50 <MX_GPIO_Init+0x130>)
 8006cd2:	f7fa fecf 	bl	8001a74 <HAL_GPIO_Init>

   /*Configure GPIO pin : GPIO_MODE_INPUT_Pin */
   GPIO_InitStruct.Pin = OnOff_ABSinfo_Pin;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(OnOff_ABSinfo_GPIO_Port, &GPIO_InitStruct);
 8006ce2:	f107 0314 	add.w	r3, r7, #20
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	481b      	ldr	r0, [pc, #108]	; (8006d58 <MX_GPIO_Init+0x138>)
 8006cea:	f7fa fec3 	bl	8001a74 <HAL_GPIO_Init>

   /*Configure GPIO pin : Sel_audio_option_Pin */
   GPIO_InitStruct.Pin = Sel_audio_option_Pin;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(Sel_audio_option_GPIO_Port, &GPIO_InitStruct);
 8006cfa:	f107 0314 	add.w	r3, r7, #20
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4815      	ldr	r0, [pc, #84]	; (8006d58 <MX_GPIO_Init+0x138>)
 8006d02:	f7fa feb7 	bl	8001a74 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_Connect_LED_Pin */
   GPIO_InitStruct.Pin = Blue_LED_Pin;
 8006d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0a:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d14:	2300      	movs	r3, #0
 8006d16:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(Blue_LED_GPIO_Port, &GPIO_InitStruct);
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	480c      	ldr	r0, [pc, #48]	; (8006d50 <MX_GPIO_Init+0x130>)
 8006d20:	f7fa fea8 	bl	8001a74 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_Connect_LED_Pin */
   GPIO_InitStruct.Pin = Red_LED_Pin;
 8006d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d28:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d32:	2300      	movs	r3, #0
 8006d34:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(Red_LED_GPIO_Port, &GPIO_InitStruct);
 8006d36:	f107 0314 	add.w	r3, r7, #20
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4805      	ldr	r0, [pc, #20]	; (8006d54 <MX_GPIO_Init+0x134>)
 8006d3e:	f7fa fe99 	bl	8001a74 <HAL_GPIO_Init>
}
 8006d42:	bf00      	nop
 8006d44:	3728      	adds	r7, #40	; 0x28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40020400 	.word	0x40020400
 8006d54:	40020000 	.word	0x40020000
 8006d58:	40020800 	.word	0x40020800

08006d5c <RedLed_On>:


/*User Functions*/

void RedLed_On()
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8006d60:	2201      	movs	r2, #1
 8006d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d66:	4802      	ldr	r0, [pc, #8]	; (8006d70 <RedLed_On+0x14>)
 8006d68:	f7fb f81e 	bl	8001da8 <HAL_GPIO_WritePin>
}
 8006d6c:	bf00      	nop
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40020000 	.word	0x40020000

08006d74 <RedLed_Off>:

void RedLed_Off()
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d7e:	4802      	ldr	r0, [pc, #8]	; (8006d88 <RedLed_Off+0x14>)
 8006d80:	f7fb f812 	bl	8001da8 <HAL_GPIO_WritePin>
}
 8006d84:	bf00      	nop
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40020000 	.word	0x40020000

08006d8c <BlueLed_On>:

void BlueLed_On()
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8006d90:	2201      	movs	r2, #1
 8006d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d96:	4802      	ldr	r0, [pc, #8]	; (8006da0 <BlueLed_On+0x14>)
 8006d98:	f7fb f806 	bl	8001da8 <HAL_GPIO_WritePin>
}
 8006d9c:	bf00      	nop
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40020400 	.word	0x40020400

08006da4 <BlueLed_Off>:

void BlueLed_Off()
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dae:	4802      	ldr	r0, [pc, #8]	; (8006db8 <BlueLed_Off+0x14>)
 8006db0:	f7fa fffa 	bl	8001da8 <HAL_GPIO_WritePin>
}
 8006db4:	bf00      	nop
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40020400 	.word	0x40020400

08006dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
   /* FPU settings ------------------------------------------------------------*/
   #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));   /* set CP10 and CP11 Full Access */
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <SystemInit+0x28>)
 8006dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc6:	4a07      	ldr	r2, [pc, #28]	; (8006de4 <SystemInit+0x28>)
 8006dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Configure the Vector Table location add offset address ------------------*/
   #ifdef VECT_TAB_SRAM
   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
   #else
   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006dd0:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <SystemInit+0x28>)
 8006dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006dd6:	609a      	str	r2, [r3, #8]
   #endif
}
 8006dd8:	bf00      	nop
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	e000ed00 	.word	0xe000ed00

08006de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b098      	sub	sp, #96	; 0x60
 8006dec:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef  RCC_OscInitStruct =
 8006dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006df2:	2230      	movs	r2, #48	; 0x30
 8006df4:	2100      	movs	r1, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	f006 f8a3 	bl	800cf42 <memset>
   {
      0
   };
   RCC_ClkInitTypeDef  RCC_ClkInitStruct =
 8006dfc:	f107 031c 	add.w	r3, r7, #28
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	605a      	str	r2, [r3, #4]
 8006e06:	609a      	str	r2, [r3, #8]
 8006e08:	60da      	str	r2, [r3, #12]
 8006e0a:	611a      	str	r2, [r3, #16]
   {
      0
   };
   RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct =
 8006e0c:	f107 0308 	add.w	r3, r7, #8
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	609a      	str	r2, [r3, #8]
 8006e18:	60da      	str	r2, [r3, #12]
 8006e1a:	611a      	str	r2, [r3, #16]
   };


   /** Configure the main internal regulator output voltage
   */
   __HAL_RCC_PWR_CLK_ENABLE();
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	607b      	str	r3, [r7, #4]
 8006e20:	4b29      	ldr	r3, [pc, #164]	; (8006ec8 <SystemClock_Config+0xe0>)
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <SystemClock_Config+0xe0>)
 8006e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e2c:	4b26      	ldr	r3, [pc, #152]	; (8006ec8 <SystemClock_Config+0xe0>)
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	4b23      	ldr	r3, [pc, #140]	; (8006ecc <SystemClock_Config+0xe4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006e44:	4a21      	ldr	r2, [pc, #132]	; (8006ecc <SystemClock_Config+0xe4>)
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	4b1f      	ldr	r3, [pc, #124]	; (8006ecc <SystemClock_Config+0xe4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	683b      	ldr	r3, [r7, #0]
   /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006e5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e62:	2302      	movs	r3, #2
 8006e64:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   RCC_OscInitStruct.PLL.PLLM = 4;
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	653b      	str	r3, [r7, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLN = 168;
 8006e70:	23a8      	movs	r3, #168	; 0xa8
 8006e72:	657b      	str	r3, [r7, #84]	; 0x54
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006e74:	2304      	movs	r3, #4
 8006e76:	65bb      	str	r3, [r7, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLQ = 7;
 8006e78:	2307      	movs	r3, #7
 8006e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fd fd5b 	bl	800493c <HAL_RCC_OscConfig>
      /* Error_Handler(); */
   }

   /** Initializes the CPU, AHB and APB buses clocks
   */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e86:	230f      	movs	r3, #15
 8006e88:	61fb      	str	r3, [r7, #28]
                                 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	623b      	str	r3, [r7, #32]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006e9c:	f107 031c 	add.w	r3, r7, #28
 8006ea0:	2102      	movs	r1, #2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fd ffba 	bl	8004e1c <HAL_RCC_ClockConfig>
   {
      /* Error_Handler(); */
   }

   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	60bb      	str	r3, [r7, #8]
   PeriphClkInitStruct.PLLI2S.PLLI2SN = 153;
 8006eac:	2399      	movs	r3, #153	; 0x99
 8006eae:	60fb      	str	r3, [r7, #12]
   PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
 8006eb0:	2307      	movs	r3, #7
 8006eb2:	613b      	str	r3, [r7, #16]
   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006eb4:	f107 0308 	add.w	r3, r7, #8
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe f9bf 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
   {
      /* Error_Handler(); */
   }
}
 8006ebe:	bf00      	nop
 8006ec0:	3760      	adds	r7, #96	; 0x60
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	40007000 	.word	0x40007000

08006ed0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN Callback 0 */

   /* USER CODE END Callback 0 */
   if (htim->Instance == TIM5)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a04      	ldr	r2, [pc, #16]	; (8006ef0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d101      	bne.n	8006ee6 <HAL_TIM_PeriodElapsedCallback+0x16>
   {
      HAL_IncTick();
 8006ee2:	f7f9 fe91 	bl	8000c08 <HAL_IncTick>
   }

   /* USER CODE BEGIN Callback 1 */

   /* USER CODE END Callback 1 */
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40000c00 	.word	0x40000c00

08006ef4 <HAL_InitTick>:


HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08c      	sub	sp, #48	; 0x30
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef  clkconfig;
   uint32_t            uwTimclock = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t            uwPrescalerValue = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28
   uint32_t            pFLatency;


   /*Configure the TIM5 IRQ priority */
   HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority,3);
 8006f04:	2203      	movs	r2, #3
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	2032      	movs	r0, #50	; 0x32
 8006f0a:	f7fa f9aa 	bl	8001262 <HAL_NVIC_SetPriority>

   /* Enable the TIM5 global Interrupt */
   HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006f0e:	2032      	movs	r0, #50	; 0x32
 8006f10:	f7fa f9c3 	bl	800129a <HAL_NVIC_EnableIRQ>
   /* Enable TIM5 clock */
   __HAL_RCC_TIM5_CLK_ENABLE();
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <HAL_InitTick+0xa4>)
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <HAL_InitTick+0xa4>)
 8006f1e:	f043 0308 	orr.w	r3, r3, #8
 8006f22:	6413      	str	r3, [r2, #64]	; 0x40
 8006f24:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <HAL_InitTick+0xa4>)
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]

   /* Get clock configuration */
   HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006f30:	f107 0210 	add.w	r2, r7, #16
 8006f34:	f107 0314 	add.w	r3, r7, #20
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe f94c 	bl	80051d8 <HAL_RCC_GetClockConfig>

   /* Compute TIM5 clock */
   uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006f40:	f7fe f936 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
 8006f44:	4603      	mov	r3, r0
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c

   /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
   uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <HAL_InitTick+0xa8>)
 8006f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f52:	0c9b      	lsrs	r3, r3, #18
 8006f54:	3b01      	subs	r3, #1
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28

   /* Initialize TIM5 */
   htim5.Instance = TIM5;
 8006f58:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <HAL_InitTick+0xac>)
 8006f5a:	4a12      	ldr	r2, [pc, #72]	; (8006fa4 <HAL_InitTick+0xb0>)
 8006f5c:	601a      	str	r2, [r3, #0]
   + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   + ClockDivision = 0
   + Counter direction = Up
   */
   htim5.Init.Period = (1000000 / 1000) - 1;
 8006f5e:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <HAL_InitTick+0xac>)
 8006f60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006f64:	60da      	str	r2, [r3, #12]
   htim5.Init.Prescaler = uwPrescalerValue;
 8006f66:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <HAL_InitTick+0xac>)
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	6053      	str	r3, [r2, #4]
   htim5.Init.ClockDivision = 0;
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_InitTick+0xac>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	611a      	str	r2, [r3, #16]
   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f72:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <HAL_InitTick+0xac>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	609a      	str	r2, [r3, #8]
   if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8006f78:	4809      	ldr	r0, [pc, #36]	; (8006fa0 <HAL_InitTick+0xac>)
 8006f7a:	f7fe fae3 	bl	8005544 <HAL_TIM_Base_Init>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <HAL_InitTick+0x9a>
   {
      /* Start the TIM time Base generation in interrupt mode */
      return HAL_TIM_Base_Start_IT(&htim5);
 8006f84:	4806      	ldr	r0, [pc, #24]	; (8006fa0 <HAL_InitTick+0xac>)
 8006f86:	f7fe fb12 	bl	80055ae <HAL_TIM_Base_Start_IT>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	e000      	b.n	8006f90 <HAL_InitTick+0x9c>
   }

   /* Return function status */
   return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3730      	adds	r7, #48	; 0x30
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	431bde83 	.word	0x431bde83
 8006fa0:	2000328c 	.word	0x2000328c
 8006fa4:	40000c00 	.word	0x40000c00

08006fa8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006fac:	4904      	ldr	r1, [pc, #16]	; (8006fc0 <MX_FATFS_Init+0x18>)
 8006fae:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <MX_FATFS_Init+0x1c>)
 8006fb0:	f005 fc86 	bl	800c8c0 <FATFS_LinkDriver>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <MX_FATFS_Init+0x20>)
 8006fba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fbc:	bf00      	nop
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	200032cc 	.word	0x200032cc
 8006fc4:	0800d1dc 	.word	0x0800d1dc
 8006fc8:	20005334 	.word	0x20005334

08006fcc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006fd0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	4619      	mov	r1, r3
 8007006:	4808      	ldr	r0, [pc, #32]	; (8007028 <USBH_status+0x34>)
 8007008:	f000 fe11 	bl	8007c2e <USBH_MSC_UnitIsReady>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <USBH_status+0x24>
  {
    res = RES_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
 8007016:	e001      	b.n	800701c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20005338 	.word	0x20005338

0800702c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b094      	sub	sp, #80	; 0x50
 8007030:	af02      	add	r7, sp, #8
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007042:	7bf9      	ldrb	r1, [r7, #15]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4812      	ldr	r0, [pc, #72]	; (8007098 <USBH_read+0x6c>)
 800704e:	f000 fe38 	bl	8007cc2 <USBH_MSC_Read>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d103      	bne.n	8007060 <USBH_read+0x34>
  {
    res = RES_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800705e:	e015      	b.n	800708c <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007060:	f107 0210 	add.w	r2, r7, #16
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	4619      	mov	r1, r3
 8007068:	480b      	ldr	r0, [pc, #44]	; (8007098 <USBH_read+0x6c>)
 800706a:	f000 fe06 	bl	8007c7a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800706e:	7f7b      	ldrb	r3, [r7, #29]
 8007070:	2b28      	cmp	r3, #40	; 0x28
 8007072:	d003      	beq.n	800707c <USBH_read+0x50>
 8007074:	2b3a      	cmp	r3, #58	; 0x3a
 8007076:	d001      	beq.n	800707c <USBH_read+0x50>
 8007078:	2b04      	cmp	r3, #4
 800707a:	d103      	bne.n	8007084 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800707c:	2303      	movs	r3, #3
 800707e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007082:	e003      	b.n	800708c <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800708a:	bf00      	nop
    }
  }

  return res;
 800708c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007090:	4618      	mov	r0, r3
 8007092:	3748      	adds	r7, #72	; 0x48
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20005338 	.word	0x20005338

0800709c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b094      	sub	sp, #80	; 0x50
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80070b2:	7bf9      	ldrb	r1, [r7, #15]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4817      	ldr	r0, [pc, #92]	; (800711c <USBH_write+0x80>)
 80070be:	f000 fe69 	bl	8007d94 <USBH_MSC_Write>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <USBH_write+0x34>
  {
    res = RES_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80070ce:	e01f      	b.n	8007110 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80070d0:	f107 0210 	add.w	r2, r7, #16
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	4619      	mov	r1, r3
 80070d8:	4810      	ldr	r0, [pc, #64]	; (800711c <USBH_write+0x80>)
 80070da:	f000 fdce 	bl	8007c7a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80070de:	7f7b      	ldrb	r3, [r7, #29]
 80070e0:	2b27      	cmp	r3, #39	; 0x27
 80070e2:	d009      	beq.n	80070f8 <USBH_write+0x5c>
 80070e4:	2b27      	cmp	r3, #39	; 0x27
 80070e6:	dc02      	bgt.n	80070ee <USBH_write+0x52>
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d009      	beq.n	8007100 <USBH_write+0x64>
 80070ec:	e00c      	b.n	8007108 <USBH_write+0x6c>
 80070ee:	2b28      	cmp	r3, #40	; 0x28
 80070f0:	d006      	beq.n	8007100 <USBH_write+0x64>
 80070f2:	2b3a      	cmp	r3, #58	; 0x3a
 80070f4:	d004      	beq.n	8007100 <USBH_write+0x64>
 80070f6:	e007      	b.n	8007108 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80070f8:	2302      	movs	r3, #2
 80070fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070fe:	e007      	b.n	8007110 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007100:	2303      	movs	r3, #3
 8007102:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007106:	e003      	b.n	8007110 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800710e:	bf00      	nop
    }
  }

  return res;
 8007110:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007114:	4618      	mov	r0, r3
 8007116:	3748      	adds	r7, #72	; 0x48
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20005338 	.word	0x20005338

08007120 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b090      	sub	sp, #64	; 0x40
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	603a      	str	r2, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
 800712c:	460b      	mov	r3, r1
 800712e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007136:	79bb      	ldrb	r3, [r7, #6]
 8007138:	2b03      	cmp	r3, #3
 800713a:	d852      	bhi.n	80071e2 <USBH_ioctl+0xc2>
 800713c:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <USBH_ioctl+0x24>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	08007155 	.word	0x08007155
 8007148:	0800715d 	.word	0x0800715d
 800714c:	08007187 	.word	0x08007187
 8007150:	080071b3 	.word	0x080071b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800715a:	e045      	b.n	80071e8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800715c:	f107 0208 	add.w	r2, r7, #8
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	4619      	mov	r1, r3
 8007164:	4823      	ldr	r0, [pc, #140]	; (80071f4 <USBH_ioctl+0xd4>)
 8007166:	f000 fd88 	bl	8007c7a <USBH_MSC_GetLUNInfo>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800717c:	e034      	b.n	80071e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007184:	e030      	b.n	80071e8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007186:	f107 0208 	add.w	r2, r7, #8
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	4619      	mov	r1, r3
 800718e:	4819      	ldr	r0, [pc, #100]	; (80071f4 <USBH_ioctl+0xd4>)
 8007190:	f000 fd73 	bl	8007c7a <USBH_MSC_GetLUNInfo>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d107      	bne.n	80071aa <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800719a:	8a3b      	ldrh	r3, [r7, #16]
 800719c:	461a      	mov	r2, r3
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80071a8:	e01e      	b.n	80071e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80071b0:	e01a      	b.n	80071e8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80071b2:	f107 0208 	add.w	r2, r7, #8
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	4619      	mov	r1, r3
 80071ba:	480e      	ldr	r0, [pc, #56]	; (80071f4 <USBH_ioctl+0xd4>)
 80071bc:	f000 fd5d 	bl	8007c7a <USBH_MSC_GetLUNInfo>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80071c6:	8a3b      	ldrh	r3, [r7, #16]
 80071c8:	0a5b      	lsrs	r3, r3, #9
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80071d8:	e006      	b.n	80071e8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80071e0:	e002      	b.n	80071e8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80071e2:	2304      	movs	r3, #4
 80071e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80071e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3740      	adds	r7, #64	; 0x40
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20005338 	.word	0x20005338

080071f8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b089      	sub	sp, #36	; 0x24
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007206:	7919      	ldrb	r1, [r3, #4]
 8007208:	2350      	movs	r3, #80	; 0x50
 800720a:	2206      	movs	r2, #6
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 fc4f 	bl	8008ab0 <USBH_FindInterface>
 8007212:	4603      	mov	r3, r0
 8007214:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	2bff      	cmp	r3, #255	; 0xff
 800721a:	d002      	beq.n	8007222 <USBH_MSC_InterfaceInit+0x2a>
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d901      	bls.n	8007226 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007222:	2302      	movs	r3, #2
 8007224:	e0ef      	b.n	8007406 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fc24 	bl	8008a78 <USBH_SelectInterface>
 8007230:	4603      	mov	r3, r0
 8007232:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800723a:	2302      	movs	r3, #2
 800723c:	e0e3      	b.n	8007406 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007244:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007248:	f005 fe60 	bl	800cf0c <malloc>
 800724c:	4603      	mov	r3, r0
 800724e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007260:	2302      	movs	r3, #2
 8007262:	e0d0      	b.n	8007406 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007268:	2100      	movs	r1, #0
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	f005 fe69 	bl	800cf42 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	211a      	movs	r1, #26
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	b25b      	sxtb	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	da16      	bge.n	80072b6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	211a      	movs	r1, #26
 800728e:	fb01 f303 	mul.w	r3, r1, r3
 8007292:	4413      	add	r3, r2
 8007294:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	211a      	movs	r1, #26
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	815a      	strh	r2, [r3, #10]
 80072b4:	e015      	b.n	80072e2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	211a      	movs	r1, #26
 80072bc:	fb01 f303 	mul.w	r3, r1, r3
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072c6:	781a      	ldrb	r2, [r3, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	211a      	movs	r1, #26
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072dc:	881a      	ldrh	r2, [r3, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	211a      	movs	r1, #26
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	b25b      	sxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	da16      	bge.n	8007328 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	211a      	movs	r1, #26
 8007300:	fb01 f303 	mul.w	r3, r1, r3
 8007304:	4413      	add	r3, r2
 8007306:	f203 3356 	addw	r3, r3, #854	; 0x356
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	211a      	movs	r1, #26
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	4413      	add	r3, r2
 800731c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007320:	881a      	ldrh	r2, [r3, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	815a      	strh	r2, [r3, #10]
 8007326:	e015      	b.n	8007354 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	211a      	movs	r1, #26
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	4413      	add	r3, r2
 8007334:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	211a      	movs	r1, #26
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	4413      	add	r3, r2
 800734a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800734e:	881a      	ldrh	r2, [r3, #0]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2200      	movs	r2, #0
 8007358:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	799b      	ldrb	r3, [r3, #6]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f002 fdc2 	bl	8009ef6 <USBH_AllocPipe>
 8007372:	4603      	mov	r3, r0
 8007374:	461a      	mov	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	79db      	ldrb	r3, [r3, #7]
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f002 fdb8 	bl	8009ef6 <USBH_AllocPipe>
 8007386:	4603      	mov	r3, r0
 8007388:	461a      	mov	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fda4 	bl	8007edc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	7959      	ldrb	r1, [r3, #5]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	7998      	ldrb	r0, [r3, #6]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	8912      	ldrh	r2, [r2, #8]
 80073ac:	9202      	str	r2, [sp, #8]
 80073ae:	2202      	movs	r2, #2
 80073b0:	9201      	str	r2, [sp, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4623      	mov	r3, r4
 80073b6:	4602      	mov	r2, r0
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f002 fd6d 	bl	8009e98 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	7919      	ldrb	r1, [r3, #4]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	79d8      	ldrb	r0, [r3, #7]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	8952      	ldrh	r2, [r2, #10]
 80073d6:	9202      	str	r2, [sp, #8]
 80073d8:	2202      	movs	r2, #2
 80073da:	9201      	str	r2, [sp, #4]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4623      	mov	r3, r4
 80073e0:	4602      	mov	r2, r0
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f002 fd58 	bl	8009e98 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	791b      	ldrb	r3, [r3, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f005 fcca 	bl	800cd8a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	795b      	ldrb	r3, [r3, #5]
 80073fa:	2200      	movs	r2, #0
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f005 fcc3 	bl	800cd8a <USBH_LL_SetToggle>

  return USBH_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	bd90      	pop	{r4, r7, pc}

0800740e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	795b      	ldrb	r3, [r3, #5]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00e      	beq.n	8007446 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	795b      	ldrb	r3, [r3, #5]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f002 fd51 	bl	8009ed6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	795b      	ldrb	r3, [r3, #5]
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f002 fd7c 	bl	8009f38 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	791b      	ldrb	r3, [r3, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	791b      	ldrb	r3, [r3, #4]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f002 fd3e 	bl	8009ed6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	791b      	ldrb	r3, [r3, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f002 fd69 	bl	8009f38 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	4618      	mov	r0, r3
 8007482:	f005 fd4b 	bl	800cf1c <free>
    phost->pActiveClass->pData = 0U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800748c:	2200      	movs	r2, #0
 800748e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074ac:	2301      	movs	r3, #1
 80074ae:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	7b9b      	ldrb	r3, [r3, #14]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d004      	beq.n	80074c2 <USBH_MSC_ClassRequest+0x28>
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d03e      	beq.n	800753a <USBH_MSC_ClassRequest+0xa0>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d000      	beq.n	80074c2 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80074c0:	e04a      	b.n	8007558 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fcea 	bl	8007ea0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d104      	bne.n	80074e0 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d135      	bne.n	8007552 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d804      	bhi.n	80074f8 <USBH_MSC_ClassRequest+0x5e>
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	3301      	adds	r3, #1
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	e000      	b.n	80074fa <USBH_MSC_ClassRequest+0x60>
 80074f8:	2202      	movs	r2, #2
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80074fe:	2300      	movs	r3, #0
 8007500:	73bb      	strb	r3, [r7, #14]
 8007502:	e014      	b.n	800752e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	2134      	movs	r1, #52	; 0x34
 800750a:	fb01 f303 	mul.w	r3, r1, r3
 800750e:	4413      	add	r3, r2
 8007510:	3392      	adds	r3, #146	; 0x92
 8007512:	2202      	movs	r2, #2
 8007514:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	2134      	movs	r1, #52	; 0x34
 800751c:	fb01 f303 	mul.w	r3, r1, r3
 8007520:	4413      	add	r3, r2
 8007522:	33c1      	adds	r3, #193	; 0xc1
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	3301      	adds	r3, #1
 800752c:	73bb      	strb	r3, [r7, #14]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	7bba      	ldrb	r2, [r7, #14]
 8007534:	429a      	cmp	r2, r3
 8007536:	d3e5      	bcc.n	8007504 <USBH_MSC_ClassRequest+0x6a>
      break;
 8007538:	e00b      	b.n	8007552 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800753a:	2100      	movs	r1, #0
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f002 f878 	bl	8009632 <USBH_ClrFeature>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	7bda      	ldrb	r2, [r3, #15]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	739a      	strb	r2, [r3, #14]
      break;
 8007550:	e001      	b.n	8007556 <USBH_MSC_ClassRequest+0xbc>
      break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <USBH_MSC_ClassRequest+0xbe>
      break;
 8007556:	bf00      	nop
  }

  return status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007576:	2301      	movs	r3, #1
 8007578:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800757a:	2301      	movs	r3, #1
 800757c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800757e:	2301      	movs	r3, #1
 8007580:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	7b1b      	ldrb	r3, [r3, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <USBH_MSC_Process+0x2e>
 800758a:	2b01      	cmp	r3, #1
 800758c:	f000 8271 	beq.w	8007a72 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007590:	e272      	b.n	8007a78 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	429a      	cmp	r2, r3
 80075a0:	f080 824f 	bcs.w	8007a42 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075aa:	4619      	mov	r1, r3
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	2334      	movs	r3, #52	; 0x34
 80075b0:	fb03 f301 	mul.w	r3, r3, r1
 80075b4:	4413      	add	r3, r2
 80075b6:	3391      	adds	r3, #145	; 0x91
 80075b8:	2201      	movs	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075c2:	4619      	mov	r1, r3
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	2334      	movs	r3, #52	; 0x34
 80075c8:	fb03 f301 	mul.w	r3, r3, r1
 80075cc:	4413      	add	r3, r2
 80075ce:	3390      	adds	r3, #144	; 0x90
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	f200 8243 	bhi.w	8007a5e <USBH_MSC_Process+0x4fa>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <USBH_MSC_Process+0x7c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	08007605 	.word	0x08007605
 80075e4:	08007a5f 	.word	0x08007a5f
 80075e8:	080076cd 	.word	0x080076cd
 80075ec:	08007851 	.word	0x08007851
 80075f0:	0800762b 	.word	0x0800762b
 80075f4:	0800791d 	.word	0x0800791d
 80075f8:	08007a5f 	.word	0x08007a5f
 80075fc:	08007a5f 	.word	0x08007a5f
 8007600:	08007a31 	.word	0x08007a31
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800760a:	4619      	mov	r1, r3
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	2334      	movs	r3, #52	; 0x34
 8007610:	fb03 f301 	mul.w	r3, r3, r1
 8007614:	4413      	add	r3, r2
 8007616:	3390      	adds	r3, #144	; 0x90
 8007618:	2204      	movs	r2, #4
 800761a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007628:	e222      	b.n	8007a70 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007630:	b2d9      	uxtb	r1, r3
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007638:	461a      	mov	r2, r3
 800763a:	2334      	movs	r3, #52	; 0x34
 800763c:	fb03 f302 	mul.w	r3, r3, r2
 8007640:	3398      	adds	r3, #152	; 0x98
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4413      	add	r3, r2
 8007646:	3307      	adds	r3, #7
 8007648:	461a      	mov	r2, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 ff68 	bl	8008520 <USBH_MSC_SCSI_Inquiry>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007660:	4619      	mov	r1, r3
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	2334      	movs	r3, #52	; 0x34
 8007666:	fb03 f301 	mul.w	r3, r3, r1
 800766a:	4413      	add	r3, r2
 800766c:	3390      	adds	r3, #144	; 0x90
 800766e:	2202      	movs	r2, #2
 8007670:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d10c      	bne.n	8007692 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800767e:	4619      	mov	r1, r3
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	2334      	movs	r3, #52	; 0x34
 8007684:	fb03 f301 	mul.w	r3, r3, r1
 8007688:	4413      	add	r3, r2
 800768a:	3390      	adds	r3, #144	; 0x90
 800768c:	2205      	movs	r2, #5
 800768e:	701a      	strb	r2, [r3, #0]
            break;
 8007690:	e1e7      	b.n	8007a62 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b04      	cmp	r3, #4
 8007696:	f040 81e4 	bne.w	8007a62 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076a0:	4619      	mov	r1, r3
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	2334      	movs	r3, #52	; 0x34
 80076a6:	fb03 f301 	mul.w	r3, r3, r1
 80076aa:	4413      	add	r3, r2
 80076ac:	3390      	adds	r3, #144	; 0x90
 80076ae:	2201      	movs	r2, #1
 80076b0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076b8:	4619      	mov	r1, r3
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	2334      	movs	r3, #52	; 0x34
 80076be:	fb03 f301 	mul.w	r3, r3, r1
 80076c2:	4413      	add	r3, r2
 80076c4:	3391      	adds	r3, #145	; 0x91
 80076c6:	2202      	movs	r2, #2
 80076c8:	701a      	strb	r2, [r3, #0]
            break;
 80076ca:	e1ca      	b.n	8007a62 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fe64 	bl	80083a4 <USBH_MSC_SCSI_TestUnitReady>
 80076dc:	4603      	mov	r3, r0
 80076de:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d149      	bne.n	800777a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ec:	4619      	mov	r1, r3
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	2334      	movs	r3, #52	; 0x34
 80076f2:	fb03 f301 	mul.w	r3, r3, r1
 80076f6:	4413      	add	r3, r2
 80076f8:	3392      	adds	r3, #146	; 0x92
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00c      	beq.n	800771a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007706:	4619      	mov	r1, r3
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	2334      	movs	r3, #52	; 0x34
 800770c:	fb03 f301 	mul.w	r3, r3, r1
 8007710:	4413      	add	r3, r2
 8007712:	33c1      	adds	r3, #193	; 0xc1
 8007714:	2201      	movs	r2, #1
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	e00b      	b.n	8007732 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007720:	4619      	mov	r1, r3
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	2334      	movs	r3, #52	; 0x34
 8007726:	fb03 f301 	mul.w	r3, r3, r1
 800772a:	4413      	add	r3, r2
 800772c:	33c1      	adds	r3, #193	; 0xc1
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007738:	4619      	mov	r1, r3
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	2334      	movs	r3, #52	; 0x34
 800773e:	fb03 f301 	mul.w	r3, r3, r1
 8007742:	4413      	add	r3, r2
 8007744:	3390      	adds	r3, #144	; 0x90
 8007746:	2203      	movs	r2, #3
 8007748:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007750:	4619      	mov	r1, r3
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	2334      	movs	r3, #52	; 0x34
 8007756:	fb03 f301 	mul.w	r3, r3, r1
 800775a:	4413      	add	r3, r2
 800775c:	3391      	adds	r3, #145	; 0x91
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007768:	4619      	mov	r1, r3
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	2334      	movs	r3, #52	; 0x34
 800776e:	fb03 f301 	mul.w	r3, r3, r1
 8007772:	4413      	add	r3, r2
 8007774:	3392      	adds	r3, #146	; 0x92
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d14a      	bne.n	8007816 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007786:	4619      	mov	r1, r3
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	2334      	movs	r3, #52	; 0x34
 800778c:	fb03 f301 	mul.w	r3, r3, r1
 8007790:	4413      	add	r3, r2
 8007792:	3392      	adds	r3, #146	; 0x92
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d00c      	beq.n	80077b4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077a0:	4619      	mov	r1, r3
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	2334      	movs	r3, #52	; 0x34
 80077a6:	fb03 f301 	mul.w	r3, r3, r1
 80077aa:	4413      	add	r3, r2
 80077ac:	33c1      	adds	r3, #193	; 0xc1
 80077ae:	2201      	movs	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	e00b      	b.n	80077cc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077ba:	4619      	mov	r1, r3
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	2334      	movs	r3, #52	; 0x34
 80077c0:	fb03 f301 	mul.w	r3, r3, r1
 80077c4:	4413      	add	r3, r2
 80077c6:	33c1      	adds	r3, #193	; 0xc1
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077d2:	4619      	mov	r1, r3
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	2334      	movs	r3, #52	; 0x34
 80077d8:	fb03 f301 	mul.w	r3, r3, r1
 80077dc:	4413      	add	r3, r2
 80077de:	3390      	adds	r3, #144	; 0x90
 80077e0:	2205      	movs	r2, #5
 80077e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077ea:	4619      	mov	r1, r3
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	2334      	movs	r3, #52	; 0x34
 80077f0:	fb03 f301 	mul.w	r3, r3, r1
 80077f4:	4413      	add	r3, r2
 80077f6:	3391      	adds	r3, #145	; 0x91
 80077f8:	2201      	movs	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007802:	4619      	mov	r1, r3
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	2334      	movs	r3, #52	; 0x34
 8007808:	fb03 f301 	mul.w	r3, r3, r1
 800780c:	4413      	add	r3, r2
 800780e:	3392      	adds	r3, #146	; 0x92
 8007810:	2202      	movs	r2, #2
 8007812:	701a      	strb	r2, [r3, #0]
            break;
 8007814:	e127      	b.n	8007a66 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	2b04      	cmp	r3, #4
 800781a:	f040 8124 	bne.w	8007a66 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007824:	4619      	mov	r1, r3
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	2334      	movs	r3, #52	; 0x34
 800782a:	fb03 f301 	mul.w	r3, r3, r1
 800782e:	4413      	add	r3, r2
 8007830:	3390      	adds	r3, #144	; 0x90
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800783c:	4619      	mov	r1, r3
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	2334      	movs	r3, #52	; 0x34
 8007842:	fb03 f301 	mul.w	r3, r3, r1
 8007846:	4413      	add	r3, r2
 8007848:	3391      	adds	r3, #145	; 0x91
 800784a:	2202      	movs	r2, #2
 800784c:	701a      	strb	r2, [r3, #0]
            break;
 800784e:	e10a      	b.n	8007a66 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007856:	b2d9      	uxtb	r1, r3
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800785e:	461a      	mov	r2, r3
 8007860:	2334      	movs	r3, #52	; 0x34
 8007862:	fb03 f302 	mul.w	r3, r3, r2
 8007866:	3390      	adds	r3, #144	; 0x90
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4413      	add	r3, r2
 800786c:	3304      	adds	r3, #4
 800786e:	461a      	mov	r2, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fdda 	bl	800842a <USBH_MSC_SCSI_ReadCapacity>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d120      	bne.n	80078c2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007886:	4619      	mov	r1, r3
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	2334      	movs	r3, #52	; 0x34
 800788c:	fb03 f301 	mul.w	r3, r3, r1
 8007890:	4413      	add	r3, r2
 8007892:	3390      	adds	r3, #144	; 0x90
 8007894:	2201      	movs	r2, #1
 8007896:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800789e:	4619      	mov	r1, r3
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	2334      	movs	r3, #52	; 0x34
 80078a4:	fb03 f301 	mul.w	r3, r3, r1
 80078a8:	4413      	add	r3, r2
 80078aa:	3391      	adds	r3, #145	; 0x91
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078b6:	3301      	adds	r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80078c0:	e0d3      	b.n	8007a6a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d10c      	bne.n	80078e2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078ce:	4619      	mov	r1, r3
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	2334      	movs	r3, #52	; 0x34
 80078d4:	fb03 f301 	mul.w	r3, r3, r1
 80078d8:	4413      	add	r3, r2
 80078da:	3390      	adds	r3, #144	; 0x90
 80078dc:	2205      	movs	r2, #5
 80078de:	701a      	strb	r2, [r3, #0]
            break;
 80078e0:	e0c3      	b.n	8007a6a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	f040 80c0 	bne.w	8007a6a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078f0:	4619      	mov	r1, r3
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	2334      	movs	r3, #52	; 0x34
 80078f6:	fb03 f301 	mul.w	r3, r3, r1
 80078fa:	4413      	add	r3, r2
 80078fc:	3390      	adds	r3, #144	; 0x90
 80078fe:	2201      	movs	r2, #1
 8007900:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007908:	4619      	mov	r1, r3
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	2334      	movs	r3, #52	; 0x34
 800790e:	fb03 f301 	mul.w	r3, r3, r1
 8007912:	4413      	add	r3, r2
 8007914:	3391      	adds	r3, #145	; 0x91
 8007916:	2202      	movs	r2, #2
 8007918:	701a      	strb	r2, [r3, #0]
            break;
 800791a:	e0a6      	b.n	8007a6a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007922:	b2d9      	uxtb	r1, r3
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800792a:	461a      	mov	r2, r3
 800792c:	2334      	movs	r3, #52	; 0x34
 800792e:	fb03 f302 	mul.w	r3, r3, r2
 8007932:	3398      	adds	r3, #152	; 0x98
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4413      	add	r3, r2
 8007938:	3304      	adds	r3, #4
 800793a:	461a      	mov	r2, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fe94 	bl	800866a <USBH_MSC_SCSI_RequestSense>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d145      	bne.n	80079d8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007952:	4619      	mov	r1, r3
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	2334      	movs	r3, #52	; 0x34
 8007958:	fb03 f301 	mul.w	r3, r3, r1
 800795c:	4413      	add	r3, r2
 800795e:	339c      	adds	r3, #156	; 0x9c
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b06      	cmp	r3, #6
 8007964:	d00c      	beq.n	8007980 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800796c:	4619      	mov	r1, r3
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	2334      	movs	r3, #52	; 0x34
 8007972:	fb03 f301 	mul.w	r3, r3, r1
 8007976:	4413      	add	r3, r2
 8007978:	339c      	adds	r3, #156	; 0x9c
 800797a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800797c:	2b02      	cmp	r3, #2
 800797e:	d117      	bne.n	80079b0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007992:	4293      	cmp	r3, r2
 8007994:	d80c      	bhi.n	80079b0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800799c:	4619      	mov	r1, r3
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	2334      	movs	r3, #52	; 0x34
 80079a2:	fb03 f301 	mul.w	r3, r3, r1
 80079a6:	4413      	add	r3, r2
 80079a8:	3390      	adds	r3, #144	; 0x90
 80079aa:	2202      	movs	r2, #2
 80079ac:	701a      	strb	r2, [r3, #0]
                  break;
 80079ae:	e05f      	b.n	8007a70 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079b6:	4619      	mov	r1, r3
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	2334      	movs	r3, #52	; 0x34
 80079bc:	fb03 f301 	mul.w	r3, r3, r1
 80079c0:	4413      	add	r3, r2
 80079c2:	3390      	adds	r3, #144	; 0x90
 80079c4:	2201      	movs	r2, #1
 80079c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079ce:	3301      	adds	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d10c      	bne.n	80079f8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079e4:	4619      	mov	r1, r3
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	2334      	movs	r3, #52	; 0x34
 80079ea:	fb03 f301 	mul.w	r3, r3, r1
 80079ee:	4413      	add	r3, r2
 80079f0:	3390      	adds	r3, #144	; 0x90
 80079f2:	2208      	movs	r2, #8
 80079f4:	701a      	strb	r2, [r3, #0]
            break;
 80079f6:	e03a      	b.n	8007a6e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d137      	bne.n	8007a6e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a04:	4619      	mov	r1, r3
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	2334      	movs	r3, #52	; 0x34
 8007a0a:	fb03 f301 	mul.w	r3, r3, r1
 8007a0e:	4413      	add	r3, r2
 8007a10:	3390      	adds	r3, #144	; 0x90
 8007a12:	2201      	movs	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	2334      	movs	r3, #52	; 0x34
 8007a22:	fb03 f301 	mul.w	r3, r3, r1
 8007a26:	4413      	add	r3, r2
 8007a28:	3391      	adds	r3, #145	; 0x91
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	701a      	strb	r2, [r3, #0]
            break;
 8007a2e:	e01e      	b.n	8007a6e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a36:	3301      	adds	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007a40:	e016      	b.n	8007a70 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a56:	2102      	movs	r1, #2
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
      break;
 8007a5c:	e00c      	b.n	8007a78 <USBH_MSC_Process+0x514>
            break;
 8007a5e:	bf00      	nop
 8007a60:	e00a      	b.n	8007a78 <USBH_MSC_Process+0x514>
            break;
 8007a62:	bf00      	nop
 8007a64:	e008      	b.n	8007a78 <USBH_MSC_Process+0x514>
            break;
 8007a66:	bf00      	nop
 8007a68:	e006      	b.n	8007a78 <USBH_MSC_Process+0x514>
            break;
 8007a6a:	bf00      	nop
 8007a6c:	e004      	b.n	8007a78 <USBH_MSC_Process+0x514>
            break;
 8007a6e:	bf00      	nop
      break;
 8007a70:	e002      	b.n	8007a78 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]
      break;
 8007a76:	bf00      	nop
  }
  return error;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop

08007a84 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b088      	sub	sp, #32
 8007a9e:	af02      	add	r7, sp, #8
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	2134      	movs	r1, #52	; 0x34
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	3390      	adds	r3, #144	; 0x90
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b06      	cmp	r3, #6
 8007aca:	d004      	beq.n	8007ad6 <USBH_MSC_RdWrProcess+0x3c>
 8007acc:	2b07      	cmp	r3, #7
 8007ace:	d037      	beq.n	8007b40 <USBH_MSC_RdWrProcess+0xa6>
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	d06a      	beq.n	8007baa <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8007ad4:	e0a6      	b.n	8007c24 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007ad6:	78f9      	ldrb	r1, [r7, #3]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2300      	movs	r3, #0
 8007ade:	2200      	movs	r2, #0
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fea6 	bl	8008832 <USBH_MSC_SCSI_Read>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10b      	bne.n	8007b08 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	2134      	movs	r1, #52	; 0x34
 8007af6:	fb01 f303 	mul.w	r3, r1, r3
 8007afa:	4413      	add	r3, r2
 8007afc:	3390      	adds	r3, #144	; 0x90
 8007afe:	2201      	movs	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75fb      	strb	r3, [r7, #23]
      break;
 8007b06:	e088      	b.n	8007c1a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d109      	bne.n	8007b22 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007b0e:	78fb      	ldrb	r3, [r7, #3]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	2134      	movs	r1, #52	; 0x34
 8007b14:	fb01 f303 	mul.w	r3, r1, r3
 8007b18:	4413      	add	r3, r2
 8007b1a:	3390      	adds	r3, #144	; 0x90
 8007b1c:	2205      	movs	r2, #5
 8007b1e:	701a      	strb	r2, [r3, #0]
      break;
 8007b20:	e07b      	b.n	8007c1a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d178      	bne.n	8007c1a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	2134      	movs	r1, #52	; 0x34
 8007b2e:	fb01 f303 	mul.w	r3, r1, r3
 8007b32:	4413      	add	r3, r2
 8007b34:	3390      	adds	r3, #144	; 0x90
 8007b36:	2208      	movs	r2, #8
 8007b38:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3e:	e06c      	b.n	8007c1a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007b40:	78f9      	ldrb	r1, [r7, #3]
 8007b42:	2300      	movs	r3, #0
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	2300      	movs	r3, #0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fe06 	bl	800875c <USBH_MSC_SCSI_Write>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	2134      	movs	r1, #52	; 0x34
 8007b60:	fb01 f303 	mul.w	r3, r1, r3
 8007b64:	4413      	add	r3, r2
 8007b66:	3390      	adds	r3, #144	; 0x90
 8007b68:	2201      	movs	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b70:	e055      	b.n	8007c1e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d109      	bne.n	8007b8c <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	2134      	movs	r1, #52	; 0x34
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	4413      	add	r3, r2
 8007b84:	3390      	adds	r3, #144	; 0x90
 8007b86:	2205      	movs	r2, #5
 8007b88:	701a      	strb	r2, [r3, #0]
      break;
 8007b8a:	e048      	b.n	8007c1e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d145      	bne.n	8007c1e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	2134      	movs	r1, #52	; 0x34
 8007b98:	fb01 f303 	mul.w	r3, r1, r3
 8007b9c:	4413      	add	r3, r2
 8007b9e:	3390      	adds	r3, #144	; 0x90
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba8:	e039      	b.n	8007c1e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	2234      	movs	r2, #52	; 0x34
 8007bae:	fb02 f303 	mul.w	r3, r2, r3
 8007bb2:	3398      	adds	r3, #152	; 0x98
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	1d1a      	adds	r2, r3, #4
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fd53 	bl	800866a <USBH_MSC_SCSI_RequestSense>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d113      	bne.n	8007bf6 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007bce:	78fb      	ldrb	r3, [r7, #3]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	2134      	movs	r1, #52	; 0x34
 8007bd4:	fb01 f303 	mul.w	r3, r1, r3
 8007bd8:	4413      	add	r3, r2
 8007bda:	3390      	adds	r3, #144	; 0x90
 8007bdc:	2201      	movs	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	2134      	movs	r1, #52	; 0x34
 8007be6:	fb01 f303 	mul.w	r3, r1, r3
 8007bea:	4413      	add	r3, r2
 8007bec:	3391      	adds	r3, #145	; 0x91
 8007bee:	2202      	movs	r2, #2
 8007bf0:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d012      	beq.n	8007c22 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d10f      	bne.n	8007c22 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	2134      	movs	r1, #52	; 0x34
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3390      	adds	r3, #144	; 0x90
 8007c10:	2208      	movs	r2, #8
 8007c12:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007c14:	2302      	movs	r3, #2
 8007c16:	75fb      	strb	r3, [r7, #23]
      break;
 8007c18:	e003      	b.n	8007c22 <USBH_MSC_RdWrProcess+0x188>
      break;
 8007c1a:	bf00      	nop
 8007c1c:	e002      	b.n	8007c24 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8007c1e:	bf00      	nop
 8007c20:	e000      	b.n	8007c24 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8007c22:	bf00      	nop

  }
  return error;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b0b      	cmp	r3, #11
 8007c4c:	d10c      	bne.n	8007c68 <USBH_MSC_UnitIsReady+0x3a>
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	2134      	movs	r1, #52	; 0x34
 8007c54:	fb01 f303 	mul.w	r3, r1, r3
 8007c58:	4413      	add	r3, r2
 8007c5a:	3391      	adds	r3, #145	; 0x91
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007c62:	2301      	movs	r3, #1
 8007c64:	73fb      	strb	r3, [r7, #15]
 8007c66:	e001      	b.n	8007c6c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b086      	sub	sp, #24
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	460b      	mov	r3, r1
 8007c84:	607a      	str	r2, [r7, #4]
 8007c86:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b0b      	cmp	r3, #11
 8007c9a:	d10d      	bne.n	8007cb8 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	2234      	movs	r2, #52	; 0x34
 8007ca0:	fb02 f303 	mul.w	r3, r2, r3
 8007ca4:	3390      	adds	r3, #144	; 0x90
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	2234      	movs	r2, #52	; 0x34
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f005 f93c 	bl	800cf2c <memcpy>
    return USBH_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e000      	b.n	8007cba <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007cb8:	2302      	movs	r3, #2
  }
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b088      	sub	sp, #32
 8007cc6:	af02      	add	r7, sp, #8
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	603b      	str	r3, [r7, #0]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00e      	beq.n	8007d06 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007cee:	2b0b      	cmp	r3, #11
 8007cf0:	d109      	bne.n	8007d06 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007cf2:	7afb      	ldrb	r3, [r7, #11]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	2134      	movs	r1, #52	; 0x34
 8007cf8:	fb01 f303 	mul.w	r3, r1, r3
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3390      	adds	r3, #144	; 0x90
 8007d00:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d001      	beq.n	8007d0a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007d06:	2302      	movs	r3, #2
 8007d08:	e040      	b.n	8007d8c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2206      	movs	r2, #6
 8007d0e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	2134      	movs	r1, #52	; 0x34
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3390      	adds	r3, #144	; 0x90
 8007d1e:	2206      	movs	r2, #6
 8007d20:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007d2c:	7af9      	ldrb	r1, [r7, #11]
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fd7b 	bl	8008832 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d42:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007d44:	e016      	b.n	8007d74 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	f242 7110 	movw	r1, #10000	; 0x2710
 8007d56:	fb01 f303 	mul.w	r3, r1, r3
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d805      	bhi.n	8007d6a <USBH_MSC_Read+0xa8>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007d70:	2302      	movs	r3, #2
 8007d72:	e00b      	b.n	8007d8c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	4619      	mov	r1, r3
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fe8e 	bl	8007a9a <USBH_MSC_RdWrProcess>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d0e0      	beq.n	8007d46 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2201      	movs	r2, #1
 8007d88:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	460b      	mov	r3, r1
 8007da2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00e      	beq.n	8007dd8 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007dc0:	2b0b      	cmp	r3, #11
 8007dc2:	d109      	bne.n	8007dd8 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	2134      	movs	r1, #52	; 0x34
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	4413      	add	r3, r2
 8007dd0:	3390      	adds	r3, #144	; 0x90
 8007dd2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d001      	beq.n	8007ddc <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e040      	b.n	8007e5e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2207      	movs	r2, #7
 8007de0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007de2:	7afb      	ldrb	r3, [r7, #11]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	2134      	movs	r1, #52	; 0x34
 8007de8:	fb01 f303 	mul.w	r3, r1, r3
 8007dec:	4413      	add	r3, r2
 8007dee:	3390      	adds	r3, #144	; 0x90
 8007df0:	2207      	movs	r2, #7
 8007df2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007dfe:	7af9      	ldrb	r1, [r7, #11]
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fca7 	bl	800875c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e14:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e16:	e016      	b.n	8007e46 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1ad2      	subs	r2, r2, r3
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	f242 7110 	movw	r1, #10000	; 0x2710
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d805      	bhi.n	8007e3c <USBH_MSC_Write+0xa8>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007e42:	2302      	movs	r3, #2
 8007e44:	e00b      	b.n	8007e5e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff fe25 	bl	8007a9a <USBH_MSC_RdWrProcess>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d0e0      	beq.n	8007e18 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2221      	movs	r2, #33	; 0x21
 8007e72:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	22ff      	movs	r2, #255	; 0xff
 8007e78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 fdae 	bl	80099f2 <USBH_CtlReq>
 8007e96:	4603      	mov	r3, r0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	22a1      	movs	r2, #161	; 0xa1
 8007eae:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	22fe      	movs	r2, #254	; 0xfe
 8007eb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007ec8:	2201      	movs	r2, #1
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 fd90 	bl	80099f2 <USBH_CtlReq>
 8007ed2:	4603      	mov	r3, r0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a09      	ldr	r2, [pc, #36]	; (8007f18 <USBH_MSC_BOT_Init+0x3c>)
 8007ef2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4a09      	ldr	r2, [pc, #36]	; (8007f1c <USBH_MSC_BOT_Init+0x40>)
 8007ef8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	43425355 	.word	0x43425355
 8007f1c:	20304050 	.word	0x20304050

08007f20 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007f30:	2301      	movs	r3, #1
 8007f32:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007f34:	2301      	movs	r3, #1
 8007f36:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f50:	3b01      	subs	r3, #1
 8007f52:	2b0a      	cmp	r3, #10
 8007f54:	f200 81a1 	bhi.w	800829a <USBH_MSC_BOT_Process+0x37a>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <USBH_MSC_BOT_Process+0x40>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	08007fb7 	.word	0x08007fb7
 8007f68:	08008021 	.word	0x08008021
 8007f6c:	0800803f 	.word	0x0800803f
 8007f70:	080080c3 	.word	0x080080c3
 8007f74:	080080e7 	.word	0x080080e7
 8007f78:	08008181 	.word	0x08008181
 8007f7c:	0800819d 	.word	0x0800819d
 8007f80:	080081ef 	.word	0x080081ef
 8007f84:	0800821f 	.word	0x0800821f
 8007f88:	08008281 	.word	0x08008281
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	795a      	ldrb	r2, [r3, #5]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	4613      	mov	r3, r2
 8007fac:	221f      	movs	r2, #31
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 ff2f 	bl	8009e12 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007fb4:	e180      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	795b      	ldrb	r3, [r3, #5]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f004 fec3 	bl	800cd48 <USBH_LL_GetURBState>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007fc6:	7d3b      	ldrb	r3, [r7, #20]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d118      	bne.n	8007ffe <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00f      	beq.n	8007ff4 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007fda:	b25b      	sxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da04      	bge.n	8007fea <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2203      	movs	r2, #3
 8007fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fe8:	e159      	b.n	800829e <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2205      	movs	r2, #5
 8007fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ff2:	e154      	b.n	800829e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	2207      	movs	r2, #7
 8007ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ffc:	e14f      	b.n	800829e <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ffe:	7d3b      	ldrb	r3, [r7, #20]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d104      	bne.n	800800e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800800c:	e147      	b.n	800829e <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800800e:	7d3b      	ldrb	r3, [r7, #20]
 8008010:	2b05      	cmp	r3, #5
 8008012:	f040 8144 	bne.w	800829e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	220a      	movs	r2, #10
 800801a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800801e:	e13e      	b.n	800829e <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	895a      	ldrh	r2, [r3, #10]
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	791b      	ldrb	r3, [r3, #4]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 ff14 	bl	8009e5c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2204      	movs	r2, #4
 8008038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800803c:	e13c      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	791b      	ldrb	r3, [r3, #4]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f004 fe7f 	bl	800cd48 <USBH_LL_GetURBState>
 800804a:	4603      	mov	r3, r0
 800804c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800804e:	7d3b      	ldrb	r3, [r7, #20]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d12d      	bne.n	80080b0 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	8952      	ldrh	r2, [r2, #10]
 800805c:	4293      	cmp	r3, r2
 800805e:	d910      	bls.n	8008082 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	8952      	ldrh	r2, [r2, #10]
 800806a:	441a      	add	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	8952      	ldrh	r2, [r2, #10]
 800807a:	1a9a      	subs	r2, r3, r2
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008080:	e002      	b.n	8008088 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2200      	movs	r2, #0
 8008086:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	895a      	ldrh	r2, [r3, #10]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	791b      	ldrb	r3, [r3, #4]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 fedc 	bl	8009e5c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80080a4:	e0fd      	b.n	80082a2 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2207      	movs	r2, #7
 80080aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80080ae:	e0f8      	b.n	80082a2 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80080b0:	7d3b      	ldrb	r3, [r7, #20]
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	f040 80f5 	bne.w	80082a2 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	2209      	movs	r2, #9
 80080bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80080c0:	e0ef      	b.n	80082a2 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	891a      	ldrh	r2, [r3, #8]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	7958      	ldrb	r0, [r3, #5]
 80080d0:	2301      	movs	r3, #1
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4603      	mov	r3, r0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 fe9b 	bl	8009e12 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2206      	movs	r2, #6
 80080e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80080e4:	e0e8      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	795b      	ldrb	r3, [r3, #5]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f004 fe2b 	bl	800cd48 <USBH_LL_GetURBState>
 80080f2:	4603      	mov	r3, r0
 80080f4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80080f6:	7d3b      	ldrb	r3, [r7, #20]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d130      	bne.n	800815e <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	8912      	ldrh	r2, [r2, #8]
 8008104:	4293      	cmp	r3, r2
 8008106:	d910      	bls.n	800812a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	8912      	ldrh	r2, [r2, #8]
 8008112:	441a      	add	r2, r3
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	8912      	ldrh	r2, [r2, #8]
 8008122:	1a9a      	subs	r2, r3, r2
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	65da      	str	r2, [r3, #92]	; 0x5c
 8008128:	e002      	b.n	8008130 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2200      	movs	r2, #0
 800812e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00d      	beq.n	8008154 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	891a      	ldrh	r2, [r3, #8]
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	7958      	ldrb	r0, [r3, #5]
 8008146:	2301      	movs	r3, #1
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	4603      	mov	r3, r0
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 fe60 	bl	8009e12 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008152:	e0a8      	b.n	80082a6 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2207      	movs	r2, #7
 8008158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800815c:	e0a3      	b.n	80082a6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800815e:	7d3b      	ldrb	r3, [r7, #20]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d104      	bne.n	800816e <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	2205      	movs	r2, #5
 8008168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800816c:	e09b      	b.n	80082a6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800816e:	7d3b      	ldrb	r3, [r7, #20]
 8008170:	2b05      	cmp	r3, #5
 8008172:	f040 8098 	bne.w	80082a6 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	220a      	movs	r2, #10
 800817a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800817e:	e092      	b.n	80082a6 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	791b      	ldrb	r3, [r3, #4]
 800818a:	220d      	movs	r2, #13
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fe65 	bl	8009e5c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2208      	movs	r2, #8
 8008196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800819a:	e08d      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	791b      	ldrb	r3, [r3, #4]
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f004 fdd0 	bl	800cd48 <USBH_LL_GetURBState>
 80081a8:	4603      	mov	r3, r0
 80081aa:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80081ac:	7d3b      	ldrb	r3, [r7, #20]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d115      	bne.n	80081de <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f8aa 	bl	800831c <USBH_MSC_DecodeCSW>
 80081c8:	4603      	mov	r3, r0
 80081ca:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80081cc:	7d7b      	ldrb	r3, [r7, #21]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80081d6:	e068      	b.n	80082aa <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 80081d8:	2302      	movs	r3, #2
 80081da:	75fb      	strb	r3, [r7, #23]
      break;
 80081dc:	e065      	b.n	80082aa <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 80081de:	7d3b      	ldrb	r3, [r7, #20]
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d162      	bne.n	80082aa <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2209      	movs	r2, #9
 80081e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081ec:	e05d      	b.n	80082aa <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	2200      	movs	r2, #0
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f865 	bl	80082c4 <USBH_MSC_BOT_Abort>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80081fe:	7dbb      	ldrb	r3, [r7, #22]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	2207      	movs	r2, #7
 8008208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800820c:	e04f      	b.n	80082ae <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800820e:	7dbb      	ldrb	r3, [r7, #22]
 8008210:	2b04      	cmp	r3, #4
 8008212:	d14c      	bne.n	80082ae <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	220b      	movs	r2, #11
 8008218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800821c:	e047      	b.n	80082ae <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	2201      	movs	r2, #1
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f84d 	bl	80082c4 <USBH_MSC_BOT_Abort>
 800822a:	4603      	mov	r3, r0
 800822c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800822e:	7dbb      	ldrb	r3, [r7, #22]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d11d      	bne.n	8008270 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	795b      	ldrb	r3, [r3, #5]
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f004 fdd8 	bl	800cdf0 <USBH_LL_GetToggle>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	7959      	ldrb	r1, [r3, #5]
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	f1c3 0301 	rsb	r3, r3, #1
 800824e:	b2db      	uxtb	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f004 fd99 	bl	800cd8a <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	791b      	ldrb	r3, [r3, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f004 fd92 	bl	800cd8a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2209      	movs	r2, #9
 800826a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800826e:	e020      	b.n	80082b2 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8008270:	7dbb      	ldrb	r3, [r7, #22]
 8008272:	2b04      	cmp	r3, #4
 8008274:	d11d      	bne.n	80082b2 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	220b      	movs	r2, #11
 800827a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800827e:	e018      	b.n	80082b2 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff fdf0 	bl	8007e66 <USBH_MSC_BOT_REQ_Reset>
 8008286:	4603      	mov	r3, r0
 8008288:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d112      	bne.n	80082b6 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008298:	e00d      	b.n	80082b6 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800829a:	bf00      	nop
 800829c:	e00c      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>
      break;
 800829e:	bf00      	nop
 80082a0:	e00a      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>
      break;
 80082a2:	bf00      	nop
 80082a4:	e008      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>
      break;
 80082a6:	bf00      	nop
 80082a8:	e006      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>
      break;
 80082aa:	bf00      	nop
 80082ac:	e004      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>
      break;
 80082ae:	bf00      	nop
 80082b0:	e002      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>
      break;
 80082b2:	bf00      	nop
 80082b4:	e000      	b.n	80082b8 <USBH_MSC_BOT_Process+0x398>
      break;
 80082b6:	bf00      	nop
  }
  return status;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop

080082c4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
 80082d0:	4613      	mov	r3, r2
 80082d2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80082d4:	2302      	movs	r3, #2
 80082d6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80082e2:	78bb      	ldrb	r3, [r7, #2]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <USBH_MSC_BOT_Abort+0x2a>
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d009      	beq.n	8008300 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80082ec:	e011      	b.n	8008312 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	79db      	ldrb	r3, [r3, #7]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f99c 	bl	8009632 <USBH_ClrFeature>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]
      break;
 80082fe:	e008      	b.n	8008312 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	799b      	ldrb	r3, [r3, #6]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 f993 	bl	8009632 <USBH_ClrFeature>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	bf00      	nop
  }
  return status;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800832e:	2301      	movs	r3, #1
 8008330:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	791b      	ldrb	r3, [r3, #4]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f004 fc73 	bl	800cc24 <USBH_LL_GetLastXferSize>
 800833e:	4603      	mov	r3, r0
 8008340:	2b0d      	cmp	r3, #13
 8008342:	d002      	beq.n	800834a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008344:	2302      	movs	r3, #2
 8008346:	73fb      	strb	r3, [r7, #15]
 8008348:	e024      	b.n	8008394 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800834e:	4a14      	ldr	r2, [pc, #80]	; (80083a0 <USBH_MSC_DecodeCSW+0x84>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d11d      	bne.n	8008390 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835c:	429a      	cmp	r2, r3
 800835e:	d119      	bne.n	8008394 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008366:	2b00      	cmp	r3, #0
 8008368:	d102      	bne.n	8008370 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
 800836e:	e011      	b.n	8008394 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008376:	2b01      	cmp	r3, #1
 8008378:	d102      	bne.n	8008380 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800837a:	2301      	movs	r3, #1
 800837c:	73fb      	strb	r3, [r7, #15]
 800837e:	e009      	b.n	8008394 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008386:	2b02      	cmp	r3, #2
 8008388:	d104      	bne.n	8008394 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800838a:	2302      	movs	r3, #2
 800838c:	73fb      	strb	r3, [r7, #15]
 800838e:	e001      	b.n	8008394 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008390:	2302      	movs	r3, #2
 8008392:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008394:	7bfb      	ldrb	r3, [r7, #15]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	53425355 	.word	0x53425355

080083a4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80083b0:	2302      	movs	r3, #2
 80083b2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d002      	beq.n	80083ce <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d021      	beq.n	8008410 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80083cc:	e028      	b.n	8008420 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2200      	movs	r2, #0
 80083d2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	220a      	movs	r2, #10
 80083e0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	3363      	adds	r3, #99	; 0x63
 80083e8:	2210      	movs	r2, #16
 80083ea:	2100      	movs	r1, #0
 80083ec:	4618      	mov	r0, r3
 80083ee:	f004 fda8 	bl	800cf42 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2202      	movs	r2, #2
 8008406:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800840a:	2301      	movs	r3, #1
 800840c:	73fb      	strb	r3, [r7, #15]
      break;
 800840e:	e007      	b.n	8008420 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff fd83 	bl	8007f20 <USBH_MSC_BOT_Process>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
      break;
 800841e:	bf00      	nop
  }

  return error;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b086      	sub	sp, #24
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	460b      	mov	r3, r1
 8008434:	607a      	str	r2, [r7, #4]
 8008436:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008438:	2301      	movs	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800844c:	2b01      	cmp	r3, #1
 800844e:	d002      	beq.n	8008456 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008450:	2b02      	cmp	r3, #2
 8008452:	d027      	beq.n	80084a4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008454:	e05f      	b.n	8008516 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2208      	movs	r2, #8
 800845a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	2280      	movs	r2, #128	; 0x80
 8008460:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	220a      	movs	r2, #10
 8008468:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	3363      	adds	r3, #99	; 0x63
 8008470:	2210      	movs	r2, #16
 8008472:	2100      	movs	r1, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f004 fd64 	bl	800cf42 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2225      	movs	r2, #37	; 0x25
 800847e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2202      	movs	r2, #2
 800848e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f103 0210 	add.w	r2, r3, #16
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800849e:	2301      	movs	r3, #1
 80084a0:	75fb      	strb	r3, [r7, #23]
      break;
 80084a2:	e038      	b.n	8008516 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80084a4:	7afb      	ldrb	r3, [r7, #11]
 80084a6:	4619      	mov	r1, r3
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff fd39 	bl	8007f20 <USBH_MSC_BOT_Process>
 80084ae:	4603      	mov	r3, r0
 80084b0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d12d      	bne.n	8008514 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084be:	3303      	adds	r3, #3
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ca:	3302      	adds	r3, #2
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084d8:	3301      	adds	r3, #1
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80084de:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	061b      	lsls	r3, r3, #24
 80084ea:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f6:	3307      	adds	r3, #7
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008502:	3306      	adds	r3, #6
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	b29b      	uxth	r3, r3
 800850c:	4313      	orrs	r3, r2
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	809a      	strh	r2, [r3, #4]
      break;
 8008514:	bf00      	nop
  }

  return error;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	460b      	mov	r3, r1
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008542:	2b01      	cmp	r3, #1
 8008544:	d002      	beq.n	800854c <USBH_MSC_SCSI_Inquiry+0x2c>
 8008546:	2b02      	cmp	r3, #2
 8008548:	d03d      	beq.n	80085c6 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800854a:	e089      	b.n	8008660 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	2224      	movs	r2, #36	; 0x24
 8008550:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2280      	movs	r2, #128	; 0x80
 8008556:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	220a      	movs	r2, #10
 800855e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	3363      	adds	r3, #99	; 0x63
 8008566:	220a      	movs	r2, #10
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f004 fce9 	bl	800cf42 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2212      	movs	r2, #18
 8008574:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	015b      	lsls	r3, r3, #5
 800857c:	b2da      	uxtb	r2, r3
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2224      	movs	r2, #36	; 0x24
 8008598:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f103 0210 	add.w	r2, r3, #16
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
      break;
 80085c4:	e04c      	b.n	8008660 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80085c6:	7afb      	ldrb	r3, [r7, #11]
 80085c8:	4619      	mov	r1, r3
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff fca8 	bl	8007f20 <USBH_MSC_BOT_Process>
 80085d0:	4603      	mov	r3, r0
 80085d2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d141      	bne.n	800865e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80085da:	2222      	movs	r2, #34	; 0x22
 80085dc:	2100      	movs	r1, #0
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f004 fcaf 	bl	800cf42 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	095b      	lsrs	r3, r3, #5
 8008600:	b2da      	uxtb	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800860c:	3301      	adds	r3, #1
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	b25b      	sxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	da03      	bge.n	800861e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	709a      	strb	r2, [r3, #2]
 800861c:	e002      	b.n	8008624 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	1cd8      	adds	r0, r3, #3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800862e:	3308      	adds	r3, #8
 8008630:	2208      	movs	r2, #8
 8008632:	4619      	mov	r1, r3
 8008634:	f004 fc7a 	bl	800cf2c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f103 000c 	add.w	r0, r3, #12
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008644:	3310      	adds	r3, #16
 8008646:	2210      	movs	r2, #16
 8008648:	4619      	mov	r1, r3
 800864a:	f004 fc6f 	bl	800cf2c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	331d      	adds	r3, #29
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008658:	3220      	adds	r2, #32
 800865a:	6812      	ldr	r2, [r2, #0]
 800865c:	601a      	str	r2, [r3, #0]
      break;
 800865e:	bf00      	nop
  }

  return error;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b086      	sub	sp, #24
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	460b      	mov	r3, r1
 8008674:	607a      	str	r2, [r7, #4]
 8008676:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008678:	2302      	movs	r3, #2
 800867a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800868c:	2b01      	cmp	r3, #1
 800868e:	d002      	beq.n	8008696 <USBH_MSC_SCSI_RequestSense+0x2c>
 8008690:	2b02      	cmp	r3, #2
 8008692:	d03d      	beq.n	8008710 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008694:	e05d      	b.n	8008752 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	220e      	movs	r2, #14
 800869a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2280      	movs	r2, #128	; 0x80
 80086a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	220a      	movs	r2, #10
 80086a8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	3363      	adds	r3, #99	; 0x63
 80086b0:	2210      	movs	r2, #16
 80086b2:	2100      	movs	r1, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f004 fc44 	bl	800cf42 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2203      	movs	r2, #3
 80086be:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	015b      	lsls	r3, r3, #5
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	220e      	movs	r2, #14
 80086e2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2202      	movs	r2, #2
 80086fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f103 0210 	add.w	r2, r3, #16
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800870a:	2301      	movs	r3, #1
 800870c:	75fb      	strb	r3, [r7, #23]
      break;
 800870e:	e020      	b.n	8008752 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008710:	7afb      	ldrb	r3, [r7, #11]
 8008712:	4619      	mov	r1, r3
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f7ff fc03 	bl	8007f20 <USBH_MSC_BOT_Process>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d115      	bne.n	8008750 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800872a:	3302      	adds	r3, #2
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	b2da      	uxtb	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873e:	7b1a      	ldrb	r2, [r3, #12]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800874a:	7b5a      	ldrb	r2, [r3, #13]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	709a      	strb	r2, [r3, #2]
      break;
 8008750:	bf00      	nop
  }

  return error;
 8008752:	7dfb      	ldrb	r3, [r7, #23]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	460b      	mov	r3, r1
 800876a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800876c:	2302      	movs	r3, #2
 800876e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008780:	2b01      	cmp	r3, #1
 8008782:	d002      	beq.n	800878a <USBH_MSC_SCSI_Write+0x2e>
 8008784:	2b02      	cmp	r3, #2
 8008786:	d047      	beq.n	8008818 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008788:	e04e      	b.n	8008828 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008790:	461a      	mov	r2, r3
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	fb03 f202 	mul.w	r2, r3, r2
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	220a      	movs	r2, #10
 80087a8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	3363      	adds	r3, #99	; 0x63
 80087b0:	2210      	movs	r2, #16
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f004 fbc4 	bl	800cf42 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	222a      	movs	r2, #42	; 0x2a
 80087be:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80087c2:	79fa      	ldrb	r2, [r7, #7]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80087ca:	79ba      	ldrb	r2, [r7, #6]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80087d2:	797a      	ldrb	r2, [r7, #5]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80087da:	1d3b      	adds	r3, r7, #4
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80087e4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80087ee:	f107 0320 	add.w	r3, r7, #32
 80087f2:	781a      	ldrb	r2, [r3, #0]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
      break;
 8008816:	e007      	b.n	8008828 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	4619      	mov	r1, r3
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff fb7f 	bl	8007f20 <USBH_MSC_BOT_Process>
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]
      break;
 8008826:	bf00      	nop
  }

  return error;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b086      	sub	sp, #24
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
 800883e:	460b      	mov	r3, r1
 8008840:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008842:	2302      	movs	r3, #2
 8008844:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008856:	2b01      	cmp	r3, #1
 8008858:	d002      	beq.n	8008860 <USBH_MSC_SCSI_Read+0x2e>
 800885a:	2b02      	cmp	r3, #2
 800885c:	d047      	beq.n	80088ee <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800885e:	e04e      	b.n	80088fe <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008866:	461a      	mov	r2, r3
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	fb03 f202 	mul.w	r2, r3, r2
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2280      	movs	r2, #128	; 0x80
 8008876:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	220a      	movs	r2, #10
 800887e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	3363      	adds	r3, #99	; 0x63
 8008886:	2210      	movs	r2, #16
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f004 fb59 	bl	800cf42 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2228      	movs	r2, #40	; 0x28
 8008894:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008898:	79fa      	ldrb	r2, [r7, #7]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80088a0:	79ba      	ldrb	r2, [r7, #6]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80088a8:	797a      	ldrb	r2, [r7, #5]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80088b0:	1d3b      	adds	r3, r7, #4
 80088b2:	781a      	ldrb	r2, [r3, #0]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80088ba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80088c4:	f107 0320 	add.w	r3, r7, #32
 80088c8:	781a      	ldrb	r2, [r3, #0]
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80088e8:	2301      	movs	r3, #1
 80088ea:	75fb      	strb	r3, [r7, #23]
      break;
 80088ec:	e007      	b.n	80088fe <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	4619      	mov	r1, r3
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7ff fb14 	bl	8007f20 <USBH_MSC_BOT_Process>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]
      break;
 80088fc:	bf00      	nop
  }

  return error;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800891c:	2302      	movs	r3, #2
 800891e:	e029      	b.n	8008974 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	79fa      	ldrb	r2, [r7, #7]
 8008924:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f81f 	bl	800897c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f004 f8ad 	bl	800cacc <USBH_LL_Init>

  return USBH_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e009      	b.n	80089a2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	33e0      	adds	r3, #224	; 0xe0
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	2200      	movs	r2, #0
 800899a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3301      	adds	r3, #1
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b0e      	cmp	r3, #14
 80089a6:	d9f2      	bls.n	800898e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e009      	b.n	80089c2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3301      	adds	r3, #1
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c8:	d3f1      	bcc.n	80089ae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2240      	movs	r2, #64	; 0x40
 80089ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d016      	beq.n	8008a66 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10e      	bne.n	8008a60 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a48:	1c59      	adds	r1, r3, #1
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	33de      	adds	r3, #222	; 0xde
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
 8008a5e:	e004      	b.n	8008a6a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a60:	2302      	movs	r3, #2
 8008a62:	73fb      	strb	r3, [r7, #15]
 8008a64:	e001      	b.n	8008a6a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a66:	2302      	movs	r3, #2
 8008a68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d204      	bcs.n	8008a9e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	78fa      	ldrb	r2, [r7, #3]
 8008a98:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008a9c:	e001      	b.n	8008aa2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	461a      	mov	r2, r3
 8008abe:	4603      	mov	r3, r0
 8008ac0:	70fb      	strb	r3, [r7, #3]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70bb      	strb	r3, [r7, #2]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ad8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ada:	e025      	b.n	8008b28 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	221a      	movs	r2, #26
 8008ae0:	fb02 f303 	mul.w	r3, r2, r3
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	3302      	adds	r3, #2
 8008aec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	795b      	ldrb	r3, [r3, #5]
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d002      	beq.n	8008afe <USBH_FindInterface+0x4e>
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	2bff      	cmp	r3, #255	; 0xff
 8008afc:	d111      	bne.n	8008b22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b02:	78ba      	ldrb	r2, [r7, #2]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d002      	beq.n	8008b0e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b08:	78bb      	ldrb	r3, [r7, #2]
 8008b0a:	2bff      	cmp	r3, #255	; 0xff
 8008b0c:	d109      	bne.n	8008b22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b12:	787a      	ldrb	r2, [r7, #1]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d002      	beq.n	8008b1e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b18:	787b      	ldrb	r3, [r7, #1]
 8008b1a:	2bff      	cmp	r3, #255	; 0xff
 8008b1c:	d101      	bne.n	8008b22 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	e006      	b.n	8008b30 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	3301      	adds	r3, #1
 8008b26:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d9d6      	bls.n	8008adc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b2e:	23ff      	movs	r3, #255	; 0xff
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	371c      	adds	r7, #28
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f003 fff7 	bl	800cb38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f004 f90e 	bl	800cd6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af04      	add	r7, sp, #16
 8008b62:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b64:	2302      	movs	r3, #2
 8008b66:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d102      	bne.n	8008b7e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b0b      	cmp	r3, #11
 8008b86:	f200 81b3 	bhi.w	8008ef0 <USBH_Process+0x394>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <USBH_Process+0x34>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008bc1 	.word	0x08008bc1
 8008b94:	08008bf3 	.word	0x08008bf3
 8008b98:	08008c5b 	.word	0x08008c5b
 8008b9c:	08008e8b 	.word	0x08008e8b
 8008ba0:	08008ef1 	.word	0x08008ef1
 8008ba4:	08008cff 	.word	0x08008cff
 8008ba8:	08008e31 	.word	0x08008e31
 8008bac:	08008d35 	.word	0x08008d35
 8008bb0:	08008d55 	.word	0x08008d55
 8008bb4:	08008d75 	.word	0x08008d75
 8008bb8:	08008da3 	.word	0x08008da3
 8008bbc:	08008e73 	.word	0x08008e73
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 8193 	beq.w	8008ef4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008bd4:	20c8      	movs	r0, #200	; 0xc8
 8008bd6:	f004 f93e 	bl	800ce56 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f004 f807 	bl	800cbee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008bf0:	e180      	b.n	8008ef4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d107      	bne.n	8008c0c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c0a:	e182      	b.n	8008f12 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c16:	d914      	bls.n	8008c42 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c1e:	3301      	adds	r3, #1
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d903      	bls.n	8008c3a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	220d      	movs	r2, #13
 8008c36:	701a      	strb	r2, [r3, #0]
      break;
 8008c38:	e16b      	b.n	8008f12 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	701a      	strb	r2, [r3, #0]
      break;
 8008c40:	e167      	b.n	8008f12 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c48:	f103 020a 	add.w	r2, r3, #10
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008c52:	200a      	movs	r0, #10
 8008c54:	f004 f8ff 	bl	800ce56 <USBH_Delay>
      break;
 8008c58:	e15b      	b.n	8008f12 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d005      	beq.n	8008c70 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c6a:	2104      	movs	r1, #4
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c70:	2064      	movs	r0, #100	; 0x64
 8008c72:	f004 f8f0 	bl	800ce56 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f003 ff94 	bl	800cba4 <USBH_LL_GetSpeed>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	461a      	mov	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2205      	movs	r2, #5
 8008c8a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 f931 	bl	8009ef6 <USBH_AllocPipe>
 8008c94:	4603      	mov	r3, r0
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008c9c:	2180      	movs	r1, #128	; 0x80
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 f929 	bl	8009ef6 <USBH_AllocPipe>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7919      	ldrb	r1, [r3, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cc0:	b292      	uxth	r2, r2
 8008cc2:	9202      	str	r2, [sp, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	9201      	str	r2, [sp, #4]
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2280      	movs	r2, #128	; 0x80
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 f8e2 	bl	8009e98 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7959      	ldrb	r1, [r3, #5]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ce8:	b292      	uxth	r2, r2
 8008cea:	9202      	str	r2, [sp, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	9201      	str	r2, [sp, #4]
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 f8ce 	bl	8009e98 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008cfc:	e109      	b.n	8008f12 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f90c 	bl	8008f1c <USBH_HandleEnum>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f040 80f3 	bne.w	8008ef8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d103      	bne.n	8008d2c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2208      	movs	r2, #8
 8008d28:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d2a:	e0e5      	b.n	8008ef8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2207      	movs	r2, #7
 8008d30:	701a      	strb	r2, [r3, #0]
      break;
 8008d32:	e0e1      	b.n	8008ef8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 80de 	beq.w	8008efc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d46:	2101      	movs	r1, #1
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2208      	movs	r2, #8
 8008d50:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008d52:	e0d3      	b.n	8008efc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fc20 	bl	80095a4 <USBH_SetCfg>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 80ca 	bne.w	8008f00 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2209      	movs	r2, #9
 8008d70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d72:	e0c5      	b.n	8008f00 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00b      	beq.n	8008d9a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008d82:	2101      	movs	r1, #1
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fc30 	bl	80095ea <USBH_SetFeature>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 80b9 	bne.w	8008f04 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	220a      	movs	r2, #10
 8008d96:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d98:	e0b4      	b.n	8008f04 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	220a      	movs	r2, #10
 8008d9e:	701a      	strb	r2, [r3, #0]
      break;
 8008da0:	e0b0      	b.n	8008f04 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 80ad 	beq.w	8008f08 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
 8008dba:	e016      	b.n	8008dea <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008dbc:	7bfa      	ldrb	r2, [r7, #15]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	32de      	adds	r2, #222	; 0xde
 8008dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc6:	791a      	ldrb	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d108      	bne.n	8008de4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008dd2:	7bfa      	ldrb	r2, [r7, #15]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	32de      	adds	r2, #222	; 0xde
 8008dd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008de2:	e005      	b.n	8008df0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	3301      	adds	r3, #1
 8008de8:	73fb      	strb	r3, [r7, #15]
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0e5      	beq.n	8008dbc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d016      	beq.n	8008e28 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	4798      	blx	r3
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d109      	bne.n	8008e20 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2206      	movs	r2, #6
 8008e10:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e18:	2103      	movs	r1, #3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e1e:	e073      	b.n	8008f08 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	220d      	movs	r2, #13
 8008e24:	701a      	strb	r2, [r3, #0]
      break;
 8008e26:	e06f      	b.n	8008f08 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	220d      	movs	r2, #13
 8008e2c:	701a      	strb	r2, [r3, #0]
      break;
 8008e2e:	e06b      	b.n	8008f08 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d017      	beq.n	8008e6a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d103      	bne.n	8008e5a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	220b      	movs	r2, #11
 8008e56:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e58:	e058      	b.n	8008f0c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d154      	bne.n	8008f0c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	220d      	movs	r2, #13
 8008e66:	701a      	strb	r2, [r3, #0]
      break;
 8008e68:	e050      	b.n	8008f0c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	220d      	movs	r2, #13
 8008e6e:	701a      	strb	r2, [r3, #0]
      break;
 8008e70:	e04c      	b.n	8008f0c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d049      	beq.n	8008f10 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	4798      	blx	r3
      }
      break;
 8008e88:	e042      	b.n	8008f10 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff fd72 	bl	800897c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ec6:	2105      	movs	r1, #5
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d107      	bne.n	8008ee8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fe2b 	bl	8008b3c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ee6:	e014      	b.n	8008f12 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f003 fe25 	bl	800cb38 <USBH_LL_Start>
      break;
 8008eee:	e010      	b.n	8008f12 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e00e      	b.n	8008f12 <USBH_Process+0x3b6>
      break;
 8008ef4:	bf00      	nop
 8008ef6:	e00c      	b.n	8008f12 <USBH_Process+0x3b6>
      break;
 8008ef8:	bf00      	nop
 8008efa:	e00a      	b.n	8008f12 <USBH_Process+0x3b6>
    break;
 8008efc:	bf00      	nop
 8008efe:	e008      	b.n	8008f12 <USBH_Process+0x3b6>
      break;
 8008f00:	bf00      	nop
 8008f02:	e006      	b.n	8008f12 <USBH_Process+0x3b6>
      break;
 8008f04:	bf00      	nop
 8008f06:	e004      	b.n	8008f12 <USBH_Process+0x3b6>
      break;
 8008f08:	bf00      	nop
 8008f0a:	e002      	b.n	8008f12 <USBH_Process+0x3b6>
      break;
 8008f0c:	bf00      	nop
 8008f0e:	e000      	b.n	8008f12 <USBH_Process+0x3b6>
      break;
 8008f10:	bf00      	nop
  }
  return USBH_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af04      	add	r7, sp, #16
 8008f22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f24:	2301      	movs	r3, #1
 8008f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	785b      	ldrb	r3, [r3, #1]
 8008f30:	2b07      	cmp	r3, #7
 8008f32:	f200 81c1 	bhi.w	80092b8 <USBH_HandleEnum+0x39c>
 8008f36:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <USBH_HandleEnum+0x20>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f5d 	.word	0x08008f5d
 8008f40:	0800901b 	.word	0x0800901b
 8008f44:	08009085 	.word	0x08009085
 8008f48:	08009113 	.word	0x08009113
 8008f4c:	0800917d 	.word	0x0800917d
 8008f50:	080091ed 	.word	0x080091ed
 8008f54:	08009233 	.word	0x08009233
 8008f58:	08009279 	.word	0x08009279
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f5c:	2108      	movs	r1, #8
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa50 	bl	8009404 <USBH_Get_DevDesc>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d130      	bne.n	8008fd0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	7919      	ldrb	r1, [r3, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f92:	b292      	uxth	r2, r2
 8008f94:	9202      	str	r2, [sp, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	9201      	str	r2, [sp, #4]
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2280      	movs	r2, #128	; 0x80
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 ff79 	bl	8009e98 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7959      	ldrb	r1, [r3, #5]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fba:	b292      	uxth	r2, r2
 8008fbc:	9202      	str	r2, [sp, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	9201      	str	r2, [sp, #4]
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 ff65 	bl	8009e98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fce:	e175      	b.n	80092bc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	f040 8172 	bne.w	80092bc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008fde:	3301      	adds	r3, #1
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d903      	bls.n	8008ffa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	220d      	movs	r2, #13
 8008ff6:	701a      	strb	r2, [r3, #0]
      break;
 8008ff8:	e160      	b.n	80092bc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	795b      	ldrb	r3, [r3, #5]
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 ff99 	bl	8009f38 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	791b      	ldrb	r3, [r3, #4]
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 ff93 	bl	8009f38 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	701a      	strb	r2, [r3, #0]
      break;
 8009018:	e150      	b.n	80092bc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800901a:	2112      	movs	r1, #18
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f9f1 	bl	8009404 <USBH_Get_DevDesc>
 8009022:	4603      	mov	r3, r0
 8009024:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d103      	bne.n	8009034 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009032:	e145      	b.n	80092c0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b03      	cmp	r3, #3
 8009038:	f040 8142 	bne.w	80092c0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009042:	3301      	adds	r3, #1
 8009044:	b2da      	uxtb	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009052:	2b03      	cmp	r3, #3
 8009054:	d903      	bls.n	800905e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	220d      	movs	r2, #13
 800905a:	701a      	strb	r2, [r3, #0]
      break;
 800905c:	e130      	b.n	80092c0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	795b      	ldrb	r3, [r3, #5]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 ff67 	bl	8009f38 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	791b      	ldrb	r3, [r3, #4]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 ff61 	bl	8009f38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	701a      	strb	r2, [r3, #0]
      break;
 8009082:	e11d      	b.n	80092c0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009084:	2101      	movs	r1, #1
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa68 	bl	800955c <USBH_SetAddress>
 800908c:	4603      	mov	r3, r0
 800908e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d132      	bne.n	80090fc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009096:	2002      	movs	r0, #2
 8009098:	f003 fedd 	bl	800ce56 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2203      	movs	r2, #3
 80090a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	7919      	ldrb	r1, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090be:	b292      	uxth	r2, r2
 80090c0:	9202      	str	r2, [sp, #8]
 80090c2:	2200      	movs	r2, #0
 80090c4:	9201      	str	r2, [sp, #4]
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4603      	mov	r3, r0
 80090ca:	2280      	movs	r2, #128	; 0x80
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fee3 	bl	8009e98 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	7959      	ldrb	r1, [r3, #5]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090e6:	b292      	uxth	r2, r2
 80090e8:	9202      	str	r2, [sp, #8]
 80090ea:	2200      	movs	r2, #0
 80090ec:	9201      	str	r2, [sp, #4]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4603      	mov	r3, r0
 80090f2:	2200      	movs	r2, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fecf 	bl	8009e98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090fa:	e0e3      	b.n	80092c4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	f040 80e0 	bne.w	80092c4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220d      	movs	r2, #13
 8009108:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	705a      	strb	r2, [r3, #1]
      break;
 8009110:	e0d8      	b.n	80092c4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009112:	2109      	movs	r1, #9
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f99d 	bl	8009454 <USBH_Get_CfgDesc>
 800911a:	4603      	mov	r3, r0
 800911c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d103      	bne.n	800912c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2204      	movs	r2, #4
 8009128:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800912a:	e0cd      	b.n	80092c8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	2b03      	cmp	r3, #3
 8009130:	f040 80ca 	bne.w	80092c8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800913a:	3301      	adds	r3, #1
 800913c:	b2da      	uxtb	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800914a:	2b03      	cmp	r3, #3
 800914c:	d903      	bls.n	8009156 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	220d      	movs	r2, #13
 8009152:	701a      	strb	r2, [r3, #0]
      break;
 8009154:	e0b8      	b.n	80092c8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	795b      	ldrb	r3, [r3, #5]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 feeb 	bl	8009f38 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	791b      	ldrb	r3, [r3, #4]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fee5 	bl	8009f38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	701a      	strb	r2, [r3, #0]
      break;
 800917a:	e0a5      	b.n	80092c8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f965 	bl	8009454 <USBH_Get_CfgDesc>
 800918a:	4603      	mov	r3, r0
 800918c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2205      	movs	r2, #5
 8009198:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800919a:	e097      	b.n	80092cc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b03      	cmp	r3, #3
 80091a0:	f040 8094 	bne.w	80092cc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091aa:	3301      	adds	r3, #1
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d903      	bls.n	80091c6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	220d      	movs	r2, #13
 80091c2:	701a      	strb	r2, [r3, #0]
      break;
 80091c4:	e082      	b.n	80092cc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	795b      	ldrb	r3, [r3, #5]
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 feb3 	bl	8009f38 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	791b      	ldrb	r3, [r3, #4]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fead 	bl	8009f38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
      break;
 80091ea:	e06f      	b.n	80092cc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d019      	beq.n	800922a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009202:	23ff      	movs	r3, #255	; 0xff
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f949 	bl	800949c <USBH_Get_StringDesc>
 800920a:	4603      	mov	r3, r0
 800920c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2206      	movs	r2, #6
 8009218:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800921a:	e059      	b.n	80092d0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	2b03      	cmp	r3, #3
 8009220:	d156      	bne.n	80092d0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2206      	movs	r2, #6
 8009226:	705a      	strb	r2, [r3, #1]
      break;
 8009228:	e052      	b.n	80092d0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2206      	movs	r2, #6
 800922e:	705a      	strb	r2, [r3, #1]
      break;
 8009230:	e04e      	b.n	80092d0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009238:	2b00      	cmp	r3, #0
 800923a:	d019      	beq.n	8009270 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009248:	23ff      	movs	r3, #255	; 0xff
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f926 	bl	800949c <USBH_Get_StringDesc>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d103      	bne.n	8009262 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2207      	movs	r2, #7
 800925e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009260:	e038      	b.n	80092d4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	2b03      	cmp	r3, #3
 8009266:	d135      	bne.n	80092d4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2207      	movs	r2, #7
 800926c:	705a      	strb	r2, [r3, #1]
      break;
 800926e:	e031      	b.n	80092d4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2207      	movs	r2, #7
 8009274:	705a      	strb	r2, [r3, #1]
      break;
 8009276:	e02d      	b.n	80092d4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800927e:	2b00      	cmp	r3, #0
 8009280:	d017      	beq.n	80092b2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800928e:	23ff      	movs	r3, #255	; 0xff
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f903 	bl	800949c <USBH_Get_StringDesc>
 8009296:	4603      	mov	r3, r0
 8009298:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80092a4:	e018      	b.n	80092d8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d115      	bne.n	80092d8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
      break;
 80092b0:	e012      	b.n	80092d8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
      break;
 80092b6:	e00f      	b.n	80092d8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80092b8:	bf00      	nop
 80092ba:	e00e      	b.n	80092da <USBH_HandleEnum+0x3be>
      break;
 80092bc:	bf00      	nop
 80092be:	e00c      	b.n	80092da <USBH_HandleEnum+0x3be>
      break;
 80092c0:	bf00      	nop
 80092c2:	e00a      	b.n	80092da <USBH_HandleEnum+0x3be>
      break;
 80092c4:	bf00      	nop
 80092c6:	e008      	b.n	80092da <USBH_HandleEnum+0x3be>
      break;
 80092c8:	bf00      	nop
 80092ca:	e006      	b.n	80092da <USBH_HandleEnum+0x3be>
      break;
 80092cc:	bf00      	nop
 80092ce:	e004      	b.n	80092da <USBH_HandleEnum+0x3be>
      break;
 80092d0:	bf00      	nop
 80092d2:	e002      	b.n	80092da <USBH_HandleEnum+0x3be>
      break;
 80092d4:	bf00      	nop
 80092d6:	e000      	b.n	80092da <USBH_HandleEnum+0x3be>
      break;
 80092d8:	bf00      	nop
  }
  return Status;
 80092da:	7bfb      	ldrb	r3, [r7, #15]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f804 	bl	8009326 <USBH_HandleSof>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b0b      	cmp	r3, #11
 8009336:	d10a      	bne.n	800934e <USBH_HandleSof+0x28>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d005      	beq.n	800934e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
  }
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009366:	bf00      	nop
}
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009382:	bf00      	nop
}
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f003 fbc6 	bl	800cb6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	791b      	ldrb	r3, [r3, #4]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fda5 	bl	8009f38 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	795b      	ldrb	r3, [r3, #5]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fd9f 	bl	8009f38 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af02      	add	r7, sp, #8
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	b29b      	uxth	r3, r3
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	4613      	mov	r3, r2
 800941e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009422:	2100      	movs	r1, #0
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f864 	bl	80094f2 <USBH_GetDescriptor>
 800942a:	4603      	mov	r3, r0
 800942c:	73fb      	strb	r3, [r7, #15]
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10a      	bne.n	800944a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f203 3026 	addw	r0, r3, #806	; 0x326
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	b292      	uxth	r2, r2
 8009444:	4619      	mov	r1, r3
 8009446:	f000 f918 	bl	800967a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800944a:	7bfb      	ldrb	r3, [r7, #15]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af02      	add	r7, sp, #8
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	331c      	adds	r3, #28
 8009464:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009466:	887b      	ldrh	r3, [r7, #2]
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f83d 	bl	80094f2 <USBH_GetDescriptor>
 8009478:	4603      	mov	r3, r0
 800947a:	72fb      	strb	r3, [r7, #11]
 800947c:	7afb      	ldrb	r3, [r7, #11]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d107      	bne.n	8009492 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009488:	887a      	ldrh	r2, [r7, #2]
 800948a:	68f9      	ldr	r1, [r7, #12]
 800948c:	4618      	mov	r0, r3
 800948e:	f000 f964 	bl	800975a <USBH_ParseCfgDesc>
  }

  return status;
 8009492:	7afb      	ldrb	r3, [r7, #11]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	607a      	str	r2, [r7, #4]
 80094a6:	461a      	mov	r2, r3
 80094a8:	460b      	mov	r3, r1
 80094aa:	72fb      	strb	r3, [r7, #11]
 80094ac:	4613      	mov	r3, r2
 80094ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80094b0:	7afb      	ldrb	r3, [r7, #11]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80094b8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80094c0:	893b      	ldrh	r3, [r7, #8]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	460b      	mov	r3, r1
 80094c6:	2100      	movs	r1, #0
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f812 	bl	80094f2 <USBH_GetDescriptor>
 80094ce:	4603      	mov	r3, r0
 80094d0:	75fb      	strb	r3, [r7, #23]
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d107      	bne.n	80094e8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80094de:	893a      	ldrh	r2, [r7, #8]
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fa37 	bl	8009956 <USBH_ParseStringDesc>
  }

  return status;
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	607b      	str	r3, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	72fb      	strb	r3, [r7, #11]
 8009500:	4613      	mov	r3, r2
 8009502:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	789b      	ldrb	r3, [r3, #2]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d11c      	bne.n	8009546 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800950c:	7afb      	ldrb	r3, [r7, #11]
 800950e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009512:	b2da      	uxtb	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2206      	movs	r2, #6
 800951c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	893a      	ldrh	r2, [r7, #8]
 8009522:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009524:	893b      	ldrh	r3, [r7, #8]
 8009526:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800952a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800952e:	d104      	bne.n	800953a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f240 4209 	movw	r2, #1033	; 0x409
 8009536:	829a      	strh	r2, [r3, #20]
 8009538:	e002      	b.n	8009540 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8b3a      	ldrh	r2, [r7, #24]
 8009544:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009546:	8b3b      	ldrh	r3, [r7, #24]
 8009548:	461a      	mov	r2, r3
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fa50 	bl	80099f2 <USBH_CtlReq>
 8009552:	4603      	mov	r3, r0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	789b      	ldrb	r3, [r3, #2]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d10f      	bne.n	8009590 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2205      	movs	r2, #5
 800957a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009590:	2200      	movs	r2, #0
 8009592:	2100      	movs	r1, #0
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fa2c 	bl	80099f2 <USBH_CtlReq>
 800959a:	4603      	mov	r3, r0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	789b      	ldrb	r3, [r3, #2]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d10e      	bne.n	80095d6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2209      	movs	r2, #9
 80095c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	887a      	ldrh	r2, [r7, #2]
 80095c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80095d6:	2200      	movs	r2, #0
 80095d8:	2100      	movs	r1, #0
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fa09 	bl	80099f2 <USBH_CtlReq>
 80095e0:	4603      	mov	r3, r0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	789b      	ldrb	r3, [r3, #2]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d10f      	bne.n	800961e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2203      	movs	r2, #3
 8009608:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	b29a      	uxth	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f9e5 	bl	80099f2 <USBH_CtlReq>
 8009628:	4603      	mov	r3, r0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	789b      	ldrb	r3, [r3, #2]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d10f      	bne.n	8009666 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2202      	movs	r2, #2
 800964a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	b29a      	uxth	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009666:	2200      	movs	r2, #0
 8009668:	2100      	movs	r1, #0
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9c1 	bl	80099f2 <USBH_CtlReq>
 8009670:	4603      	mov	r3, r0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	4613      	mov	r3, r2
 8009686:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	781a      	ldrb	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	785a      	ldrb	r2, [r3, #1]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	3302      	adds	r3, #2
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	3303      	adds	r3, #3
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	4313      	orrs	r3, r2
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	791a      	ldrb	r2, [r3, #4]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	795a      	ldrb	r2, [r3, #5]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	799a      	ldrb	r2, [r3, #6]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	79da      	ldrb	r2, [r3, #7]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80096d4:	88fb      	ldrh	r3, [r7, #6]
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d939      	bls.n	800974e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	3308      	adds	r3, #8
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	3309      	adds	r3, #9
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	021b      	lsls	r3, r3, #8
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	330a      	adds	r3, #10
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	330b      	adds	r3, #11
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	b29b      	uxth	r3, r3
 8009706:	021b      	lsls	r3, r3, #8
 8009708:	b29b      	uxth	r3, r3
 800970a:	4313      	orrs	r3, r2
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	330c      	adds	r3, #12
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	b29a      	uxth	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	330d      	adds	r3, #13
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	b29b      	uxth	r3, r3
 8009726:	4313      	orrs	r3, r2
 8009728:	b29a      	uxth	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	7b9a      	ldrb	r2, [r3, #14]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	7bda      	ldrb	r2, [r3, #15]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	7c1a      	ldrb	r2, [r3, #16]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	7c5a      	ldrb	r2, [r3, #17]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	745a      	strb	r2, [r3, #17]
  }
}
 800974e:	bf00      	nop
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b08a      	sub	sp, #40	; 0x28
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	4613      	mov	r3, r2
 8009766:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009772:	2300      	movs	r3, #0
 8009774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	781a      	ldrb	r2, [r3, #0]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	785a      	ldrb	r2, [r3, #1]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	3302      	adds	r3, #2
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	b29a      	uxth	r2, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	3303      	adds	r3, #3
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	791a      	ldrb	r2, [r3, #4]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	795a      	ldrb	r2, [r3, #5]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	799a      	ldrb	r2, [r3, #6]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	79da      	ldrb	r2, [r3, #7]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	7a1a      	ldrb	r2, [r3, #8]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80097d0:	88fb      	ldrh	r3, [r7, #6]
 80097d2:	2b09      	cmp	r3, #9
 80097d4:	d95f      	bls.n	8009896 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80097d6:	2309      	movs	r3, #9
 80097d8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80097da:	2300      	movs	r3, #0
 80097dc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80097de:	e051      	b.n	8009884 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80097e0:	f107 0316 	add.w	r3, r7, #22
 80097e4:	4619      	mov	r1, r3
 80097e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097e8:	f000 f8e8 	bl	80099bc <USBH_GetNextDesc>
 80097ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	785b      	ldrb	r3, [r3, #1]
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	d146      	bne.n	8009884 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80097f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097fa:	221a      	movs	r2, #26
 80097fc:	fb02 f303 	mul.w	r3, r2, r3
 8009800:	3308      	adds	r3, #8
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4413      	add	r3, r2
 8009806:	3302      	adds	r3, #2
 8009808:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800980a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800980c:	69f8      	ldr	r0, [r7, #28]
 800980e:	f000 f846 	bl	800989e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009818:	2300      	movs	r3, #0
 800981a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800981c:	e022      	b.n	8009864 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800981e:	f107 0316 	add.w	r3, r7, #22
 8009822:	4619      	mov	r1, r3
 8009824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009826:	f000 f8c9 	bl	80099bc <USBH_GetNextDesc>
 800982a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	2b05      	cmp	r3, #5
 8009832:	d117      	bne.n	8009864 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009838:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800983c:	3201      	adds	r2, #1
 800983e:	00d2      	lsls	r2, r2, #3
 8009840:	211a      	movs	r1, #26
 8009842:	fb01 f303 	mul.w	r3, r1, r3
 8009846:	4413      	add	r3, r2
 8009848:	3308      	adds	r3, #8
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	3304      	adds	r3, #4
 8009850:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009854:	69b8      	ldr	r0, [r7, #24]
 8009856:	f000 f851 	bl	80098fc <USBH_ParseEPDesc>
            ep_ix++;
 800985a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800985e:	3301      	adds	r3, #1
 8009860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	791b      	ldrb	r3, [r3, #4]
 8009868:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800986c:	429a      	cmp	r2, r3
 800986e:	d204      	bcs.n	800987a <USBH_ParseCfgDesc+0x120>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	885a      	ldrh	r2, [r3, #2]
 8009874:	8afb      	ldrh	r3, [r7, #22]
 8009876:	429a      	cmp	r2, r3
 8009878:	d8d1      	bhi.n	800981e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800987a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800987e:	3301      	adds	r3, #1
 8009880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009888:	2b01      	cmp	r3, #1
 800988a:	d804      	bhi.n	8009896 <USBH_ParseCfgDesc+0x13c>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	885a      	ldrh	r2, [r3, #2]
 8009890:	8afb      	ldrh	r3, [r7, #22]
 8009892:	429a      	cmp	r2, r3
 8009894:	d8a4      	bhi.n	80097e0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009896:	bf00      	nop
 8009898:	3728      	adds	r7, #40	; 0x28
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	785a      	ldrb	r2, [r3, #1]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	789a      	ldrb	r2, [r3, #2]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	78da      	ldrb	r2, [r3, #3]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	791a      	ldrb	r2, [r3, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	795a      	ldrb	r2, [r3, #5]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	799a      	ldrb	r2, [r3, #6]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	79da      	ldrb	r2, [r3, #7]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	7a1a      	ldrb	r2, [r3, #8]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	721a      	strb	r2, [r3, #8]
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781a      	ldrb	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	785a      	ldrb	r2, [r3, #1]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	789a      	ldrb	r2, [r3, #2]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	78da      	ldrb	r2, [r3, #3]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	3304      	adds	r3, #4
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	b29a      	uxth	r2, r3
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	3305      	adds	r3, #5
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	021b      	lsls	r3, r3, #8
 8009938:	b29b      	uxth	r3, r3
 800993a:	4313      	orrs	r3, r2
 800993c:	b29a      	uxth	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	799a      	ldrb	r2, [r3, #6]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	719a      	strb	r2, [r3, #6]
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009956:	b480      	push	{r7}
 8009958:	b087      	sub	sp, #28
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	60b9      	str	r1, [r7, #8]
 8009960:	4613      	mov	r3, r2
 8009962:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3301      	adds	r3, #1
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b03      	cmp	r3, #3
 800996c:	d120      	bne.n	80099b0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	1e9a      	subs	r2, r3, #2
 8009974:	88fb      	ldrh	r3, [r7, #6]
 8009976:	4293      	cmp	r3, r2
 8009978:	bf28      	it	cs
 800997a:	4613      	movcs	r3, r2
 800997c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3302      	adds	r3, #2
 8009982:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009984:	2300      	movs	r3, #0
 8009986:	82fb      	strh	r3, [r7, #22]
 8009988:	e00b      	b.n	80099a2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800998a:	8afb      	ldrh	r3, [r7, #22]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4413      	add	r3, r2
 8009990:	781a      	ldrb	r2, [r3, #0]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	3301      	adds	r3, #1
 800999a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800999c:	8afb      	ldrh	r3, [r7, #22]
 800999e:	3302      	adds	r3, #2
 80099a0:	82fb      	strh	r3, [r7, #22]
 80099a2:	8afa      	ldrh	r2, [r7, #22]
 80099a4:	8abb      	ldrh	r3, [r7, #20]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d3ef      	bcc.n	800998a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
  }
}
 80099b0:	bf00      	nop
 80099b2:	371c      	adds	r7, #28
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	881a      	ldrh	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	4413      	add	r3, r2
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4413      	add	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099e4:	68fb      	ldr	r3, [r7, #12]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	4613      	mov	r3, r2
 80099fe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009a00:	2301      	movs	r3, #1
 8009a02:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	789b      	ldrb	r3, [r3, #2]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d002      	beq.n	8009a12 <USBH_CtlReq+0x20>
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d00f      	beq.n	8009a30 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009a10:	e027      	b.n	8009a62 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	88fa      	ldrh	r2, [r7, #6]
 8009a1c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2202      	movs	r2, #2
 8009a28:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a2e:	e018      	b.n	8009a62 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 f81b 	bl	8009a6c <USBH_HandleControl>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <USBH_CtlReq+0x54>
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d106      	bne.n	8009a54 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	761a      	strb	r2, [r3, #24]
      break;
 8009a52:	e005      	b.n	8009a60 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d102      	bne.n	8009a60 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	709a      	strb	r2, [r3, #2]
      break;
 8009a60:	bf00      	nop
  }
  return status;
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a74:	2301      	movs	r3, #1
 8009a76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	7e1b      	ldrb	r3, [r3, #24]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	2b0a      	cmp	r3, #10
 8009a84:	f200 8158 	bhi.w	8009d38 <USBH_HandleControl+0x2cc>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <USBH_HandleControl+0x24>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009abd 	.word	0x08009abd
 8009a94:	08009ad7 	.word	0x08009ad7
 8009a98:	08009b41 	.word	0x08009b41
 8009a9c:	08009b67 	.word	0x08009b67
 8009aa0:	08009b9f 	.word	0x08009b9f
 8009aa4:	08009bcb 	.word	0x08009bcb
 8009aa8:	08009c1d 	.word	0x08009c1d
 8009aac:	08009c3f 	.word	0x08009c3f
 8009ab0:	08009c7b 	.word	0x08009c7b
 8009ab4:	08009ca3 	.word	0x08009ca3
 8009ab8:	08009ce1 	.word	0x08009ce1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f103 0110 	add.w	r1, r3, #16
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	795b      	ldrb	r3, [r3, #5]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f945 	bl	8009d58 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	761a      	strb	r2, [r3, #24]
      break;
 8009ad4:	e13b      	b.n	8009d4e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	795b      	ldrb	r3, [r3, #5]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f003 f933 	bl	800cd48 <USBH_LL_GetURBState>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d11e      	bne.n	8009b2a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	7c1b      	ldrb	r3, [r3, #16]
 8009af0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009af4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	8adb      	ldrh	r3, [r3, #22]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009afe:	7b7b      	ldrb	r3, [r7, #13]
 8009b00:	2b80      	cmp	r3, #128	; 0x80
 8009b02:	d103      	bne.n	8009b0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2203      	movs	r2, #3
 8009b08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b0a:	e117      	b.n	8009d3c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2205      	movs	r2, #5
 8009b10:	761a      	strb	r2, [r3, #24]
      break;
 8009b12:	e113      	b.n	8009d3c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8009b14:	7b7b      	ldrb	r3, [r7, #13]
 8009b16:	2b80      	cmp	r3, #128	; 0x80
 8009b18:	d103      	bne.n	8009b22 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2209      	movs	r2, #9
 8009b1e:	761a      	strb	r2, [r3, #24]
      break;
 8009b20:	e10c      	b.n	8009d3c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2207      	movs	r2, #7
 8009b26:	761a      	strb	r2, [r3, #24]
      break;
 8009b28:	e108      	b.n	8009d3c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d003      	beq.n	8009b38 <USBH_HandleControl+0xcc>
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	f040 8102 	bne.w	8009d3c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	220b      	movs	r2, #11
 8009b3c:	761a      	strb	r2, [r3, #24]
      break;
 8009b3e:	e0fd      	b.n	8009d3c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6899      	ldr	r1, [r3, #8]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	899a      	ldrh	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	791b      	ldrb	r3, [r3, #4]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f93c 	bl	8009dd6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2204      	movs	r2, #4
 8009b62:	761a      	strb	r2, [r3, #24]
      break;
 8009b64:	e0f3      	b.n	8009d4e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	791b      	ldrb	r3, [r3, #4]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f003 f8eb 	bl	800cd48 <USBH_LL_GetURBState>
 8009b72:	4603      	mov	r3, r0
 8009b74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d102      	bne.n	8009b82 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2209      	movs	r2, #9
 8009b80:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	2b05      	cmp	r3, #5
 8009b86:	d102      	bne.n	8009b8e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b8c:	e0d8      	b.n	8009d40 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	f040 80d5 	bne.w	8009d40 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	220b      	movs	r2, #11
 8009b9a:	761a      	strb	r2, [r3, #24]
      break;
 8009b9c:	e0d0      	b.n	8009d40 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6899      	ldr	r1, [r3, #8]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	899a      	ldrh	r2, [r3, #12]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7958      	ldrb	r0, [r3, #5]
 8009baa:	2301      	movs	r3, #1
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	4603      	mov	r3, r0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f8eb 	bl	8009d8c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2206      	movs	r2, #6
 8009bc6:	761a      	strb	r2, [r3, #24]
      break;
 8009bc8:	e0c1      	b.n	8009d4e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	795b      	ldrb	r3, [r3, #5]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f003 f8b9 	bl	800cd48 <USBH_LL_GetURBState>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d103      	bne.n	8009be8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2207      	movs	r2, #7
 8009be4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009be6:	e0ad      	b.n	8009d44 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2b05      	cmp	r3, #5
 8009bec:	d105      	bne.n	8009bfa <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	220c      	movs	r2, #12
 8009bf2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf8:	e0a4      	b.n	8009d44 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d103      	bne.n	8009c08 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2205      	movs	r2, #5
 8009c04:	761a      	strb	r2, [r3, #24]
      break;
 8009c06:	e09d      	b.n	8009d44 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	2b04      	cmp	r3, #4
 8009c0c:	f040 809a 	bne.w	8009d44 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	220b      	movs	r2, #11
 8009c14:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009c16:	2302      	movs	r3, #2
 8009c18:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1a:	e093      	b.n	8009d44 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	791b      	ldrb	r3, [r3, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	2100      	movs	r1, #0
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f8d6 	bl	8009dd6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2208      	movs	r2, #8
 8009c3a:	761a      	strb	r2, [r3, #24]

      break;
 8009c3c:	e087      	b.n	8009d4e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	791b      	ldrb	r3, [r3, #4]
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f003 f87f 	bl	800cd48 <USBH_LL_GetURBState>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d105      	bne.n	8009c60 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	220d      	movs	r2, #13
 8009c58:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c5e:	e073      	b.n	8009d48 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d103      	bne.n	8009c6e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	220b      	movs	r2, #11
 8009c6a:	761a      	strb	r2, [r3, #24]
      break;
 8009c6c:	e06c      	b.n	8009d48 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
 8009c70:	2b05      	cmp	r3, #5
 8009c72:	d169      	bne.n	8009d48 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8009c74:	2303      	movs	r3, #3
 8009c76:	73fb      	strb	r3, [r7, #15]
      break;
 8009c78:	e066      	b.n	8009d48 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	795a      	ldrb	r2, [r3, #5]
 8009c7e:	2301      	movs	r3, #1
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	4613      	mov	r3, r2
 8009c84:	2200      	movs	r2, #0
 8009c86:	2100      	movs	r1, #0
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f87f 	bl	8009d8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	761a      	strb	r2, [r3, #24]
      break;
 8009ca0:	e055      	b.n	8009d4e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	795b      	ldrb	r3, [r3, #5]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f003 f84d 	bl	800cd48 <USBH_LL_GetURBState>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d105      	bne.n	8009cc4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	220d      	movs	r2, #13
 8009cc0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009cc2:	e043      	b.n	8009d4c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d103      	bne.n	8009cd2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2209      	movs	r2, #9
 8009cce:	761a      	strb	r2, [r3, #24]
      break;
 8009cd0:	e03c      	b.n	8009d4c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b04      	cmp	r3, #4
 8009cd6:	d139      	bne.n	8009d4c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	220b      	movs	r2, #11
 8009cdc:	761a      	strb	r2, [r3, #24]
      break;
 8009cde:	e035      	b.n	8009d4c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	7e5b      	ldrb	r3, [r3, #25]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	765a      	strb	r2, [r3, #25]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	7e5b      	ldrb	r3, [r3, #25]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d806      	bhi.n	8009d02 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009d00:	e025      	b.n	8009d4e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d08:	2106      	movs	r1, #6
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	795b      	ldrb	r3, [r3, #5]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f90c 	bl	8009f38 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	791b      	ldrb	r3, [r3, #4]
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f906 	bl	8009f38 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009d32:	2302      	movs	r3, #2
 8009d34:	73fb      	strb	r3, [r7, #15]
      break;
 8009d36:	e00a      	b.n	8009d4e <USBH_HandleControl+0x2e2>

    default:
      break;
 8009d38:	bf00      	nop
 8009d3a:	e008      	b.n	8009d4e <USBH_HandleControl+0x2e2>
      break;
 8009d3c:	bf00      	nop
 8009d3e:	e006      	b.n	8009d4e <USBH_HandleControl+0x2e2>
      break;
 8009d40:	bf00      	nop
 8009d42:	e004      	b.n	8009d4e <USBH_HandleControl+0x2e2>
      break;
 8009d44:	bf00      	nop
 8009d46:	e002      	b.n	8009d4e <USBH_HandleControl+0x2e2>
      break;
 8009d48:	bf00      	nop
 8009d4a:	e000      	b.n	8009d4e <USBH_HandleControl+0x2e2>
      break;
 8009d4c:	bf00      	nop
  }

  return status;
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af04      	add	r7, sp, #16
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	4613      	mov	r3, r2
 8009d64:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009d66:	79f9      	ldrb	r1, [r7, #7]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9303      	str	r3, [sp, #12]
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	9302      	str	r3, [sp, #8]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	2300      	movs	r3, #0
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f002 ffb2 	bl	800cce6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af04      	add	r7, sp, #16
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	4611      	mov	r1, r2
 8009d98:	461a      	mov	r2, r3
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	80fb      	strh	r3, [r7, #6]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009db0:	7979      	ldrb	r1, [r7, #5]
 8009db2:	7e3b      	ldrb	r3, [r7, #24]
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	9302      	str	r3, [sp, #8]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f002 ff8d 	bl	800cce6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b088      	sub	sp, #32
 8009dda:	af04      	add	r7, sp, #16
 8009ddc:	60f8      	str	r0, [r7, #12]
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	4611      	mov	r1, r2
 8009de2:	461a      	mov	r2, r3
 8009de4:	460b      	mov	r3, r1
 8009de6:	80fb      	strh	r3, [r7, #6]
 8009de8:	4613      	mov	r3, r2
 8009dea:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009dec:	7979      	ldrb	r1, [r7, #5]
 8009dee:	2300      	movs	r3, #0
 8009df0:	9303      	str	r3, [sp, #12]
 8009df2:	88fb      	ldrh	r3, [r7, #6]
 8009df4:	9302      	str	r3, [sp, #8]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	2201      	movs	r2, #1
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f002 ff6f 	bl	800cce6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009e08:	2300      	movs	r3, #0

}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b088      	sub	sp, #32
 8009e16:	af04      	add	r7, sp, #16
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	461a      	mov	r2, r3
 8009e20:	460b      	mov	r3, r1
 8009e22:	80fb      	strh	r3, [r7, #6]
 8009e24:	4613      	mov	r3, r2
 8009e26:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e36:	7979      	ldrb	r1, [r7, #5]
 8009e38:	7e3b      	ldrb	r3, [r7, #24]
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	88fb      	ldrh	r3, [r7, #6]
 8009e3e:	9302      	str	r3, [sp, #8]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	9301      	str	r3, [sp, #4]
 8009e44:	2301      	movs	r3, #1
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	2302      	movs	r3, #2
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f002 ff4a 	bl	800cce6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af04      	add	r7, sp, #16
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	4611      	mov	r1, r2
 8009e68:	461a      	mov	r2, r3
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	80fb      	strh	r3, [r7, #6]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e72:	7979      	ldrb	r1, [r7, #5]
 8009e74:	2300      	movs	r3, #0
 8009e76:	9303      	str	r3, [sp, #12]
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	9302      	str	r3, [sp, #8]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	2301      	movs	r3, #1
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	2302      	movs	r3, #2
 8009e86:	2201      	movs	r2, #1
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f002 ff2c 	bl	800cce6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af04      	add	r7, sp, #16
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	70fb      	strb	r3, [r7, #3]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70bb      	strb	r3, [r7, #2]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009eb2:	7878      	ldrb	r0, [r7, #1]
 8009eb4:	78ba      	ldrb	r2, [r7, #2]
 8009eb6:	78f9      	ldrb	r1, [r7, #3]
 8009eb8:	8b3b      	ldrh	r3, [r7, #24]
 8009eba:	9302      	str	r3, [sp, #8]
 8009ebc:	7d3b      	ldrb	r3, [r7, #20]
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	7c3b      	ldrb	r3, [r7, #16]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f002 febf 	bl	800cc4a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f002 fede 	bl	800cca8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f836 	bl	8009f74 <USBH_GetFreePipe>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009f0c:	89fb      	ldrh	r3, [r7, #14]
 8009f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00a      	beq.n	8009f2c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009f16:	78fa      	ldrb	r2, [r7, #3]
 8009f18:	89fb      	ldrh	r3, [r7, #14]
 8009f1a:	f003 030f 	and.w	r3, r3, #15
 8009f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	33e0      	adds	r3, #224	; 0xe0
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009f2c:	89fb      	ldrh	r3, [r7, #14]
 8009f2e:	b2db      	uxtb	r3, r3
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	2b0a      	cmp	r3, #10
 8009f48:	d80d      	bhi.n	8009f66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	33e0      	adds	r3, #224	; 0xe0
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	78fb      	ldrb	r3, [r7, #3]
 8009f58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	33e0      	adds	r3, #224	; 0xe0
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]
 8009f84:	e00f      	b.n	8009fa6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	33e0      	adds	r3, #224	; 0xe0
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d102      	bne.n	8009fa0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	e007      	b.n	8009fb0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	73fb      	strb	r3, [r7, #15]
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	2b0a      	cmp	r3, #10
 8009faa:	d9ec      	bls.n	8009f86 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	4a08      	ldr	r2, [pc, #32]	; (8009fec <disk_status+0x30>)
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	79fa      	ldrb	r2, [r7, #7]
 8009fd4:	4905      	ldr	r1, [pc, #20]	; (8009fec <disk_status+0x30>)
 8009fd6:	440a      	add	r2, r1
 8009fd8:	7a12      	ldrb	r2, [r2, #8]
 8009fda:	4610      	mov	r0, r2
 8009fdc:	4798      	blx	r3
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20001114 	.word	0x20001114

08009ff0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	4a0d      	ldr	r2, [pc, #52]	; (800a038 <disk_initialize+0x48>)
 800a002:	5cd3      	ldrb	r3, [r2, r3]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d111      	bne.n	800a02c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	4a0b      	ldr	r2, [pc, #44]	; (800a038 <disk_initialize+0x48>)
 800a00c:	2101      	movs	r1, #1
 800a00e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a010:	79fb      	ldrb	r3, [r7, #7]
 800a012:	4a09      	ldr	r2, [pc, #36]	; (800a038 <disk_initialize+0x48>)
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	79fa      	ldrb	r2, [r7, #7]
 800a01e:	4906      	ldr	r1, [pc, #24]	; (800a038 <disk_initialize+0x48>)
 800a020:	440a      	add	r2, r1
 800a022:	7a12      	ldrb	r2, [r2, #8]
 800a024:	4610      	mov	r0, r2
 800a026:	4798      	blx	r3
 800a028:	4603      	mov	r3, r0
 800a02a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20001114 	.word	0x20001114

0800a03c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a03c:	b590      	push	{r4, r7, lr}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	607a      	str	r2, [r7, #4]
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	4a0a      	ldr	r2, [pc, #40]	; (800a078 <disk_read+0x3c>)
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	689c      	ldr	r4, [r3, #8]
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	4a07      	ldr	r2, [pc, #28]	; (800a078 <disk_read+0x3c>)
 800a05c:	4413      	add	r3, r2
 800a05e:	7a18      	ldrb	r0, [r3, #8]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	47a0      	blx	r4
 800a068:	4603      	mov	r3, r0
 800a06a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	371c      	adds	r7, #28
 800a072:	46bd      	mov	sp, r7
 800a074:	bd90      	pop	{r4, r7, pc}
 800a076:	bf00      	nop
 800a078:	20001114 	.word	0x20001114

0800a07c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a07c:	b590      	push	{r4, r7, lr}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	4a0a      	ldr	r2, [pc, #40]	; (800a0b8 <disk_write+0x3c>)
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	68dc      	ldr	r4, [r3, #12]
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	4a07      	ldr	r2, [pc, #28]	; (800a0b8 <disk_write+0x3c>)
 800a09c:	4413      	add	r3, r2
 800a09e:	7a18      	ldrb	r0, [r3, #8]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	47a0      	blx	r4
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd90      	pop	{r4, r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20001114 	.word	0x20001114

0800a0bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	603a      	str	r2, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	4a09      	ldr	r2, [pc, #36]	; (800a0f4 <disk_ioctl+0x38>)
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	79fa      	ldrb	r2, [r7, #7]
 800a0da:	4906      	ldr	r1, [pc, #24]	; (800a0f4 <disk_ioctl+0x38>)
 800a0dc:	440a      	add	r2, r1
 800a0de:	7a10      	ldrb	r0, [r2, #8]
 800a0e0:	79b9      	ldrb	r1, [r7, #6]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	4798      	blx	r3
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73fb      	strb	r3, [r7, #15]
  return res;
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20001114 	.word	0x20001114

0800a0f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)  /*	 Load a 2-byte little-endian word */
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
   WORD  rv;


   rv = ptr[1];
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3301      	adds	r3, #1
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	81fb      	strh	r3, [r7, #14]
   rv = rv << 8 | ptr[0];
 800a108:	89fb      	ldrh	r3, [r7, #14]
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	b21a      	sxth	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	b21b      	sxth	r3, r3
 800a114:	4313      	orrs	r3, r2
 800a116:	b21b      	sxth	r3, r3
 800a118:	81fb      	strh	r3, [r7, #14]
   return rv;
 800a11a:	89fb      	ldrh	r3, [r7, #14]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)        /* Load a 4-byte little-endian word */
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
   DWORD  rv;


   rv = ptr[3];
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3303      	adds	r3, #3
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	60fb      	str	r3, [r7, #12]
   rv = rv << 8 | ptr[2];
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	3202      	adds	r2, #2
 800a140:	7812      	ldrb	r2, [r2, #0]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]
   rv = rv << 8 | ptr[1];
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	021b      	lsls	r3, r3, #8
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	3201      	adds	r2, #1
 800a14e:	7812      	ldrb	r2, [r2, #0]
 800a150:	4313      	orrs	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
   rv = rv << 8 | ptr[0];
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	7812      	ldrb	r2, [r2, #0]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
   return rv;
 800a160:	68fb      	ldr	r3, [r7, #12]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)      /* Store a 2-byte word in little-endian */
{
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	460b      	mov	r3, r1
 800a178:	807b      	strh	r3, [r7, #2]
   *ptr++ = (BYTE)val; val >>= 8;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	887a      	ldrh	r2, [r7, #2]
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	887b      	ldrh	r3, [r7, #2]
 800a188:	0a1b      	lsrs	r3, r3, #8
 800a18a:	807b      	strh	r3, [r7, #2]
   *ptr++ = (BYTE)val;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	1c5a      	adds	r2, r3, #1
 800a190:	607a      	str	r2, [r7, #4]
 800a192:	887a      	ldrh	r2, [r7, #2]
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	701a      	strb	r2, [r3, #0]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)    /* Store a 4-byte word in little-endian */
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
   *ptr++ = (BYTE)val; val >>= 8;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	701a      	strb	r2, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	0a1b      	lsrs	r3, r3, #8
 800a1be:	603b      	str	r3, [r7, #0]
   *ptr++ = (BYTE)val; val >>= 8;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	b2d2      	uxtb	r2, r2
 800a1ca:	701a      	strb	r2, [r3, #0]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	603b      	str	r3, [r7, #0]
   *ptr++ = (BYTE)val; val >>= 8;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	b2d2      	uxtb	r2, r2
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	0a1b      	lsrs	r3, r3, #8
 800a1e2:	603b      	str	r3, [r7, #0]
   *ptr++ = (BYTE)val;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	b2d2      	uxtb	r2, r2
 800a1ee:	701a      	strb	r2, [r3, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
   BYTE        *d = (BYTE*)dst;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	617b      	str	r3, [r7, #20]
   const BYTE  *s = (const BYTE*)src;
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	613b      	str	r3, [r7, #16]


   if (cnt)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00d      	beq.n	800a232 <mem_cpy+0x36>
   {
      do {
         *d++ = *s++;
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	1c53      	adds	r3, r2, #1
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	1c59      	adds	r1, r3, #1
 800a220:	6179      	str	r1, [r7, #20]
 800a222:	7812      	ldrb	r2, [r2, #0]
 800a224:	701a      	strb	r2, [r3, #0]
      } while (--cnt);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3b01      	subs	r3, #1
 800a22a:	607b      	str	r3, [r7, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f1      	bne.n	800a216 <mem_cpy+0x1a>
   }
}
 800a232:	bf00      	nop
 800a234:	371c      	adds	r7, #28
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a23e:	b480      	push	{r7}
 800a240:	b087      	sub	sp, #28
 800a242:	af00      	add	r7, sp, #0
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	60b9      	str	r1, [r7, #8]
 800a248:	607a      	str	r2, [r7, #4]
   BYTE  *d = (BYTE*)dst;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	617b      	str	r3, [r7, #20]


   do {
      *d++ = (BYTE)val;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	617a      	str	r2, [r7, #20]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	b2d2      	uxtb	r2, r2
 800a258:	701a      	strb	r2, [r3, #0]
   } while (--cnt);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	607b      	str	r3, [r7, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1f3      	bne.n	800a24e <mem_set+0x10>
}
 800a266:	bf00      	nop
 800a268:	371c      	adds	r7, #28
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {      /* ZR:same, NZ:different */
 800a272:	b480      	push	{r7}
 800a274:	b089      	sub	sp, #36	; 0x24
 800a276:	af00      	add	r7, sp, #0
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	60b9      	str	r1, [r7, #8]
 800a27c:	607a      	str	r2, [r7, #4]
   const BYTE  *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	61fb      	str	r3, [r7, #28]
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	61bb      	str	r3, [r7, #24]
   int         r = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	617b      	str	r3, [r7, #20]


   do {
      r = *d++ - *s++;
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	61fa      	str	r2, [r7, #28]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	4619      	mov	r1, r3
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	61ba      	str	r2, [r7, #24]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	1acb      	subs	r3, r1, r3
 800a29e:	617b      	str	r3, [r7, #20]
   } while (--cnt && r == 0);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	607b      	str	r3, [r7, #4]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <mem_cmp+0x40>
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0eb      	beq.n	800a28a <mem_cmp+0x18>

   return r;
 800a2b2:	697b      	ldr	r3, [r7, #20]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3724      	adds	r7, #36	; 0x24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {        /* NZ:contained, ZR:not contained */
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
   while (*str && *str != chr) str++;
 800a2ca:	e002      	b.n	800a2d2 <chk_chr+0x12>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	607b      	str	r3, [r7, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <chk_chr+0x26>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d1f2      	bne.n	800a2cc <chk_chr+0xc>
   return *str;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
	...

0800a2f8 <chk_lock>:
static
FRESULT chk_lock (      /* Check if the file can be accessed */
   DIR* dp,                     /* Directory object pointing the file to be checked */
   int acc                      /* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
                 )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
   UINT  i, be;


   /* Search file semaphore table */
   for (i = be = 0; i < _FS_LOCK; i++) {
 800a302:	2300      	movs	r3, #0
 800a304:	60bb      	str	r3, [r7, #8]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	e029      	b.n	800a360 <chk_lock+0x68>
      if (Files[i].fs)                  /* Existing entry */
 800a30c:	4a27      	ldr	r2, [pc, #156]	; (800a3ac <chk_lock+0xb4>)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	4413      	add	r3, r2
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d01d      	beq.n	800a356 <chk_lock+0x5e>
      {
         if (Files[i].fs == dp->obj.fs &&                               /* Check if the object matched with an open object */
 800a31a:	4a24      	ldr	r2, [pc, #144]	; (800a3ac <chk_lock+0xb4>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	4413      	add	r3, r2
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d116      	bne.n	800a35a <chk_lock+0x62>
             Files[i].clu == dp->obj.sclust &&
 800a32c:	4a1f      	ldr	r2, [pc, #124]	; (800a3ac <chk_lock+0xb4>)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	011b      	lsls	r3, r3, #4
 800a332:	4413      	add	r3, r2
 800a334:	3304      	adds	r3, #4
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
         if (Files[i].fs == dp->obj.fs &&                               /* Check if the object matched with an open object */
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d10c      	bne.n	800a35a <chk_lock+0x62>
             Files[i].ofs == dp->dptr) break;
 800a340:	4a1a      	ldr	r2, [pc, #104]	; (800a3ac <chk_lock+0xb4>)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	4413      	add	r3, r2
 800a348:	3308      	adds	r3, #8
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	695b      	ldr	r3, [r3, #20]
             Files[i].clu == dp->obj.sclust &&
 800a350:	429a      	cmp	r2, r3
 800a352:	d102      	bne.n	800a35a <chk_lock+0x62>
             Files[i].ofs == dp->dptr) break;
 800a354:	e007      	b.n	800a366 <chk_lock+0x6e>
      }
      else                                      /* Blank entry */
      {
         be = 1;
 800a356:	2301      	movs	r3, #1
 800a358:	60bb      	str	r3, [r7, #8]
   for (i = be = 0; i < _FS_LOCK; i++) {
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d9d2      	bls.n	800a30c <chk_lock+0x14>
      }
   }
   if (i == _FS_LOCK)           /* The object is not opened */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d109      	bne.n	800a380 <chk_lock+0x88>
   {
      return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;                 /* Is there a blank entry for new object? */
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d102      	bne.n	800a378 <chk_lock+0x80>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d101      	bne.n	800a37c <chk_lock+0x84>
 800a378:	2300      	movs	r3, #0
 800a37a:	e010      	b.n	800a39e <chk_lock+0xa6>
 800a37c:	2312      	movs	r3, #18
 800a37e:	e00e      	b.n	800a39e <chk_lock+0xa6>
   }

   /* The object has been opened. Reject any open against writing file and all write mode open */
   return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d108      	bne.n	800a398 <chk_lock+0xa0>
 800a386:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <chk_lock+0xb4>)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	4413      	add	r3, r2
 800a38e:	330c      	adds	r3, #12
 800a390:	881b      	ldrh	r3, [r3, #0]
 800a392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a396:	d101      	bne.n	800a39c <chk_lock+0xa4>
 800a398:	2310      	movs	r3, #16
 800a39a:	e000      	b.n	800a39e <chk_lock+0xa6>
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	200010f4 	.word	0x200010f4

0800a3b0 <enq_lock>:


static
int enq_lock (void)     /* Check if an entry is available for a new object */
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
   UINT  i;


   for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	e002      	b.n	800a3c2 <enq_lock+0x12>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	607b      	str	r3, [r7, #4]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d806      	bhi.n	800a3d6 <enq_lock+0x26>
 800a3c8:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <enq_lock+0x40>)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	4413      	add	r3, r2
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1f2      	bne.n	800a3bc <enq_lock+0xc>
   return (i == _FS_LOCK) ? 0 : 1;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	bf14      	ite	ne
 800a3dc:	2301      	movne	r3, #1
 800a3de:	2300      	moveq	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	200010f4 	.word	0x200010f4

0800a3f4 <inc_lock>:
static
UINT inc_lock ( /* Increment object open counter and returns its index (0:Internal error) */
   DIR* dp,             /* Directory object pointing the file to register or increment */
   int acc              /* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
              )
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
   UINT  i;


   for (i = 0; i < _FS_LOCK; i++) {             /* Find the object */
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	e01f      	b.n	800a444 <inc_lock+0x50>
      if (Files[i].fs == dp->obj.fs &&
 800a404:	4a41      	ldr	r2, [pc, #260]	; (800a50c <inc_lock+0x118>)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	011b      	lsls	r3, r3, #4
 800a40a:	4413      	add	r3, r2
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	429a      	cmp	r2, r3
 800a414:	d113      	bne.n	800a43e <inc_lock+0x4a>
          Files[i].clu == dp->obj.sclust &&
 800a416:	4a3d      	ldr	r2, [pc, #244]	; (800a50c <inc_lock+0x118>)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	4413      	add	r3, r2
 800a41e:	3304      	adds	r3, #4
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	689b      	ldr	r3, [r3, #8]
      if (Files[i].fs == dp->obj.fs &&
 800a426:	429a      	cmp	r2, r3
 800a428:	d109      	bne.n	800a43e <inc_lock+0x4a>
          Files[i].ofs == dp->dptr) break;
 800a42a:	4a38      	ldr	r2, [pc, #224]	; (800a50c <inc_lock+0x118>)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	4413      	add	r3, r2
 800a432:	3308      	adds	r3, #8
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	695b      	ldr	r3, [r3, #20]
          Files[i].clu == dp->obj.sclust &&
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d006      	beq.n	800a44c <inc_lock+0x58>
   for (i = 0; i < _FS_LOCK; i++) {             /* Find the object */
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d9dc      	bls.n	800a404 <inc_lock+0x10>
 800a44a:	e000      	b.n	800a44e <inc_lock+0x5a>
          Files[i].ofs == dp->dptr) break;
 800a44c:	bf00      	nop
   }

   if (i == _FS_LOCK)                                   /* Not opened. Register it as new. */
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d132      	bne.n	800a4ba <inc_lock+0xc6>
   {
      for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	e002      	b.n	800a460 <inc_lock+0x6c>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3301      	adds	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d806      	bhi.n	800a474 <inc_lock+0x80>
 800a466:	4a29      	ldr	r2, [pc, #164]	; (800a50c <inc_lock+0x118>)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	4413      	add	r3, r2
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1f2      	bne.n	800a45a <inc_lock+0x66>
      if (i == _FS_LOCK) return 0;              /* No free entry to register (int err) */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b02      	cmp	r3, #2
 800a478:	d101      	bne.n	800a47e <inc_lock+0x8a>
 800a47a:	2300      	movs	r3, #0
 800a47c:	e040      	b.n	800a500 <inc_lock+0x10c>

      Files[i].fs = dp->obj.fs;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4922      	ldr	r1, [pc, #136]	; (800a50c <inc_lock+0x118>)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	440b      	add	r3, r1
 800a48a:	601a      	str	r2, [r3, #0]
      Files[i].clu = dp->obj.sclust;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	491e      	ldr	r1, [pc, #120]	; (800a50c <inc_lock+0x118>)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	011b      	lsls	r3, r3, #4
 800a496:	440b      	add	r3, r1
 800a498:	3304      	adds	r3, #4
 800a49a:	601a      	str	r2, [r3, #0]
      Files[i].ofs = dp->dptr;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	695a      	ldr	r2, [r3, #20]
 800a4a0:	491a      	ldr	r1, [pc, #104]	; (800a50c <inc_lock+0x118>)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	011b      	lsls	r3, r3, #4
 800a4a6:	440b      	add	r3, r1
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	601a      	str	r2, [r3, #0]
      Files[i].ctr = 0;
 800a4ac:	4a17      	ldr	r2, [pc, #92]	; (800a50c <inc_lock+0x118>)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	4413      	add	r3, r2
 800a4b4:	330c      	adds	r3, #12
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	801a      	strh	r2, [r3, #0]
   }

   if (acc && Files[i].ctr) return 0;           /* Access violation (int err) */
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d009      	beq.n	800a4d4 <inc_lock+0xe0>
 800a4c0:	4a12      	ldr	r2, [pc, #72]	; (800a50c <inc_lock+0x118>)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	011b      	lsls	r3, r3, #4
 800a4c6:	4413      	add	r3, r2
 800a4c8:	330c      	adds	r3, #12
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <inc_lock+0xe0>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e015      	b.n	800a500 <inc_lock+0x10c>

   Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;       /* Set semaphore value */
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d108      	bne.n	800a4ec <inc_lock+0xf8>
 800a4da:	4a0c      	ldr	r2, [pc, #48]	; (800a50c <inc_lock+0x118>)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	4413      	add	r3, r2
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	e001      	b.n	800a4f0 <inc_lock+0xfc>
 800a4ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4f0:	4906      	ldr	r1, [pc, #24]	; (800a50c <inc_lock+0x118>)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	011b      	lsls	r3, r3, #4
 800a4f6:	440b      	add	r3, r1
 800a4f8:	330c      	adds	r3, #12
 800a4fa:	801a      	strh	r2, [r3, #0]

   return i + 1;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3301      	adds	r3, #1
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	200010f4 	.word	0x200010f4

0800a510 <dec_lock>:

static
FRESULT dec_lock (      /* Decrement object open counter */
   UINT i                       /* Semaphore index (1..) */
                 )
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
   WORD     n;
   FRESULT  res;


   if (--i < _FS_LOCK)          /* Shift index number origin from 0 */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3b01      	subs	r3, #1
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d825      	bhi.n	800a570 <dec_lock+0x60>
   {
      n = Files[i].ctr;
 800a524:	4a17      	ldr	r2, [pc, #92]	; (800a584 <dec_lock+0x74>)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	011b      	lsls	r3, r3, #4
 800a52a:	4413      	add	r3, r2
 800a52c:	330c      	adds	r3, #12
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	81fb      	strh	r3, [r7, #14]
      if (n == 0x100) n = 0;                    /* If write mode open, delete the entry */
 800a532:	89fb      	ldrh	r3, [r7, #14]
 800a534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a538:	d101      	bne.n	800a53e <dec_lock+0x2e>
 800a53a:	2300      	movs	r3, #0
 800a53c:	81fb      	strh	r3, [r7, #14]

      if (n > 0) n--;                                   /* Decrement read mode open count */
 800a53e:	89fb      	ldrh	r3, [r7, #14]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <dec_lock+0x3a>
 800a544:	89fb      	ldrh	r3, [r7, #14]
 800a546:	3b01      	subs	r3, #1
 800a548:	81fb      	strh	r3, [r7, #14]

      Files[i].ctr = n;
 800a54a:	4a0e      	ldr	r2, [pc, #56]	; (800a584 <dec_lock+0x74>)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	011b      	lsls	r3, r3, #4
 800a550:	4413      	add	r3, r2
 800a552:	330c      	adds	r3, #12
 800a554:	89fa      	ldrh	r2, [r7, #14]
 800a556:	801a      	strh	r2, [r3, #0]
      if (n == 0) Files[i].fs = 0;              /* Delete the entry if open count gets zero */
 800a558:	89fb      	ldrh	r3, [r7, #14]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d105      	bne.n	800a56a <dec_lock+0x5a>
 800a55e:	4a09      	ldr	r2, [pc, #36]	; (800a584 <dec_lock+0x74>)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	4413      	add	r3, r2
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]

      res = FR_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	737b      	strb	r3, [r7, #13]
 800a56e:	e001      	b.n	800a574 <dec_lock+0x64>
   }
   else
   {
      res = FR_INT_ERR;                                 /* Invalid index nunber */
 800a570:	2302      	movs	r3, #2
 800a572:	737b      	strb	r3, [r7, #13]
   }

   return res;
 800a574:	7b7b      	ldrb	r3, [r7, #13]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	200010f4 	.word	0x200010f4

0800a588 <clear_lock>:

static
void clear_lock (       /* Clear lock entries of the volume */
   FATFS *fs
                )
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
   UINT  i;


   for (i = 0; i < _FS_LOCK; i++) {
 800a590:	2300      	movs	r3, #0
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	e010      	b.n	800a5b8 <clear_lock+0x30>
      if (Files[i].fs == fs) Files[i].fs = 0;
 800a596:	4a0d      	ldr	r2, [pc, #52]	; (800a5cc <clear_lock+0x44>)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	4413      	add	r3, r2
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d105      	bne.n	800a5b2 <clear_lock+0x2a>
 800a5a6:	4a09      	ldr	r2, [pc, #36]	; (800a5cc <clear_lock+0x44>)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	4413      	add	r3, r2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]
   for (i = 0; i < _FS_LOCK; i++) {
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d9eb      	bls.n	800a596 <clear_lock+0xe>
   }
}
 800a5be:	bf00      	nop
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	200010f4 	.word	0x200010f4

0800a5d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (   /* Returns FR_OK or FR_DISK_ERROR */
   FATFS* fs                            /* File system object */
                    )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
   DWORD    wsect;
   UINT     nf;
   FRESULT  res = FR_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73fb      	strb	r3, [r7, #15]


   if (fs->wflag)               /* Write back the sector if it is dirty */
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	78db      	ldrb	r3, [r3, #3]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d034      	beq.n	800a64e <sync_window+0x7e>
   {
      wsect = fs->winsect;              /* Current sector number */
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e8:	617b      	str	r3, [r7, #20]
      if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	7858      	ldrb	r0, [r3, #1]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	f7ff fd40 	bl	800a07c <disk_write>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <sync_window+0x38>
      {
         res = FR_DISK_ERR;
 800a602:	2301      	movs	r3, #1
 800a604:	73fb      	strb	r3, [r7, #15]
 800a606:	e022      	b.n	800a64e <sync_window+0x7e>
      }
      else
      {
         fs->wflag = 0;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	70da      	strb	r2, [r3, #3]
         if (wsect - fs->fatbase < fs->fsize)                           /* Is it in the FAT area? */
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	1ad2      	subs	r2, r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d217      	bcs.n	800a64e <sync_window+0x7e>
         {
            for (nf = fs->n_fats; nf >= 2; nf--) {                      /* Reflect the change to all FAT copies */
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	789b      	ldrb	r3, [r3, #2]
 800a622:	613b      	str	r3, [r7, #16]
 800a624:	e010      	b.n	800a648 <sync_window+0x78>
               wsect += fs->fsize;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4413      	add	r3, r2
 800a62e:	617b      	str	r3, [r7, #20]
               disk_write(fs->drv, fs->win, wsect, 1);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	7858      	ldrb	r0, [r3, #1]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a63a:	2301      	movs	r3, #1
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	f7ff fd1d 	bl	800a07c <disk_write>
            for (nf = fs->n_fats; nf >= 2; nf--) {                      /* Reflect the change to all FAT copies */
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	3b01      	subs	r3, #1
 800a646:	613b      	str	r3, [r7, #16]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d8eb      	bhi.n	800a626 <sync_window+0x56>
            }
         }
      }
   }

   return res;
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <move_window>:
static
FRESULT move_window (   /* Returns FR_OK or FR_DISK_ERROR */
   FATFS* fs,                           /* File system object */
   DWORD sector                 /* Sector number to make appearance in the fs->win[] */
                    )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
   FRESULT  res = FR_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]


   if (sector != fs->winsect)           /* Window offset changed? */
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d01b      	beq.n	800a6a8 <move_window+0x50>
   {
      #if !_FS_READONLY
      res = sync_window(fs);                    /* Write-back changes */
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ffad 	bl	800a5d0 <sync_window>
 800a676:	4603      	mov	r3, r0
 800a678:	73fb      	strb	r3, [r7, #15]
      #endif
      if (res == FR_OK)                                 /* Fill sector window with new data */
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d113      	bne.n	800a6a8 <move_window+0x50>
      {
         if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	7858      	ldrb	r0, [r3, #1]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a68a:	2301      	movs	r3, #1
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	f7ff fcd5 	bl	800a03c <disk_read>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d004      	beq.n	800a6a2 <move_window+0x4a>
         {
            sector = 0xFFFFFFFF;                        /* Invalidate window if data is not reliable */
 800a698:	f04f 33ff 	mov.w	r3, #4294967295
 800a69c:	603b      	str	r3, [r7, #0]
            res = FR_DISK_ERR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	73fb      	strb	r3, [r7, #15]
         }

         fs->winsect = sector;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	631a      	str	r2, [r3, #48]	; 0x30
      }
   }

   return res;
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <sync_fs>:

static
FRESULT sync_fs (       /* FR_OK:succeeded, !=0:error */
   FATFS* fs                    /* File system object */
                )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
   FRESULT  res;


   res = sync_window(fs);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff ff87 	bl	800a5d0 <sync_window>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
   if (res == FR_OK)
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d159      	bne.n	800a780 <sync_fs+0xcc>
   {
      /* Update FSInfo sector if needed */
      if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d149      	bne.n	800a768 <sync_fs+0xb4>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	791b      	ldrb	r3, [r3, #4]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d145      	bne.n	800a768 <sync_fs+0xb4>
      {
         /* Create FSInfo structure */
         mem_set(fs->win, 0, SS(fs));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	899b      	ldrh	r3, [r3, #12]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	f7ff fda8 	bl	800a23e <mem_set>
         st_word(fs->win + BS_55AA, 0xAA55);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3334      	adds	r3, #52	; 0x34
 800a6f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a6f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff fd37 	bl	800a16e <st_word>
         st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3334      	adds	r3, #52	; 0x34
 800a704:	4921      	ldr	r1, [pc, #132]	; (800a78c <sync_fs+0xd8>)
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fd4c 	bl	800a1a4 <st_dword>
         st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3334      	adds	r3, #52	; 0x34
 800a710:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a714:	491e      	ldr	r1, [pc, #120]	; (800a790 <sync_fs+0xdc>)
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff fd44 	bl	800a1a4 <st_dword>
         st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3334      	adds	r3, #52	; 0x34
 800a720:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f7ff fd3a 	bl	800a1a4 <st_dword>
         st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3334      	adds	r3, #52	; 0x34
 800a734:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f7ff fd30 	bl	800a1a4 <st_dword>
         /* Write it into the FSInfo sector */
         fs->winsect = fs->volbase + 1;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a1b      	ldr	r3, [r3, #32]
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	631a      	str	r2, [r3, #48]	; 0x30
         disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	7858      	ldrb	r0, [r3, #1]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a75c:	2301      	movs	r3, #1
 800a75e:	f7ff fc8d 	bl	800a07c <disk_write>
         fs->fsi_flag = 0;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	711a      	strb	r2, [r3, #4]
      }

      /* Make sure that no pending write process in the physical drive */
      if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	785b      	ldrb	r3, [r3, #1]
 800a76c:	2200      	movs	r2, #0
 800a76e:	2100      	movs	r1, #0
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff fca3 	bl	800a0bc <disk_ioctl>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <sync_fs+0xcc>
 800a77c:	2301      	movs	r3, #1
 800a77e:	73fb      	strb	r3, [r7, #15]
   }

   return res;
 800a780:	7bfb      	ldrb	r3, [r7, #15]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	41615252 	.word	0x41615252
 800a790:	61417272 	.word	0x61417272

0800a794 <clust2sect>:
static
DWORD clust2sect (      /* !=0:Sector number, 0:Failed (invalid cluster#) */
   FATFS* fs,                   /* File system object */
   DWORD clst                   /* Cluster# to be converted */
                 )
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
   clst -= 2;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	3b02      	subs	r3, #2
 800a7a2:	603b      	str	r3, [r7, #0]
   if (clst >= fs->n_fatent - 2) return 0;              /* Invalid cluster# */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	3b02      	subs	r3, #2
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d301      	bcc.n	800a7b4 <clust2sect+0x20>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e008      	b.n	800a7c6 <clust2sect+0x32>

   return clst * fs->csize + fs->database;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	895b      	ldrh	r3, [r3, #10]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	fb03 f202 	mul.w	r2, r3, r2
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	4413      	add	r3, r2
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <get_fat>:
static
DWORD get_fat ( /* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
   _FDID* obj,          /* Corresponding object */
   DWORD clst           /* Cluster number to get the value */
              )
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b086      	sub	sp, #24
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	6039      	str	r1, [r7, #0]
   UINT   wc, bc;
   DWORD  val;
   FATFS  *fs = obj->fs;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	613b      	str	r3, [r7, #16]


   if (clst < 2 || clst >= fs->n_fatent)        /* Check if in valid range */
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d904      	bls.n	800a7f2 <get_fat+0x20>
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d302      	bcc.n	800a7f8 <get_fat+0x26>
   {
      val = 1;                  /* Internal error */
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	e0b7      	b.n	800a968 <get_fat+0x196>

   }
   else
   {
      val = 0xFFFFFFFF;                 /* Default value falls on disk error */
 800a7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fc:	617b      	str	r3, [r7, #20]

      switch (fs->fs_type) {
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d05a      	beq.n	800a8bc <get_fat+0xea>
 800a806:	2b03      	cmp	r3, #3
 800a808:	d07d      	beq.n	800a906 <get_fat+0x134>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	f040 80a2 	bne.w	800a954 <get_fat+0x182>
      case FS_FAT12:
         bc = (UINT)clst; bc += bc / 2;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	085b      	lsrs	r3, r3, #1
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4413      	add	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]
         if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	899b      	ldrh	r3, [r3, #12]
 800a826:	4619      	mov	r1, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a82e:	4413      	add	r3, r2
 800a830:	4619      	mov	r1, r3
 800a832:	6938      	ldr	r0, [r7, #16]
 800a834:	f7ff ff10 	bl	800a658 <move_window>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f040 808d 	bne.w	800a95a <get_fat+0x188>

         wc = fs->win[bc++ % SS(fs)];
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	60fa      	str	r2, [r7, #12]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	8992      	ldrh	r2, [r2, #12]
 800a84a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a84e:	fb02 f201 	mul.w	r2, r2, r1
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4413      	add	r3, r2
 800a858:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a85c:	60bb      	str	r3, [r7, #8]
         if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	899b      	ldrh	r3, [r3, #12]
 800a866:	4619      	mov	r1, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a86e:	4413      	add	r3, r2
 800a870:	4619      	mov	r1, r3
 800a872:	6938      	ldr	r0, [r7, #16]
 800a874:	f7ff fef0 	bl	800a658 <move_window>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d16f      	bne.n	800a95e <get_fat+0x18c>

         wc |= fs->win[bc % SS(fs)] << 8;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	899b      	ldrh	r3, [r3, #12]
 800a882:	461a      	mov	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	fbb3 f1f2 	udiv	r1, r3, r2
 800a88a:	fb02 f201 	mul.w	r2, r2, r1
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	4413      	add	r3, r2
 800a894:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a898:	021b      	lsls	r3, r3, #8
 800a89a:	461a      	mov	r2, r3
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60bb      	str	r3, [r7, #8]
         val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <get_fat+0xe0>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	091b      	lsrs	r3, r3, #4
 800a8b0:	e002      	b.n	800a8b8 <get_fat+0xe6>
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8b8:	617b      	str	r3, [r7, #20]
         break;
 800a8ba:	e055      	b.n	800a968 <get_fat+0x196>

      case FS_FAT16:
         if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	899b      	ldrh	r3, [r3, #12]
 800a8c4:	085b      	lsrs	r3, r3, #1
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8d0:	4413      	add	r3, r2
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6938      	ldr	r0, [r7, #16]
 800a8d6:	f7ff febf 	bl	800a658 <move_window>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d140      	bne.n	800a962 <get_fat+0x190>

         val = ld_word(fs->win + clst * 2 % SS(fs));
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	8992      	ldrh	r2, [r2, #12]
 800a8ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8f2:	fb02 f200 	mul.w	r2, r2, r0
 800a8f6:	1a9b      	subs	r3, r3, r2
 800a8f8:	440b      	add	r3, r1
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff fbfc 	bl	800a0f8 <ld_word>
 800a900:	4603      	mov	r3, r0
 800a902:	617b      	str	r3, [r7, #20]
         break;
 800a904:	e030      	b.n	800a968 <get_fat+0x196>

      case FS_FAT32:
         if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	899b      	ldrh	r3, [r3, #12]
 800a90e:	089b      	lsrs	r3, r3, #2
 800a910:	b29b      	uxth	r3, r3
 800a912:	4619      	mov	r1, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	fbb3 f3f1 	udiv	r3, r3, r1
 800a91a:	4413      	add	r3, r2
 800a91c:	4619      	mov	r1, r3
 800a91e:	6938      	ldr	r0, [r7, #16]
 800a920:	f7ff fe9a 	bl	800a658 <move_window>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d11d      	bne.n	800a966 <get_fat+0x194>

         val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	8992      	ldrh	r2, [r2, #12]
 800a938:	fbb3 f0f2 	udiv	r0, r3, r2
 800a93c:	fb02 f200 	mul.w	r2, r2, r0
 800a940:	1a9b      	subs	r3, r3, r2
 800a942:	440b      	add	r3, r1
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff fbef 	bl	800a128 <ld_dword>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a950:	617b      	str	r3, [r7, #20]
         break;
 800a952:	e009      	b.n	800a968 <get_fat+0x196>
         }

         /* go to default */
         #endif
      default:
         val = 1;                       /* Internal error */
 800a954:	2301      	movs	r3, #1
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	e006      	b.n	800a968 <get_fat+0x196>
         if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a95a:	bf00      	nop
 800a95c:	e004      	b.n	800a968 <get_fat+0x196>
         if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a95e:	bf00      	nop
 800a960:	e002      	b.n	800a968 <get_fat+0x196>
         if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a962:	bf00      	nop
 800a964:	e000      	b.n	800a968 <get_fat+0x196>
         if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a966:	bf00      	nop
      }
   }

   return val;
 800a968:	697b      	ldr	r3, [r7, #20]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3718      	adds	r7, #24
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <put_fat>:
FRESULT put_fat (       /* FR_OK(0):succeeded, !=0:error */
   FATFS* fs,                   /* Corresponding file system object */
   DWORD clst,                  /* FAT index number (cluster number) to be changed */
   DWORD val                    /* New value to be set to the entry */
                )
{
 800a972:	b590      	push	{r4, r7, lr}
 800a974:	b089      	sub	sp, #36	; 0x24
 800a976:	af00      	add	r7, sp, #0
 800a978:	60f8      	str	r0, [r7, #12]
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	607a      	str	r2, [r7, #4]
   UINT     bc;
   BYTE     *p;
   FRESULT  res = FR_INT_ERR;
 800a97e:	2302      	movs	r3, #2
 800a980:	77fb      	strb	r3, [r7, #31]


   if (clst >= 2 && clst < fs->n_fatent)        /* Check if in valid range */
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b01      	cmp	r3, #1
 800a986:	f240 8106 	bls.w	800ab96 <put_fat+0x224>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	429a      	cmp	r2, r3
 800a992:	f080 8100 	bcs.w	800ab96 <put_fat+0x224>
   {
      switch (fs->fs_type) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	f000 8088 	beq.w	800aab0 <put_fat+0x13e>
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	f000 80b0 	beq.w	800ab06 <put_fat+0x194>
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	f040 80f5 	bne.w	800ab96 <put_fat+0x224>
      case FS_FAT12:            /* Bitfield items */
         bc = (UINT)clst; bc += bc / 2;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	61bb      	str	r3, [r7, #24]
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	69ba      	ldr	r2, [r7, #24]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	61bb      	str	r3, [r7, #24]
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	899b      	ldrh	r3, [r3, #12]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7ff fe42 	bl	800a658 <move_window>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	77fb      	strb	r3, [r7, #31]
         if (res != FR_OK) break;
 800a9d8:	7ffb      	ldrb	r3, [r7, #31]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f040 80d4 	bne.w	800ab88 <put_fat+0x216>

         p = fs->win + bc++ % SS(fs);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	61ba      	str	r2, [r7, #24]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	8992      	ldrh	r2, [r2, #12]
 800a9f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9f4:	fb02 f200 	mul.w	r2, r2, r0
 800a9f8:	1a9b      	subs	r3, r3, r2
 800a9fa:	440b      	add	r3, r1
 800a9fc:	617b      	str	r3, [r7, #20]
         *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00d      	beq.n	800aa24 <put_fat+0xb2>
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	b25b      	sxtb	r3, r3
 800aa0e:	f003 030f 	and.w	r3, r3, #15
 800aa12:	b25a      	sxtb	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	011b      	lsls	r3, r3, #4
 800aa1a:	b25b      	sxtb	r3, r3
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	b25b      	sxtb	r3, r3
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	e001      	b.n	800aa28 <put_fat+0xb6>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	7013      	strb	r3, [r2, #0]
         fs->wflag = 1;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	70da      	strb	r2, [r3, #3]
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	899b      	ldrh	r3, [r3, #12]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa42:	4413      	add	r3, r2
 800aa44:	4619      	mov	r1, r3
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7ff fe06 	bl	800a658 <move_window>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	77fb      	strb	r3, [r7, #31]
         if (res != FR_OK) break;
 800aa50:	7ffb      	ldrb	r3, [r7, #31]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 809a 	bne.w	800ab8c <put_fat+0x21a>

         p = fs->win + bc % SS(fs);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	899b      	ldrh	r3, [r3, #12]
 800aa62:	461a      	mov	r2, r3
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa6a:	fb02 f200 	mul.w	r2, r2, r0
 800aa6e:	1a9b      	subs	r3, r3, r2
 800aa70:	440b      	add	r3, r1
 800aa72:	617b      	str	r3, [r7, #20]
         *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <put_fat+0x114>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	091b      	lsrs	r3, r3, #4
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	e00e      	b.n	800aaa4 <put_fat+0x132>
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	b25b      	sxtb	r3, r3
 800aa8c:	f023 030f 	bic.w	r3, r3, #15
 800aa90:	b25a      	sxtb	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	0a1b      	lsrs	r3, r3, #8
 800aa96:	b25b      	sxtb	r3, r3
 800aa98:	f003 030f 	and.w	r3, r3, #15
 800aa9c:	b25b      	sxtb	r3, r3
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	b25b      	sxtb	r3, r3
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	7013      	strb	r3, [r2, #0]
         fs->wflag = 1;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	70da      	strb	r2, [r3, #3]
         break;
 800aaae:	e072      	b.n	800ab96 <put_fat+0x224>

      case FS_FAT16:            /* WORD aligned items */
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	899b      	ldrh	r3, [r3, #12]
 800aab8:	085b      	lsrs	r3, r3, #1
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	4619      	mov	r1, r3
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	fbb3 f3f1 	udiv	r3, r3, r1
 800aac4:	4413      	add	r3, r2
 800aac6:	4619      	mov	r1, r3
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff fdc5 	bl	800a658 <move_window>
 800aace:	4603      	mov	r3, r0
 800aad0:	77fb      	strb	r3, [r7, #31]
         if (res != FR_OK) break;
 800aad2:	7ffb      	ldrb	r3, [r7, #31]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d15b      	bne.n	800ab90 <put_fat+0x21e>

         st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	8992      	ldrh	r2, [r2, #12]
 800aae6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aaea:	fb02 f200 	mul.w	r2, r2, r0
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	b292      	uxth	r2, r2
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7ff fb38 	bl	800a16e <st_word>
         fs->wflag = 1;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2201      	movs	r2, #1
 800ab02:	70da      	strb	r2, [r3, #3]
         break;
 800ab04:	e047      	b.n	800ab96 <put_fat+0x224>

      case FS_FAT32:            /* DWORD aligned items */
         #if _FS_EXFAT
      case FS_EXFAT:
         #endif
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	899b      	ldrh	r3, [r3, #12]
 800ab0e:	089b      	lsrs	r3, r3, #2
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	4619      	mov	r1, r3
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab1a:	4413      	add	r3, r2
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff fd9a 	bl	800a658 <move_window>
 800ab24:	4603      	mov	r3, r0
 800ab26:	77fb      	strb	r3, [r7, #31]
         if (res != FR_OK) break;
 800ab28:	7ffb      	ldrb	r3, [r7, #31]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d132      	bne.n	800ab94 <put_fat+0x222>

         if (!_FS_EXFAT || fs->fs_type != FS_EXFAT)
         {
            val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	8992      	ldrh	r2, [r2, #12]
 800ab42:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab46:	fb02 f200 	mul.w	r2, r2, r0
 800ab4a:	1a9b      	subs	r3, r3, r2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff faea 	bl	800a128 <ld_dword>
 800ab54:	4603      	mov	r3, r0
 800ab56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab5a:	4323      	orrs	r3, r4
 800ab5c:	607b      	str	r3, [r7, #4]
         }

         st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	8992      	ldrh	r2, [r2, #12]
 800ab6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab70:	fb02 f200 	mul.w	r2, r2, r0
 800ab74:	1a9b      	subs	r3, r3, r2
 800ab76:	440b      	add	r3, r1
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7ff fb12 	bl	800a1a4 <st_dword>
         fs->wflag = 1;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2201      	movs	r2, #1
 800ab84:	70da      	strb	r2, [r3, #3]
         break;
 800ab86:	e006      	b.n	800ab96 <put_fat+0x224>
         if (res != FR_OK) break;
 800ab88:	bf00      	nop
 800ab8a:	e004      	b.n	800ab96 <put_fat+0x224>
         if (res != FR_OK) break;
 800ab8c:	bf00      	nop
 800ab8e:	e002      	b.n	800ab96 <put_fat+0x224>
         if (res != FR_OK) break;
 800ab90:	bf00      	nop
 800ab92:	e000      	b.n	800ab96 <put_fat+0x224>
         if (res != FR_OK) break;
 800ab94:	bf00      	nop
      }
   }

   return res;
 800ab96:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3724      	adds	r7, #36	; 0x24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd90      	pop	{r4, r7, pc}

0800aba0 <remove_chain>:
FRESULT remove_chain (  /* FR_OK(0):succeeded, !=0:error */
   _FDID* obj,                          /* Corresponding object */
   DWORD clst,                          /* Cluster to remove a chain from */
   DWORD pclst                          /* Previous cluster of clst (0:an entire chain) */
                     )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
   FRESULT  res = FR_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	77fb      	strb	r3, [r7, #31]
   DWORD    nxt;
   FATFS    *fs = obj->fs;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	61bb      	str	r3, [r7, #24]
   #endif
   #if _USE_TRIM
   DWORD  rt[2];
   #endif

   if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;             /* Check if in valid range */
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d904      	bls.n	800abc6 <remove_chain+0x26>
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d301      	bcc.n	800abca <remove_chain+0x2a>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e04b      	b.n	800ac62 <remove_chain+0xc2>

   /* Mark the previous cluster 'EOC' on the FAT if it exists */
   if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00c      	beq.n	800abea <remove_chain+0x4a>
   {
      res = put_fat(fs, pclst, 0xFFFFFFFF);
 800abd0:	f04f 32ff 	mov.w	r2, #4294967295
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	69b8      	ldr	r0, [r7, #24]
 800abd8:	f7ff fecb 	bl	800a972 <put_fat>
 800abdc:	4603      	mov	r3, r0
 800abde:	77fb      	strb	r3, [r7, #31]
      if (res != FR_OK) return res;
 800abe0:	7ffb      	ldrb	r3, [r7, #31]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <remove_chain+0x4a>
 800abe6:	7ffb      	ldrb	r3, [r7, #31]
 800abe8:	e03b      	b.n	800ac62 <remove_chain+0xc2>
   }

   /* Remove the chain */
   do {
      nxt = get_fat(obj, clst);                                 /* Get cluster status */
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7ff fdf0 	bl	800a7d2 <get_fat>
 800abf2:	6178      	str	r0, [r7, #20]
      if (nxt == 0) break;                                      /* Empty cluster? */
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d031      	beq.n	800ac5e <remove_chain+0xbe>

      if (nxt == 1) return FR_INT_ERR;                  /* Internal error? */
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d101      	bne.n	800ac04 <remove_chain+0x64>
 800ac00:	2302      	movs	r3, #2
 800ac02:	e02e      	b.n	800ac62 <remove_chain+0xc2>

      if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;                /* Disk error? */
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0a:	d101      	bne.n	800ac10 <remove_chain+0x70>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e028      	b.n	800ac62 <remove_chain+0xc2>

      if (!_FS_EXFAT || fs->fs_type != FS_EXFAT)
      {
         res = put_fat(fs, clst, 0);                            /* Mark the cluster 'free' on the FAT */
 800ac10:	2200      	movs	r2, #0
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	69b8      	ldr	r0, [r7, #24]
 800ac16:	f7ff feac 	bl	800a972 <put_fat>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	77fb      	strb	r3, [r7, #31]
         if (res != FR_OK) return res;
 800ac1e:	7ffb      	ldrb	r3, [r7, #31]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <remove_chain+0x88>
 800ac24:	7ffb      	ldrb	r3, [r7, #31]
 800ac26:	e01c      	b.n	800ac62 <remove_chain+0xc2>
      }

      if (fs->free_clst < fs->n_fatent - 2)             /* Update FSINFO */
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	695a      	ldr	r2, [r3, #20]
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	3b02      	subs	r3, #2
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d20b      	bcs.n	800ac4e <remove_chain+0xae>
      {
         fs->free_clst++;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	615a      	str	r2, [r3, #20]
         fs->fsi_flag |= 1;
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	791b      	ldrb	r3, [r3, #4]
 800ac44:	f043 0301 	orr.w	r3, r3, #1
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	711a      	strb	r2, [r3, #4]
         #endif
         scl = ecl = nxt;
      }

      #endif
      clst = nxt;                                               /* Next cluster */
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	60bb      	str	r3, [r7, #8]
   } while (clst < fs->n_fatent);       /* Repeat while not the last link */
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d3c6      	bcc.n	800abea <remove_chain+0x4a>
 800ac5c:	e000      	b.n	800ac60 <remove_chain+0xc0>
      if (nxt == 0) break;                                      /* Empty cluster? */
 800ac5e:	bf00      	nop
         }
      }
   }

   #endif
   return FR_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3720      	adds	r7, #32
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <create_chain>:
static
DWORD create_chain (    /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
   _FDID* obj,                          /* Corresponding object */
   DWORD clst                           /* Cluster# to stretch, 0:Create a new chain */
                   )
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b088      	sub	sp, #32
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	6039      	str	r1, [r7, #0]
   DWORD    cs, ncl, scl;
   FRESULT  res;
   FATFS    *fs = obj->fs;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	613b      	str	r3, [r7, #16]


   if (clst == 0)               /* Create a new chain */
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10d      	bne.n	800ac9c <create_chain+0x32>
   {
      scl = fs->last_clst;                                      /* Get suggested cluster to start from */
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	61bb      	str	r3, [r7, #24]
      if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d004      	beq.n	800ac96 <create_chain+0x2c>
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d31b      	bcc.n	800acce <create_chain+0x64>
 800ac96:	2301      	movs	r3, #1
 800ac98:	61bb      	str	r3, [r7, #24]
 800ac9a:	e018      	b.n	800acce <create_chain+0x64>
   }
   else                                 /* Stretch current chain */
   {
      cs = get_fat(obj, clst);                                  /* Check the cluster status */
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff fd97 	bl	800a7d2 <get_fat>
 800aca4:	60f8      	str	r0, [r7, #12]
      if (cs < 2) return 1;                                     /* Invalid FAT value */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d801      	bhi.n	800acb0 <create_chain+0x46>
 800acac:	2301      	movs	r3, #1
 800acae:	e070      	b.n	800ad92 <create_chain+0x128>

      if (cs == 0xFFFFFFFF) return cs;                  /* A disk error occurred */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d101      	bne.n	800acbc <create_chain+0x52>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	e06a      	b.n	800ad92 <create_chain+0x128>

      if (cs < fs->n_fatent) return cs;                 /* It is already followed by next cluster */
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d201      	bcs.n	800acca <create_chain+0x60>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	e063      	b.n	800ad92 <create_chain+0x128>

      scl = clst;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	61bb      	str	r3, [r7, #24]
      }
   }
   else
   #endif
   {            /* On the FAT12/16/32 volume */
      ncl = scl;                /* Start cluster */
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	61fb      	str	r3, [r7, #28]
      for (;;) {
         ncl++;                                                                 /* Next cluster */
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	3301      	adds	r3, #1
 800acd6:	61fb      	str	r3, [r7, #28]
         if (ncl >= fs->n_fatent)                               /* Check wrap-around */
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	69fa      	ldr	r2, [r7, #28]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d307      	bcc.n	800acf2 <create_chain+0x88>
         {
            ncl = 2;
 800ace2:	2302      	movs	r3, #2
 800ace4:	61fb      	str	r3, [r7, #28]
            if (ncl > scl) return 0;                            /* No free cluster */
 800ace6:	69fa      	ldr	r2, [r7, #28]
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	429a      	cmp	r2, r3
 800acec:	d901      	bls.n	800acf2 <create_chain+0x88>
 800acee:	2300      	movs	r3, #0
 800acf0:	e04f      	b.n	800ad92 <create_chain+0x128>

         }

         cs = get_fat(obj, ncl);                                /* Get the cluster status */
 800acf2:	69f9      	ldr	r1, [r7, #28]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff fd6c 	bl	800a7d2 <get_fat>
 800acfa:	60f8      	str	r0, [r7, #12]
         if (cs == 0) break;                                            /* Found a free cluster */
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00e      	beq.n	800ad20 <create_chain+0xb6>

         if (cs == 1 || cs == 0xFFFFFFFF) return cs;                    /* An error occurred */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d003      	beq.n	800ad10 <create_chain+0xa6>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	d101      	bne.n	800ad14 <create_chain+0xaa>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	e03e      	b.n	800ad92 <create_chain+0x128>

         if (ncl == scl) return 0;                              /* No free cluster */
 800ad14:	69fa      	ldr	r2, [r7, #28]
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d1da      	bne.n	800acd2 <create_chain+0x68>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e038      	b.n	800ad92 <create_chain+0x128>
         if (cs == 0) break;                                            /* Found a free cluster */
 800ad20:	bf00      	nop

      }
      res = put_fat(fs, ncl, 0xFFFFFFFF);               /* Mark the new cluster 'EOC' */
 800ad22:	f04f 32ff 	mov.w	r2, #4294967295
 800ad26:	69f9      	ldr	r1, [r7, #28]
 800ad28:	6938      	ldr	r0, [r7, #16]
 800ad2a:	f7ff fe22 	bl	800a972 <put_fat>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75fb      	strb	r3, [r7, #23]
      if (res == FR_OK && clst != 0)
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d109      	bne.n	800ad4c <create_chain+0xe2>
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d006      	beq.n	800ad4c <create_chain+0xe2>
      {
         res = put_fat(fs, clst, ncl);                  /* Link it from the previous one if needed */
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6938      	ldr	r0, [r7, #16]
 800ad44:	f7ff fe15 	bl	800a972 <put_fat>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]
      }
   }

   if (res == FR_OK)                            /* Update FSINFO if function succeeded. */
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d116      	bne.n	800ad80 <create_chain+0x116>
   {
      fs->last_clst = ncl;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	69fa      	ldr	r2, [r7, #28]
 800ad56:	611a      	str	r2, [r3, #16]
      if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	695a      	ldr	r2, [r3, #20]
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	3b02      	subs	r3, #2
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d804      	bhi.n	800ad70 <create_chain+0x106>
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	1e5a      	subs	r2, r3, #1
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	615a      	str	r2, [r3, #20]

      fs->fsi_flag |= 1;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	791b      	ldrb	r3, [r3, #4]
 800ad74:	f043 0301 	orr.w	r3, r3, #1
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	711a      	strb	r2, [r3, #4]
 800ad7e:	e007      	b.n	800ad90 <create_chain+0x126>
   }
   else
   {
      ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;              /* Failed. Generate error status */
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d102      	bne.n	800ad8c <create_chain+0x122>
 800ad86:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8a:	e000      	b.n	800ad8e <create_chain+0x124>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	61fb      	str	r3, [r7, #28]
   }

   return ncl;                  /* Return new cluster number or error status */
 800ad90:	69fb      	ldr	r3, [r7, #28]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3720      	adds	r7, #32
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <clmt_clust>:
static
DWORD clmt_clust (      /* <2:Error, >=2:Cluster number */
   FIL* fp,                     /* Pointer to the file object */
   FSIZE_t ofs                  /* File offset to be converted to cluster# */
                 )
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b087      	sub	sp, #28
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
   DWORD  cl, ncl, *tbl;
   FATFS  *fs = fp->obj.fs;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	60fb      	str	r3, [r7, #12]


   tbl = fp->cltbl + 1;         /* Top of CLMT */
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adae:	3304      	adds	r3, #4
 800adb0:	613b      	str	r3, [r7, #16]
   cl = (DWORD)(ofs / SS(fs) / fs->csize);      /* Cluster order from top of the file */
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	899b      	ldrh	r3, [r3, #12]
 800adb6:	461a      	mov	r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	fbb3 f3f2 	udiv	r3, r3, r2
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	8952      	ldrh	r2, [r2, #10]
 800adc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800adc6:	617b      	str	r3, [r7, #20]
   for (;;) {
      ncl = *tbl++;                             /* Number of cluters in the fragment */
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	1d1a      	adds	r2, r3, #4
 800adcc:	613a      	str	r2, [r7, #16]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	60bb      	str	r3, [r7, #8]
      if (ncl == 0) return 0;           /* End of table? (error) */
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <clmt_clust+0x42>
 800add8:	2300      	movs	r3, #0
 800adda:	e010      	b.n	800adfe <clmt_clust+0x64>

      if (cl < ncl) break;              /* In this fragment? */
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d307      	bcc.n	800adf4 <clmt_clust+0x5a>

      cl -= ncl; tbl++;                         /* Next fragment */
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	3304      	adds	r3, #4
 800adf0:	613b      	str	r3, [r7, #16]
      ncl = *tbl++;                             /* Number of cluters in the fragment */
 800adf2:	e7e9      	b.n	800adc8 <clmt_clust+0x2e>
      if (cl < ncl) break;              /* In this fragment? */
 800adf4:	bf00      	nop
   }
   return cl + *tbl;            /* Return the cluster number */
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	4413      	add	r3, r2
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <dir_sdi>:
static
FRESULT dir_sdi (       /* FR_OK(0):succeeded, !=0:error */
   DIR* dp,                     /* Pointer to directory object */
   DWORD ofs                    /* Offset of directory table */
                )
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b086      	sub	sp, #24
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
   DWORD  csz, clst;
   FATFS  *fs = dp->obj.fs;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	613b      	str	r3, [r7, #16]


   if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)           /* Check range of offset and alignment */
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae20:	d204      	bcs.n	800ae2c <dir_sdi+0x22>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	f003 031f 	and.w	r3, r3, #31
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <dir_sdi+0x26>
   {
      return FR_INT_ERR;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e071      	b.n	800af14 <dir_sdi+0x10a>
   }

   dp->dptr = ofs;                              /* Set current offset */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	615a      	str	r2, [r3, #20]
   clst = dp->obj.sclust;               /* Table start cluster (0:root) */
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	617b      	str	r3, [r7, #20]
   if (clst == 0 && fs->fs_type >= FS_FAT32)            /* Replace cluster# 0 with root cluster# */
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d106      	bne.n	800ae50 <dir_sdi+0x46>
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d902      	bls.n	800ae50 <dir_sdi+0x46>
   {
      clst = fs->dirbase;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4e:	617b      	str	r3, [r7, #20]
      if (_FS_EXFAT) dp->obj.stat = 0;                  /* exFAT: Root dir has an FAT chain */

   }

   if (clst == 0)               /* Static table (root-directory in FAT12/16) */
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10c      	bne.n	800ae70 <dir_sdi+0x66>
   {
      if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;                     /* Is index out of range? */
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	095b      	lsrs	r3, r3, #5
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	8912      	ldrh	r2, [r2, #8]
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d301      	bcc.n	800ae66 <dir_sdi+0x5c>
 800ae62:	2302      	movs	r3, #2
 800ae64:	e056      	b.n	800af14 <dir_sdi+0x10a>

      dp->sect = fs->dirbase;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	61da      	str	r2, [r3, #28]
 800ae6e:	e02d      	b.n	800aecc <dir_sdi+0xc2>

   }
   else                                 /* Dynamic table (sub-directory or root-directory in FAT32+) */
   {
      csz = (DWORD)fs->csize * SS(fs);                  /* Bytes per cluster */
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	895b      	ldrh	r3, [r3, #10]
 800ae74:	461a      	mov	r2, r3
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	899b      	ldrh	r3, [r3, #12]
 800ae7a:	fb03 f302 	mul.w	r3, r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
      while (ofs >= csz) {                                      /* Follow cluster chain */
 800ae80:	e019      	b.n	800aeb6 <dir_sdi+0xac>
         clst = get_fat(&dp->obj, clst);                                        /* Get next cluster */
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6979      	ldr	r1, [r7, #20]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7ff fca3 	bl	800a7d2 <get_fat>
 800ae8c:	6178      	str	r0, [r7, #20]
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;                    /* Disk error */
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d101      	bne.n	800ae9a <dir_sdi+0x90>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e03c      	b.n	800af14 <dir_sdi+0x10a>

         if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;                       /* Reached to end of table or internal error */
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d904      	bls.n	800aeaa <dir_sdi+0xa0>
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d301      	bcc.n	800aeae <dir_sdi+0xa4>
 800aeaa:	2302      	movs	r3, #2
 800aeac:	e032      	b.n	800af14 <dir_sdi+0x10a>

         ofs -= csz;
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	603b      	str	r3, [r7, #0]
      while (ofs >= csz) {                                      /* Follow cluster chain */
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d2e1      	bcs.n	800ae82 <dir_sdi+0x78>
      }
      dp->sect = clust2sect(fs, clst);
 800aebe:	6979      	ldr	r1, [r7, #20]
 800aec0:	6938      	ldr	r0, [r7, #16]
 800aec2:	f7ff fc67 	bl	800a794 <clust2sect>
 800aec6:	4602      	mov	r2, r0
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	61da      	str	r2, [r3, #28]
   }

   dp->clust = clst;                                            /* Current cluster# */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	619a      	str	r2, [r3, #24]
   if (!dp->sect) return FR_INT_ERR;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <dir_sdi+0xd4>
 800aeda:	2302      	movs	r3, #2
 800aedc:	e01a      	b.n	800af14 <dir_sdi+0x10a>

   dp->sect += ofs / SS(fs);                            /* Sector# of the directory entry */
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	69da      	ldr	r2, [r3, #28]
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	899b      	ldrh	r3, [r3, #12]
 800aee6:	4619      	mov	r1, r3
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeee:	441a      	add	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	61da      	str	r2, [r3, #28]
   dp->dir = fs->win + (ofs % SS(fs));          /* Pointer to the entry in the win[] */
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	899b      	ldrh	r3, [r3, #12]
 800aefe:	461a      	mov	r2, r3
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	fbb3 f0f2 	udiv	r0, r3, r2
 800af06:	fb02 f200 	mul.w	r2, r2, r0
 800af0a:	1a9b      	subs	r3, r3, r2
 800af0c:	18ca      	adds	r2, r1, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	621a      	str	r2, [r3, #32]

   return FR_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <dir_next>:
static
FRESULT dir_next (      /* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
   DIR* dp,                     /* Pointer to the directory object */
   int stretch                  /* 0: Do not stretch table, 1: Stretch table if needed */
                 )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
   DWORD  ofs, clst;
   FATFS  *fs = dp->obj.fs;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]

   #if !_FS_READONLY
   UINT  n;
   #endif

   ofs = dp->dptr + SZDIRE;             /* Next entry */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	3320      	adds	r3, #32
 800af32:	60bb      	str	r3, [r7, #8]
   if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;           /* Report EOT when offset has reached max value */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <dir_next+0x28>
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af42:	d301      	bcc.n	800af48 <dir_next+0x2c>
 800af44:	2304      	movs	r3, #4
 800af46:	e0bb      	b.n	800b0c0 <dir_next+0x1a4>

   if (ofs % SS(fs) == 0)               /* Sector changed? */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	899b      	ldrh	r3, [r3, #12]
 800af4c:	461a      	mov	r2, r3
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	fbb3 f1f2 	udiv	r1, r3, r2
 800af54:	fb02 f201 	mul.w	r2, r2, r1
 800af58:	1a9b      	subs	r3, r3, r2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f040 809d 	bne.w	800b09a <dir_next+0x17e>
   {
      dp->sect++;                                       /* Next sector */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	69db      	ldr	r3, [r3, #28]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	61da      	str	r2, [r3, #28]

      if (!dp->clust)                           /* Static table */
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10b      	bne.n	800af8a <dir_next+0x6e>
      {
         if (ofs / SZDIRE >= fs->n_rootdir)                     /* Report EOT if it reached end of static table */
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	095b      	lsrs	r3, r3, #5
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	8912      	ldrh	r2, [r2, #8]
 800af7a:	4293      	cmp	r3, r2
 800af7c:	f0c0 808d 	bcc.w	800b09a <dir_next+0x17e>
         {
            dp->sect = 0; return FR_NO_FILE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	61da      	str	r2, [r3, #28]
 800af86:	2304      	movs	r3, #4
 800af88:	e09a      	b.n	800b0c0 <dir_next+0x1a4>
         }
      }
      else                                              /* Dynamic table */
      {
         if ((ofs / SS(fs) & (fs->csize - 1)) == 0)                             /* Cluster changed? */
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	899b      	ldrh	r3, [r3, #12]
 800af8e:	461a      	mov	r2, r3
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	fbb3 f3f2 	udiv	r3, r3, r2
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	8952      	ldrh	r2, [r2, #10]
 800af9a:	3a01      	subs	r2, #1
 800af9c:	4013      	ands	r3, r2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d17b      	bne.n	800b09a <dir_next+0x17e>
         {
            clst = get_fat(&dp->obj, dp->clust);                                        /* Get next cluster */
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	4619      	mov	r1, r3
 800afaa:	4610      	mov	r0, r2
 800afac:	f7ff fc11 	bl	800a7d2 <get_fat>
 800afb0:	6178      	str	r0, [r7, #20]
            if (clst <= 1) return FR_INT_ERR;                                                   /* Internal error */
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d801      	bhi.n	800afbc <dir_next+0xa0>
 800afb8:	2302      	movs	r3, #2
 800afba:	e081      	b.n	800b0c0 <dir_next+0x1a4>

            if (clst == 0xFFFFFFFF) return FR_DISK_ERR;                                 /* Disk error */
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d101      	bne.n	800afc8 <dir_next+0xac>
 800afc4:	2301      	movs	r3, #1
 800afc6:	e07b      	b.n	800b0c0 <dir_next+0x1a4>

            if (clst >= fs->n_fatent)                                                                   /* Reached end of dynamic table */
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d359      	bcc.n	800b086 <dir_next+0x16a>
            {
               #if !_FS_READONLY
               if (!stretch)                                                                                    /* If no stretch, report EOT */
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d104      	bne.n	800afe2 <dir_next+0xc6>
               {
                  dp->sect = 0; return FR_NO_FILE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	61da      	str	r2, [r3, #28]
 800afde:	2304      	movs	r3, #4
 800afe0:	e06e      	b.n	800b0c0 <dir_next+0x1a4>
               }

               clst = create_chain(&dp->obj, dp->clust);                                /* Allocate a cluster */
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7ff fe3d 	bl	800ac6a <create_chain>
 800aff0:	6178      	str	r0, [r7, #20]
               if (clst == 0) return FR_DENIED;                                                 /* No free cluster */
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <dir_next+0xe0>
 800aff8:	2307      	movs	r3, #7
 800affa:	e061      	b.n	800b0c0 <dir_next+0x1a4>

               if (clst == 1) return FR_INT_ERR;                                                /* Internal error */
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d101      	bne.n	800b006 <dir_next+0xea>
 800b002:	2302      	movs	r3, #2
 800b004:	e05c      	b.n	800b0c0 <dir_next+0x1a4>

               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;                              /* Disk error */
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00c:	d101      	bne.n	800b012 <dir_next+0xf6>
 800b00e:	2301      	movs	r3, #1
 800b010:	e056      	b.n	800b0c0 <dir_next+0x1a4>

               /* Clean-up the stretched table */
               if (_FS_EXFAT) dp->obj.stat |= 4;                                                /* The directory needs to be updated */

               if (sync_window(fs) != FR_OK) return FR_DISK_ERR;                                /* Flush disk access window */
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7ff fadc 	bl	800a5d0 <sync_window>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <dir_next+0x106>
 800b01e:	2301      	movs	r3, #1
 800b020:	e04e      	b.n	800b0c0 <dir_next+0x1a4>

               mem_set(fs->win, 0, SS(fs));                                                     /* Clear window buffer */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	899b      	ldrh	r3, [r3, #12]
 800b02c:	461a      	mov	r2, r3
 800b02e:	2100      	movs	r1, #0
 800b030:	f7ff f905 	bl	800a23e <mem_set>
               for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {                             /* Fill the new cluster with 0 */
 800b034:	2300      	movs	r3, #0
 800b036:	613b      	str	r3, [r7, #16]
 800b038:	6979      	ldr	r1, [r7, #20]
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff fbaa 	bl	800a794 <clust2sect>
 800b040:	4602      	mov	r2, r0
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	631a      	str	r2, [r3, #48]	; 0x30
 800b046:	e012      	b.n	800b06e <dir_next+0x152>
                  fs->wflag = 1;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2201      	movs	r2, #1
 800b04c:	70da      	strb	r2, [r3, #3]
                  if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7ff fabe 	bl	800a5d0 <sync_window>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <dir_next+0x142>
 800b05a:	2301      	movs	r3, #1
 800b05c:	e030      	b.n	800b0c0 <dir_next+0x1a4>
               for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {                             /* Fill the new cluster with 0 */
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	3301      	adds	r3, #1
 800b062:	613b      	str	r3, [r7, #16]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	631a      	str	r2, [r3, #48]	; 0x30
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	895b      	ldrh	r3, [r3, #10]
 800b072:	461a      	mov	r2, r3
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	4293      	cmp	r3, r2
 800b078:	d3e6      	bcc.n	800b048 <dir_next+0x12c>
               }
               fs->winsect -= n;                                                                                /* Restore window offset */
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	1ad2      	subs	r2, r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	631a      	str	r2, [r3, #48]	; 0x30

               dp->sect = 0; return FR_NO_FILE;                                                 /* Report EOT */
               #endif
            }

            dp->clust = clst;                                   /* Initialize data for new cluster */
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	619a      	str	r2, [r3, #24]
            dp->sect = clust2sect(fs, clst);
 800b08c:	6979      	ldr	r1, [r7, #20]
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f7ff fb80 	bl	800a794 <clust2sect>
 800b094:	4602      	mov	r2, r0
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	61da      	str	r2, [r3, #28]
         }
      }
   }

   dp->dptr = ofs;                                              /* Current entry */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	615a      	str	r2, [r3, #20]
   dp->dir = fs->win + ofs % SS(fs);            /* Pointer to the entry in the win[] */
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	899b      	ldrh	r3, [r3, #12]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0b2:	fb02 f200 	mul.w	r2, r2, r0
 800b0b6:	1a9b      	subs	r3, r3, r2
 800b0b8:	18ca      	adds	r2, r1, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	621a      	str	r2, [r3, #32]

   return FR_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3718      	adds	r7, #24
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <dir_alloc>:
static
FRESULT dir_alloc (     /* FR_OK(0):succeeded, !=0:error */
   DIR* dp,                     /* Pointer to the directory object */
   UINT nent                    /* Number of contiguous entries to allocate */
                  )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
   FRESULT  res;
   UINT     n;
   FATFS    *fs = dp->obj.fs;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	60fb      	str	r3, [r7, #12]


   res = dir_sdi(dp, 0);
 800b0d8:	2100      	movs	r1, #0
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff fe95 	bl	800ae0a <dir_sdi>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	75fb      	strb	r3, [r7, #23]
   if (res == FR_OK)
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d12b      	bne.n	800b142 <dir_alloc+0x7a>
   {
      n = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	613b      	str	r3, [r7, #16]
      do {
         res = move_window(fs, dp->sect);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	69db      	ldr	r3, [r3, #28]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f7ff faaf 	bl	800a658 <move_window>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75fb      	strb	r3, [r7, #23]
         if (res != FR_OK) break;
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d11d      	bne.n	800b140 <dir_alloc+0x78>

         #if _FS_EXFAT
         if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0))
         {
         #else
         if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	2be5      	cmp	r3, #229	; 0xe5
 800b10c:	d004      	beq.n	800b118 <dir_alloc+0x50>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d107      	bne.n	800b128 <dir_alloc+0x60>
         {
            #endif
            if (++n == nent) break;                     /* A block of contiguous free entries is found */
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	3301      	adds	r3, #1
 800b11c:	613b      	str	r3, [r7, #16]
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	429a      	cmp	r2, r3
 800b124:	d102      	bne.n	800b12c <dir_alloc+0x64>
 800b126:	e00c      	b.n	800b142 <dir_alloc+0x7a>

         }
         else
         {
            n = 0;                                                      /* Not a blank entry. Restart to search */
 800b128:	2300      	movs	r3, #0
 800b12a:	613b      	str	r3, [r7, #16]
         }

         res = dir_next(dp, 1);
 800b12c:	2101      	movs	r1, #1
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff fef4 	bl	800af1c <dir_next>
 800b134:	4603      	mov	r3, r0
 800b136:	75fb      	strb	r3, [r7, #23]
      } while (res == FR_OK);           /* Next entry with table stretch enabled */
 800b138:	7dfb      	ldrb	r3, [r7, #23]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0d7      	beq.n	800b0ee <dir_alloc+0x26>
 800b13e:	e000      	b.n	800b142 <dir_alloc+0x7a>
         if (res != FR_OK) break;
 800b140:	bf00      	nop
   }

   if (res == FR_NO_FILE) res = FR_DENIED;      /* No directory entry to allocate */
 800b142:	7dfb      	ldrb	r3, [r7, #23]
 800b144:	2b04      	cmp	r3, #4
 800b146:	d101      	bne.n	800b14c <dir_alloc+0x84>
 800b148:	2307      	movs	r3, #7
 800b14a:	75fb      	strb	r3, [r7, #23]

   return res;
 800b14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <ld_clust>:
static
DWORD ld_clust (        /* Returns the top cluster value of the SFN entry */
   FATFS* fs,                   /* Pointer to the fs object */
   const BYTE* dir      /* Pointer to the key entry */
               )
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
   DWORD  cl;


   cl = ld_word(dir + DIR_FstClusLO);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	331a      	adds	r3, #26
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe ffc7 	bl	800a0f8 <ld_word>
 800b16a:	4603      	mov	r3, r0
 800b16c:	60fb      	str	r3, [r7, #12]
   if (fs->fs_type == FS_FAT32)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b03      	cmp	r3, #3
 800b174:	d109      	bne.n	800b18a <ld_clust+0x34>
   {
      cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	3314      	adds	r3, #20
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe ffbc 	bl	800a0f8 <ld_word>
 800b180:	4603      	mov	r3, r0
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4313      	orrs	r3, r2
 800b188:	60fb      	str	r3, [r7, #12]
   }

   return cl;
 800b18a:	68fb      	ldr	r3, [r7, #12]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <st_clust>:
void st_clust (
   FATFS* fs,           /* Pointer to the fs object */
   BYTE* dir,           /* Pointer to the key entry */
   DWORD cl             /* Value to be set */
              )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
   st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	331a      	adds	r3, #26
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	b292      	uxth	r2, r2
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe ffdf 	bl	800a16e <st_word>
   if (fs->fs_type == FS_FAT32)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d109      	bne.n	800b1cc <st_clust+0x38>
   {
      st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f103 0214 	add.w	r2, r3, #20
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	0c1b      	lsrs	r3, r3, #16
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f7fe ffd1 	bl	800a16e <st_word>
   }
}
 800b1cc:	bf00      	nop
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <dir_find>:

static
FRESULT dir_find (      /* FR_OK(0):succeeded, !=0:error */
   DIR* dp                      /* Pointer to the directory object with the file name */
                 )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
   FRESULT  res;
   FATFS    *fs = dp->obj.fs;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	613b      	str	r3, [r7, #16]

   #if _USE_LFN != 0
   BYTE  a, ord, sum;
   #endif

   res = dir_sdi(dp, 0);                        /* Rewind directory object */
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff fe10 	bl	800ae0a <dir_sdi>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	75fb      	strb	r3, [r7, #23]
   if (res != FR_OK) return res;
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <dir_find+0x24>
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	e03e      	b.n	800b276 <dir_find+0xa2>
   /* On the FAT12/16/32 volume */
   #if _USE_LFN != 0
   ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;          /* Reset LFN sequence */
   #endif
   do {
      res = move_window(fs, dp->sect);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6938      	ldr	r0, [r7, #16]
 800b200:	f7ff fa2a 	bl	800a658 <move_window>
 800b204:	4603      	mov	r3, r0
 800b206:	75fb      	strb	r3, [r7, #23]
      if (res != FR_OK) break;
 800b208:	7dfb      	ldrb	r3, [r7, #23]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d12f      	bne.n	800b26e <dir_find+0x9a>

      c = dp->dir[DIR_Name];
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a1b      	ldr	r3, [r3, #32]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	73fb      	strb	r3, [r7, #15]
      if (c == 0)
 800b216:	7bfb      	ldrb	r3, [r7, #15]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d102      	bne.n	800b222 <dir_find+0x4e>
      {
         res = FR_NO_FILE; break;
 800b21c:	2304      	movs	r3, #4
 800b21e:	75fb      	strb	r3, [r7, #23]
 800b220:	e028      	b.n	800b274 <dir_find+0xa0>
            ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;                       /* Reset LFN sequence */
         }
      }

      #else     /* Non LFN configuration */
      dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	330b      	adds	r3, #11
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	719a      	strb	r2, [r3, #6]
      if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;                /* Is it a valid entry? */
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	330b      	adds	r3, #11
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	f003 0308 	and.w	r3, r3, #8
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10a      	bne.n	800b25a <dir_find+0x86>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a18      	ldr	r0, [r3, #32]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3324      	adds	r3, #36	; 0x24
 800b24c:	220b      	movs	r2, #11
 800b24e:	4619      	mov	r1, r3
 800b250:	f7ff f80f 	bl	800a272 <mem_cmp>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00b      	beq.n	800b272 <dir_find+0x9e>

      #endif
      res = dir_next(dp, 0);            /* Next entry */
 800b25a:	2100      	movs	r1, #0
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f7ff fe5d 	bl	800af1c <dir_next>
 800b262:	4603      	mov	r3, r0
 800b264:	75fb      	strb	r3, [r7, #23]
   } while (res == FR_OK);
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d0c5      	beq.n	800b1f8 <dir_find+0x24>
 800b26c:	e002      	b.n	800b274 <dir_find+0xa0>
      if (res != FR_OK) break;
 800b26e:	bf00      	nop
 800b270:	e000      	b.n	800b274 <dir_find+0xa0>
      if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;                /* Is it a valid entry? */
 800b272:	bf00      	nop

   return res;
 800b274:	7dfb      	ldrb	r3, [r7, #23]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <dir_register>:

static
FRESULT dir_register (  /* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
   DIR* dp                              /* Target directory with object name to be created */
                     )
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
   FRESULT  res;
   FATFS    *fs = dp->obj.fs;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60bb      	str	r3, [r7, #8]
         } while (res == FR_OK && --nent);
      }
   }

   #else /* Non LFN configuration */
   res = dir_alloc(dp, 1);              /* Allocate an entry for SFN */
 800b28c:	2101      	movs	r1, #1
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff ff1a 	bl	800b0c8 <dir_alloc>
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]

   #endif

   /* Set SFN entry */
   if (res == FR_OK)
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d11c      	bne.n	800b2d8 <dir_register+0x5a>
   {
      res = move_window(fs, dp->sect);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	68b8      	ldr	r0, [r7, #8]
 800b2a6:	f7ff f9d7 	bl	800a658 <move_window>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73fb      	strb	r3, [r7, #15]
      if (res == FR_OK)
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d111      	bne.n	800b2d8 <dir_register+0x5a>
      {
         mem_set(dp->dir, 0, SZDIRE);                   /* Clean the entry */
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a1b      	ldr	r3, [r3, #32]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fe ffbe 	bl	800a23e <mem_set>
         mem_cpy(dp->dir + DIR_Name, dp->fn, 11);                       /* Put SFN */
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a18      	ldr	r0, [r3, #32]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3324      	adds	r3, #36	; 0x24
 800b2ca:	220b      	movs	r2, #11
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	f7fe ff95 	bl	800a1fc <mem_cpy>
         #if _USE_LFN != 0
         dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);                      /* Put NT flag */
         #endif
         fs->wflag = 1;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	70da      	strb	r2, [r3, #3]
      }
   }

   return res;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <create_name>:
static
FRESULT create_name (   /* FR_OK: successful, FR_INVALID_NAME: could not create */
   DIR* dp,                             /* Pointer to the directory object */
   const TCHAR** path           /* Pointer to pointer to the segment in the path string */
                    )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
   BYTE        c, d, *sfn;
   UINT        ni, si, i;
   const char  *p;

   /* Create file name in directory form */
   p = *path; sfn = dp->fn;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3324      	adds	r3, #36	; 0x24
 800b2f8:	60bb      	str	r3, [r7, #8]
   mem_set(sfn, ' ', 11);
 800b2fa:	220b      	movs	r2, #11
 800b2fc:	2120      	movs	r1, #32
 800b2fe:	68b8      	ldr	r0, [r7, #8]
 800b300:	f7fe ff9d 	bl	800a23e <mem_set>
   si = i = 0; ni = 8;
 800b304:	2300      	movs	r3, #0
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	2308      	movs	r3, #8
 800b30e:	61bb      	str	r3, [r7, #24]
      return FR_OK;
   }

   #endif
   for (;;) {
      c = (BYTE)p[si++];
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	617a      	str	r2, [r7, #20]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	77fb      	strb	r3, [r7, #31]
      if (c <= ' ') break;                              /* Break if end of the path name */
 800b31e:	7ffb      	ldrb	r3, [r7, #31]
 800b320:	2b20      	cmp	r3, #32
 800b322:	d94e      	bls.n	800b3c2 <create_name+0xde>

      if (c == '/' || c == '\\')                /* Break if a separator is found */
 800b324:	7ffb      	ldrb	r3, [r7, #31]
 800b326:	2b2f      	cmp	r3, #47	; 0x2f
 800b328:	d006      	beq.n	800b338 <create_name+0x54>
 800b32a:	7ffb      	ldrb	r3, [r7, #31]
 800b32c:	2b5c      	cmp	r3, #92	; 0x5c
 800b32e:	d110      	bne.n	800b352 <create_name+0x6e>
      {
         while (p[si] == '/' || p[si] == '\\') si++;                    /* Skip duplicated separator if exist */
 800b330:	e002      	b.n	800b338 <create_name+0x54>
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	3301      	adds	r3, #1
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	4413      	add	r3, r2
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b2f      	cmp	r3, #47	; 0x2f
 800b342:	d0f6      	beq.n	800b332 <create_name+0x4e>
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	4413      	add	r3, r2
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	2b5c      	cmp	r3, #92	; 0x5c
 800b34e:	d0f0      	beq.n	800b332 <create_name+0x4e>
         break;
 800b350:	e038      	b.n	800b3c4 <create_name+0xe0>
      }

      if (c == '.' || i >= ni)                          /* End of body or over size? */
 800b352:	7ffb      	ldrb	r3, [r7, #31]
 800b354:	2b2e      	cmp	r3, #46	; 0x2e
 800b356:	d003      	beq.n	800b360 <create_name+0x7c>
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d30c      	bcc.n	800b37a <create_name+0x96>
      {
         if (ni == 11 || c != '.') return FR_INVALID_NAME;                      /* Over size or invalid dot */
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2b0b      	cmp	r3, #11
 800b364:	d002      	beq.n	800b36c <create_name+0x88>
 800b366:	7ffb      	ldrb	r3, [r7, #31]
 800b368:	2b2e      	cmp	r3, #46	; 0x2e
 800b36a:	d001      	beq.n	800b370 <create_name+0x8c>
 800b36c:	2306      	movs	r3, #6
 800b36e:	e044      	b.n	800b3fa <create_name+0x116>

         i = 8; ni = 11;                                        /* Goto extension */
 800b370:	2308      	movs	r3, #8
 800b372:	613b      	str	r3, [r7, #16]
 800b374:	230b      	movs	r3, #11
 800b376:	61bb      	str	r3, [r7, #24]
         continue;
 800b378:	e022      	b.n	800b3c0 <create_name+0xdc>
      }

      if (c >= 0x80)                                            /* Extended character? */
 800b37a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	da04      	bge.n	800b38c <create_name+0xa8>
      {
         #ifdef _EXCVT
         c = ExCvt[c - 0x80];                           /* To upper extended characters (SBCS cfg) */
 800b382:	7ffb      	ldrb	r3, [r7, #31]
 800b384:	3b80      	subs	r3, #128	; 0x80
 800b386:	4a1f      	ldr	r2, [pc, #124]	; (800b404 <create_name+0x120>)
 800b388:	5cd3      	ldrb	r3, [r2, r3]
 800b38a:	77fb      	strb	r3, [r7, #31]
         sfn[i++] = c;
         sfn[i++] = d;
      }
      else                                                              /* SBC */
      {
         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;                 /* Reject illegal chrs for SFN */
 800b38c:	7ffb      	ldrb	r3, [r7, #31]
 800b38e:	4619      	mov	r1, r3
 800b390:	481d      	ldr	r0, [pc, #116]	; (800b408 <create_name+0x124>)
 800b392:	f7fe ff95 	bl	800a2c0 <chk_chr>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d001      	beq.n	800b3a0 <create_name+0xbc>
 800b39c:	2306      	movs	r3, #6
 800b39e:	e02c      	b.n	800b3fa <create_name+0x116>

         if (IsLower(c)) c -= 0x20;                     /* To upper */
 800b3a0:	7ffb      	ldrb	r3, [r7, #31]
 800b3a2:	2b60      	cmp	r3, #96	; 0x60
 800b3a4:	d905      	bls.n	800b3b2 <create_name+0xce>
 800b3a6:	7ffb      	ldrb	r3, [r7, #31]
 800b3a8:	2b7a      	cmp	r3, #122	; 0x7a
 800b3aa:	d802      	bhi.n	800b3b2 <create_name+0xce>
 800b3ac:	7ffb      	ldrb	r3, [r7, #31]
 800b3ae:	3b20      	subs	r3, #32
 800b3b0:	77fb      	strb	r3, [r7, #31]

         sfn[i++] = c;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	613a      	str	r2, [r7, #16]
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	7ffa      	ldrb	r2, [r7, #31]
 800b3be:	701a      	strb	r2, [r3, #0]
      c = (BYTE)p[si++];
 800b3c0:	e7a6      	b.n	800b310 <create_name+0x2c>
      if (c <= ' ') break;                              /* Break if end of the path name */
 800b3c2:	bf00      	nop
      }
   }
   *path = p + si;                                              /* Return pointer to the next segment */
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	441a      	add	r2, r3
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	601a      	str	r2, [r3, #0]
   if (i == 0) return FR_INVALID_NAME;          /* Reject nul string */
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <create_name+0xf4>
 800b3d4:	2306      	movs	r3, #6
 800b3d6:	e010      	b.n	800b3fa <create_name+0x116>

   if (sfn[0] == DDEM) sfn[0] = RDDEM;          /* If the first character collides with DDEM, replace it with RDDEM */
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2be5      	cmp	r3, #229	; 0xe5
 800b3de:	d102      	bne.n	800b3e6 <create_name+0x102>
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2205      	movs	r2, #5
 800b3e4:	701a      	strb	r2, [r3, #0]

   sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;              /* Set last segment flag if end of the path */
 800b3e6:	7ffb      	ldrb	r3, [r7, #31]
 800b3e8:	2b20      	cmp	r3, #32
 800b3ea:	d801      	bhi.n	800b3f0 <create_name+0x10c>
 800b3ec:	2204      	movs	r2, #4
 800b3ee:	e000      	b.n	800b3f2 <create_name+0x10e>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	330b      	adds	r3, #11
 800b3f6:	701a      	strb	r2, [r3, #0]

   return FR_OK;
 800b3f8:	2300      	movs	r3, #0
   #endif /* _USE_LFN != 0 */
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3720      	adds	r7, #32
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	0800d1f0 	.word	0x0800d1f0
 800b408:	0800d118 	.word	0x0800d118

0800b40c <follow_path>:
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
   DIR* dp,                             /* Directory object to return last directory and found object */
   const TCHAR* path            /* Full-path string to find a file or directory */
                    )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
   FRESULT  res;
   BYTE     ns;
   _FDID    *obj = &dp->obj;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	613b      	str	r3, [r7, #16]
   FATFS    *fs = obj->fs;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	60fb      	str	r3, [r7, #12]
      obj->sclust = fs->cdir;                                   /* Start from current directory */
   }
   else
   #endif
   {                                                                                    /* With heading separator */
      while (*path == '/' || *path == '\\') path++;             /* Strip heading separator */
 800b420:	e002      	b.n	800b428 <follow_path+0x1c>
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	3301      	adds	r3, #1
 800b426:	603b      	str	r3, [r7, #0]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b2f      	cmp	r3, #47	; 0x2f
 800b42e:	d0f8      	beq.n	800b422 <follow_path+0x16>
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b5c      	cmp	r3, #92	; 0x5c
 800b436:	d0f4      	beq.n	800b422 <follow_path+0x16>
      obj->sclust = 0;                                                  /* Start from root directory */
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	2200      	movs	r2, #0
 800b43c:	609a      	str	r2, [r3, #8]
   }

   #endif
   #endif

   if ((UINT)*path < ' ')                                       /* Null path name is the origin directory itself */
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b1f      	cmp	r3, #31
 800b444:	d80a      	bhi.n	800b45c <follow_path+0x50>
   {
      dp->fn[NSFLAG] = NS_NONAME;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2280      	movs	r2, #128	; 0x80
 800b44a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
      res = dir_sdi(dp, 0);
 800b44e:	2100      	movs	r1, #0
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff fcda 	bl	800ae0a <dir_sdi>
 800b456:	4603      	mov	r3, r0
 800b458:	75fb      	strb	r3, [r7, #23]
 800b45a:	e04b      	b.n	800b4f4 <follow_path+0xe8>

   }
   else                                                                         /* Follow path */
   {
	   path_Check = 255;
 800b45c:	4b28      	ldr	r3, [pc, #160]	; (800b500 <follow_path+0xf4>)
 800b45e:	22ff      	movs	r2, #255	; 0xff
 800b460:	701a      	strb	r2, [r3, #0]
	   for (;;) {
         res = create_name(dp, &path);                  /* Get a segment name of the path */
 800b462:	463b      	mov	r3, r7
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff ff3c 	bl	800b2e4 <create_name>
 800b46c:	4603      	mov	r3, r0
 800b46e:	75fb      	strb	r3, [r7, #23]
         if (res != FR_OK) break;
 800b470:	7dfb      	ldrb	r3, [r7, #23]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d139      	bne.n	800b4ea <follow_path+0xde>

         res = dir_find(dp);                                            /* Find an object with the segment name */
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff feac 	bl	800b1d4 <dir_find>
 800b47c:	4603      	mov	r3, r0
 800b47e:	75fb      	strb	r3, [r7, #23]
         ns = dp->fn[NSFLAG];
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b486:	72fb      	strb	r3, [r7, #11]
         if (res != FR_OK)                                              /* Failed to find the object */
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <follow_path+0x98>
         {
            if (res == FR_NO_FILE)                              /* Object is not found */
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	2b04      	cmp	r3, #4
 800b492:	d12c      	bne.n	800b4ee <follow_path+0xe2>
                  dp->fn[NSFLAG] = NS_NONAME;
                  res = FR_OK;
               }
               else                                                                                     /* Could not find the object */
               {
                  if (!(ns & NS_LAST)) res = FR_NO_PATH;                                /* Adjust error code if not last segment */
 800b494:	7afb      	ldrb	r3, [r7, #11]
 800b496:	f003 0304 	and.w	r3, r3, #4
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d127      	bne.n	800b4ee <follow_path+0xe2>
 800b49e:	2305      	movs	r3, #5
 800b4a0:	75fb      	strb	r3, [r7, #23]

               }
            }

            break;
 800b4a2:	e024      	b.n	800b4ee <follow_path+0xe2>
         }

         if (ns & NS_LAST) break;                                       /* Last segment matched. Function completed. */
 800b4a4:	7afb      	ldrb	r3, [r7, #11]
 800b4a6:	f003 0304 	and.w	r3, r3, #4
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d121      	bne.n	800b4f2 <follow_path+0xe6>

         /* Get into the sub-directory */
         if (!(obj->attr & AM_DIR))                             /* It is not a sub-directory and cannot follow */
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	799b      	ldrb	r3, [r3, #6]
 800b4b2:	f003 0310 	and.w	r3, r3, #16
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d102      	bne.n	800b4c0 <follow_path+0xb4>
         {
            res = FR_NO_PATH; break;
 800b4ba:	2305      	movs	r3, #5
 800b4bc:	75fb      	strb	r3, [r7, #23]
 800b4be:	e019      	b.n	800b4f4 <follow_path+0xe8>
            obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
         }
         else
         #endif
         {
            obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));                            /* Open next directory */
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	8992      	ldrh	r2, [r2, #12]
 800b4ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4d2:	fb02 f200 	mul.w	r2, r2, r0
 800b4d6:	1a9b      	subs	r3, r3, r2
 800b4d8:	440b      	add	r3, r1
 800b4da:	4619      	mov	r1, r3
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f7ff fe3a 	bl	800b156 <ld_clust>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	609a      	str	r2, [r3, #8]
         res = create_name(dp, &path);                  /* Get a segment name of the path */
 800b4e8:	e7bb      	b.n	800b462 <follow_path+0x56>
         if (res != FR_OK) break;
 800b4ea:	bf00      	nop
 800b4ec:	e002      	b.n	800b4f4 <follow_path+0xe8>
            break;
 800b4ee:	bf00      	nop
 800b4f0:	e000      	b.n	800b4f4 <follow_path+0xe8>
         if (ns & NS_LAST) break;                                       /* Last segment matched. Function completed. */
 800b4f2:	bf00      	nop
         }
      }
   }

   return res;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20005335 	.word	0x20005335

0800b504 <get_ldnumber>:

static
int get_ldnumber (              /* Returns logical drive number (-1:invalid drive) */
   const TCHAR** path           /* Pointer to pointer to the path name */
                 )
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
   const TCHAR  *tp, *tt;
   UINT         i;
   int          vol = -1;
 800b50c:	f04f 33ff 	mov.w	r3, #4294967295
 800b510:	613b      	str	r3, [r7, #16]
   char        c;
   TCHAR       tc;
   #endif


   if (*path)           /* If the pointer is not a null */
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d031      	beq.n	800b57e <get_ldnumber+0x7a>
   {
      for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;               /* Find ':' in the path */
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	e002      	b.n	800b528 <get_ldnumber+0x24>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	3301      	adds	r3, #1
 800b526:	617b      	str	r3, [r7, #20]
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	2b20      	cmp	r3, #32
 800b52e:	d903      	bls.n	800b538 <get_ldnumber+0x34>
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b3a      	cmp	r3, #58	; 0x3a
 800b536:	d1f4      	bne.n	800b522 <get_ldnumber+0x1e>
      if (*tt == ':')                   /* If a ':' is exist in the path name */
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b3a      	cmp	r3, #58	; 0x3a
 800b53e:	d11c      	bne.n	800b57a <get_ldnumber+0x76>
      {
         tp = *path;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	60fb      	str	r3, [r7, #12]
         i = *tp++ - '0';
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	60fa      	str	r2, [r7, #12]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	3b30      	subs	r3, #48	; 0x30
 800b550:	60bb      	str	r3, [r7, #8]
         if (i < 10 && tp == tt)                        /* Is there a numeric drive id? */
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	2b09      	cmp	r3, #9
 800b556:	d80e      	bhi.n	800b576 <get_ldnumber+0x72>
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d10a      	bne.n	800b576 <get_ldnumber+0x72>
         {
            if (i < _VOLUMES)                           /* If a drive id is found, get the value and strip it */
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d107      	bne.n	800b576 <get_ldnumber+0x72>
            {
               vol = (int)i;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	613b      	str	r3, [r7, #16]
               *path = ++tt;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	3301      	adds	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	601a      	str	r2, [r3, #0]
               vol = (int)i;
               *path = tt;
            }
         }
         #endif
         return vol;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	e002      	b.n	800b580 <get_ldnumber+0x7c>
      }

      #if _FS_RPATH != 0 && _VOLUMES >= 2
      vol = CurrVol;            /* Current drive */
      #else
      vol = 0;                          /* Drive 0 */
 800b57a:	2300      	movs	r3, #0
 800b57c:	613b      	str	r3, [r7, #16]
      #endif
   }

   return vol;
 800b57e:	693b      	ldr	r3, [r7, #16]
}
 800b580:	4618      	mov	r0, r3
 800b582:	371c      	adds	r7, #28
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <check_fs>:
static
BYTE check_fs ( /* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
   FATFS* fs,           /* File system object */
   DWORD sect           /* Sector# (lba) to load and check if it is an FAT-VBR or not */
              )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
   fs->wflag = 0; fs->winsect = 0xFFFFFFFF;                     /* Invaidate window */
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	70da      	strb	r2, [r3, #3]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a2:	631a      	str	r2, [r3, #48]	; 0x30
   if (move_window(fs, sect) != FR_OK) return 4;        /* Load boot record */
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff f856 	bl	800a658 <move_window>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <check_fs+0x2a>
 800b5b2:	2304      	movs	r3, #4
 800b5b4:	e038      	b.n	800b628 <check_fs+0x9c>

   if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;          /* Check boot record signature (always placed here even if the sector size is >512) */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3334      	adds	r3, #52	; 0x34
 800b5ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe fd9a 	bl	800a0f8 <ld_word>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d001      	beq.n	800b5d4 <check_fs+0x48>
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e029      	b.n	800b628 <check_fs+0x9c>

   if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5da:	2be9      	cmp	r3, #233	; 0xe9
 800b5dc:	d009      	beq.n	800b5f2 <check_fs+0x66>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5e4:	2beb      	cmp	r3, #235	; 0xeb
 800b5e6:	d11e      	bne.n	800b626 <check_fs+0x9a>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b5ee:	2b90      	cmp	r3, #144	; 0x90
 800b5f0:	d119      	bne.n	800b626 <check_fs+0x9a>
   {
      if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;                 /* Check "FAT" string */
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3334      	adds	r3, #52	; 0x34
 800b5f6:	3336      	adds	r3, #54	; 0x36
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fe fd95 	bl	800a128 <ld_dword>
 800b5fe:	4603      	mov	r3, r0
 800b600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b604:	4a0a      	ldr	r2, [pc, #40]	; (800b630 <check_fs+0xa4>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d101      	bne.n	800b60e <check_fs+0x82>
 800b60a:	2300      	movs	r3, #0
 800b60c:	e00c      	b.n	800b628 <check_fs+0x9c>

      if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;                                  /* Check "FAT3" string */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	3334      	adds	r3, #52	; 0x34
 800b612:	3352      	adds	r3, #82	; 0x52
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe fd87 	bl	800a128 <ld_dword>
 800b61a:	4602      	mov	r2, r0
 800b61c:	4b05      	ldr	r3, [pc, #20]	; (800b634 <check_fs+0xa8>)
 800b61e:	429a      	cmp	r2, r3
 800b620:	d101      	bne.n	800b626 <check_fs+0x9a>
 800b622:	2300      	movs	r3, #0
 800b624:	e000      	b.n	800b628 <check_fs+0x9c>

   #if _FS_EXFAT
   if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;

   #endif
   return 2;
 800b626:	2302      	movs	r3, #2
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	00544146 	.word	0x00544146
 800b634:	33544146 	.word	0x33544146

0800b638 <find_volume>:
FRESULT find_volume (   /* FR_OK(0): successful, !=0: any error occurred */
   const TCHAR** path,          /* Pointer to pointer to the path name (drive number) */
   FATFS** rfs,                 /* Pointer to pointer to the found file system object */
   BYTE mode                            /* !=0: Check write protection for write access */
                    )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b096      	sub	sp, #88	; 0x58
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	4613      	mov	r3, r2
 800b644:	71fb      	strb	r3, [r7, #7]
   FATFS    *fs;
   UINT     i;


   /* Get logical drive number */
   *rfs = 0;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2200      	movs	r2, #0
 800b64a:	601a      	str	r2, [r3, #0]
   vol = get_ldnumber(path);
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f7ff ff59 	bl	800b504 <get_ldnumber>
 800b652:	63f8      	str	r0, [r7, #60]	; 0x3c
   if (vol < 0) return FR_INVALID_DRIVE;
 800b654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b656:	2b00      	cmp	r3, #0
 800b658:	da01      	bge.n	800b65e <find_volume+0x26>
 800b65a:	230b      	movs	r3, #11
 800b65c:	e265      	b.n	800bb2a <find_volume+0x4f2>

   /* Check if the file system object is valid or not */
   fs = FatFs[vol];                                             /* Get pointer to the file system object */
 800b65e:	4ab0      	ldr	r2, [pc, #704]	; (800b920 <find_volume+0x2e8>)
 800b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b666:	63bb      	str	r3, [r7, #56]	; 0x38
   if (!fs) return FR_NOT_ENABLED;              /* Is the file system object available? */
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <find_volume+0x3a>
 800b66e:	230c      	movs	r3, #12
 800b670:	e25b      	b.n	800bb2a <find_volume+0x4f2>

   ENTER_FF(fs);                                                /* Lock the volume */
   *rfs = fs;                                                           /* Return pointer to the file system object */
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b676:	601a      	str	r2, [r3, #0]

   mode &= (BYTE) ~FA_READ;                             /* Desired access mode, write access or not */
 800b678:	79fb      	ldrb	r3, [r7, #7]
 800b67a:	f023 0301 	bic.w	r3, r3, #1
 800b67e:	71fb      	strb	r3, [r7, #7]
   if (fs->fs_type)                                             /* If the volume has been mounted */
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d01a      	beq.n	800b6be <find_volume+0x86>
   {
      stat = disk_status(fs->drv);
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	785b      	ldrb	r3, [r3, #1]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fe fc95 	bl	8009fbc <disk_status>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (!(stat & STA_NOINIT))                         /* and the physical drive is kept initialized */
 800b698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10c      	bne.n	800b6be <find_volume+0x86>
      {
         if (!_FS_READONLY && mode && (stat & STA_PROTECT))                     /* Check write protection if needed */
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d007      	beq.n	800b6ba <find_volume+0x82>
 800b6aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <find_volume+0x82>
         {
            return FR_WRITE_PROTECTED;
 800b6b6:	230a      	movs	r3, #10
 800b6b8:	e237      	b.n	800bb2a <find_volume+0x4f2>
         }

         return FR_OK;                                          /* The file system object is valid */
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e235      	b.n	800bb2a <find_volume+0x4f2>
   }

   /* The file system object is not valid. */
   /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

   fs->fs_type = 0;                                             /* Clear the file system object */
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	701a      	strb	r2, [r3, #0]
   fs->drv = LD2PD(vol);                                /* Bind the logical drive and a physical drive */
 800b6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	705a      	strb	r2, [r3, #1]
   stat = disk_initialize(fs->drv);             /* Initialize the physical drive */
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ce:	785b      	ldrb	r3, [r3, #1]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fe fc8d 	bl	8009ff0 <disk_initialize>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   if (stat & STA_NOINIT)                               /* Check if the initialization succeeded */
 800b6dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6e0:	f003 0301 	and.w	r3, r3, #1
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <find_volume+0xb4>
   {
      return FR_NOT_READY;                              /* Failed to initialize due to no medium or hard error */
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e21e      	b.n	800bb2a <find_volume+0x4f2>
   }

   if (!_FS_READONLY && mode && (stat & STA_PROTECT))        /* Check disk write protection if needed */
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d007      	beq.n	800b702 <find_volume+0xca>
 800b6f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <find_volume+0xca>
   {
      return FR_WRITE_PROTECTED;
 800b6fe:	230a      	movs	r3, #10
 800b700:	e213      	b.n	800bb2a <find_volume+0x4f2>
   }

   #if _MAX_SS != _MIN_SS                               /* Get sector size (multiple sector size cfg only) */
   if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b704:	7858      	ldrb	r0, [r3, #1]
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	330c      	adds	r3, #12
 800b70a:	461a      	mov	r2, r3
 800b70c:	2102      	movs	r1, #2
 800b70e:	f7fe fcd5 	bl	800a0bc <disk_ioctl>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d001      	beq.n	800b71c <find_volume+0xe4>
 800b718:	2301      	movs	r3, #1
 800b71a:	e206      	b.n	800bb2a <find_volume+0x4f2>

   if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	899b      	ldrh	r3, [r3, #12]
 800b720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b724:	d80d      	bhi.n	800b742 <find_volume+0x10a>
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	899b      	ldrh	r3, [r3, #12]
 800b72a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b72e:	d308      	bcc.n	800b742 <find_volume+0x10a>
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	899b      	ldrh	r3, [r3, #12]
 800b734:	461a      	mov	r2, r3
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	899b      	ldrh	r3, [r3, #12]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	4013      	ands	r3, r2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <find_volume+0x10e>
 800b742:	2301      	movs	r3, #1
 800b744:	e1f1      	b.n	800bb2a <find_volume+0x4f2>

   #endif

   /* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
   bsect = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	653b      	str	r3, [r7, #80]	; 0x50
   fmt = check_fs(fs, bsect);                           /* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b74a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b74c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b74e:	f7ff ff1d 	bl	800b58c <check_fs>
 800b752:	4603      	mov	r3, r0
 800b754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0))        /* Not an FAT-VBR or forced partition number */
 800b758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d14b      	bne.n	800b7f8 <find_volume+0x1c0>
   {
      for (i = 0; i < 4; i++) {                         /* Get partition offset */
 800b760:	2300      	movs	r3, #0
 800b762:	643b      	str	r3, [r7, #64]	; 0x40
 800b764:	e01f      	b.n	800b7a6 <find_volume+0x16e>
         pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b768:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76e:	011b      	lsls	r3, r3, #4
 800b770:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b774:	4413      	add	r3, r2
 800b776:	633b      	str	r3, [r7, #48]	; 0x30
         br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	3304      	adds	r3, #4
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d006      	beq.n	800b790 <find_volume+0x158>
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	3308      	adds	r3, #8
 800b786:	4618      	mov	r0, r3
 800b788:	f7fe fcce 	bl	800a128 <ld_dword>
 800b78c:	4602      	mov	r2, r0
 800b78e:	e000      	b.n	800b792 <find_volume+0x15a>
 800b790:	2200      	movs	r2, #0
 800b792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b79a:	440b      	add	r3, r1
 800b79c:	f843 2c44 	str.w	r2, [r3, #-68]
      for (i = 0; i < 4; i++) {                         /* Get partition offset */
 800b7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d9dc      	bls.n	800b766 <find_volume+0x12e>
      }
      i = LD2PT(vol);                                           /* Partition number: 0:auto, 1-4:forced */
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	643b      	str	r3, [r7, #64]	; 0x40
      if (i) i--;
 800b7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <find_volume+0x184>
 800b7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	643b      	str	r3, [r7, #64]	; 0x40

      do {                                                              /* Find an FAT volume */
         bsect = br[i];
 800b7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b7ca:	653b      	str	r3, [r7, #80]	; 0x50
         fmt = bsect ? check_fs(fs, bsect) : 3;                 /* Check the partition */
 800b7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d005      	beq.n	800b7de <find_volume+0x1a6>
 800b7d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7d6:	f7ff fed9 	bl	800b58c <check_fs>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	e000      	b.n	800b7e0 <find_volume+0x1a8>
 800b7de:	2303      	movs	r3, #3
 800b7e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      } while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b7e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d905      	bls.n	800b7f8 <find_volume+0x1c0>
 800b7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d9e1      	bls.n	800b7bc <find_volume+0x184>
   }

   if (fmt == 4) return FR_DISK_ERR;                    /* An error occured in the disk I/O layer */
 800b7f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7fc:	2b04      	cmp	r3, #4
 800b7fe:	d101      	bne.n	800b804 <find_volume+0x1cc>
 800b800:	2301      	movs	r3, #1
 800b802:	e192      	b.n	800bb2a <find_volume+0x4f2>

   if (fmt >= 2) return FR_NO_FILESYSTEM;       /* No FAT volume is found */
 800b804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d901      	bls.n	800b810 <find_volume+0x1d8>
 800b80c:	230d      	movs	r3, #13
 800b80e:	e18c      	b.n	800bb2a <find_volume+0x4f2>
      fmt = FS_EXFAT;                           /* FAT sub-type */
   }
   else
   #endif /* _FS_EXFAT */
   {
      if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;                 /* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	3334      	adds	r3, #52	; 0x34
 800b814:	330b      	adds	r3, #11
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe fc6e 	bl	800a0f8 <ld_word>
 800b81c:	4603      	mov	r3, r0
 800b81e:	461a      	mov	r2, r3
 800b820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b822:	899b      	ldrh	r3, [r3, #12]
 800b824:	429a      	cmp	r2, r3
 800b826:	d001      	beq.n	800b82c <find_volume+0x1f4>
 800b828:	230d      	movs	r3, #13
 800b82a:	e17e      	b.n	800bb2a <find_volume+0x4f2>

      fasize = ld_word(fs->win + BPB_FATSz16);                          /* Number of sectors per FAT */
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	3334      	adds	r3, #52	; 0x34
 800b830:	3316      	adds	r3, #22
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe fc60 	bl	800a0f8 <ld_word>
 800b838:	4603      	mov	r3, r0
 800b83a:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b83c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <find_volume+0x218>
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	3334      	adds	r3, #52	; 0x34
 800b846:	3324      	adds	r3, #36	; 0x24
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fe fc6d 	bl	800a128 <ld_dword>
 800b84e:	64f8      	str	r0, [r7, #76]	; 0x4c

      fs->fsize = fasize;
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b854:	61da      	str	r2, [r3, #28]

      fs->n_fats = fs->win[BPB_NumFATs];                                        /* Number of FATs */
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	709a      	strb	r2, [r3, #2]
      if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;                  /* (Must be 1 or 2) */
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	789b      	ldrb	r3, [r3, #2]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d005      	beq.n	800b874 <find_volume+0x23c>
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	789b      	ldrb	r3, [r3, #2]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d001      	beq.n	800b874 <find_volume+0x23c>
 800b870:	230d      	movs	r3, #13
 800b872:	e15a      	b.n	800bb2a <find_volume+0x4f2>

      fasize *= fs->n_fats;                                                             /* Number of sectors for FAT area */
 800b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b876:	789b      	ldrb	r3, [r3, #2]
 800b878:	461a      	mov	r2, r3
 800b87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b87c:	fb02 f303 	mul.w	r3, r2, r3
 800b880:	64fb      	str	r3, [r7, #76]	; 0x4c

      fs->csize = fs->win[BPB_SecPerClus];                              /* Cluster size */
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b888:	b29a      	uxth	r2, r3
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	815a      	strh	r2, [r3, #10]
      if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;             /* (Must be power of 2) */
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	895b      	ldrh	r3, [r3, #10]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d008      	beq.n	800b8a8 <find_volume+0x270>
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	895b      	ldrh	r3, [r3, #10]
 800b89a:	461a      	mov	r2, r3
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	895b      	ldrh	r3, [r3, #10]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <find_volume+0x274>
 800b8a8:	230d      	movs	r3, #13
 800b8aa:	e13e      	b.n	800bb2a <find_volume+0x4f2>

      fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);                /* Number of root directory entries */
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	3334      	adds	r3, #52	; 0x34
 800b8b0:	3311      	adds	r3, #17
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe fc20 	bl	800a0f8 <ld_word>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	811a      	strh	r2, [r3, #8]
      if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;           /* (Must be sector aligned) */
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	891b      	ldrh	r3, [r3, #8]
 800b8c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8c6:	8992      	ldrh	r2, [r2, #12]
 800b8c8:	0952      	lsrs	r2, r2, #5
 800b8ca:	b292      	uxth	r2, r2
 800b8cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8d0:	fb02 f201 	mul.w	r2, r2, r1
 800b8d4:	1a9b      	subs	r3, r3, r2
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <find_volume+0x2a8>
 800b8dc:	230d      	movs	r3, #13
 800b8de:	e124      	b.n	800bb2a <find_volume+0x4f2>

      tsect = ld_word(fs->win + BPB_TotSec16);                          /* Number of sectors on the volume */
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	3334      	adds	r3, #52	; 0x34
 800b8e4:	3313      	adds	r3, #19
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe fc06 	bl	800a0f8 <ld_word>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	64bb      	str	r3, [r7, #72]	; 0x48
      if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <find_volume+0x2cc>
 800b8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f8:	3334      	adds	r3, #52	; 0x34
 800b8fa:	3320      	adds	r3, #32
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fe fc13 	bl	800a128 <ld_dword>
 800b902:	64b8      	str	r0, [r7, #72]	; 0x48

      nrsv = ld_word(fs->win + BPB_RsvdSecCnt);                         /* Number of reserved sectors */
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	3334      	adds	r3, #52	; 0x34
 800b908:	330e      	adds	r3, #14
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fbf4 	bl	800a0f8 <ld_word>
 800b910:	4603      	mov	r3, r0
 800b912:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if (nrsv == 0) return FR_NO_FILESYSTEM;                           /* (Must not be 0) */
 800b914:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b916:	2b00      	cmp	r3, #0
 800b918:	d104      	bne.n	800b924 <find_volume+0x2ec>
 800b91a:	230d      	movs	r3, #13
 800b91c:	e105      	b.n	800bb2a <find_volume+0x4f2>
 800b91e:	bf00      	nop
 800b920:	200010ec 	.word	0x200010ec

      /* Determine the FAT sub type */
      sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);               /* RSV + FAT + DIR */
 800b924:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b928:	4413      	add	r3, r2
 800b92a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b92c:	8911      	ldrh	r1, [r2, #8]
 800b92e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b930:	8992      	ldrh	r2, [r2, #12]
 800b932:	0952      	lsrs	r2, r2, #5
 800b934:	b292      	uxth	r2, r2
 800b936:	fbb1 f2f2 	udiv	r2, r1, r2
 800b93a:	b292      	uxth	r2, r2
 800b93c:	4413      	add	r3, r2
 800b93e:	62bb      	str	r3, [r7, #40]	; 0x28
      if (tsect < sysect) return FR_NO_FILESYSTEM;              /* (Invalid volume size) */
 800b940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	429a      	cmp	r2, r3
 800b946:	d201      	bcs.n	800b94c <find_volume+0x314>
 800b948:	230d      	movs	r3, #13
 800b94a:	e0ee      	b.n	800bb2a <find_volume+0x4f2>

      nclst = (tsect - sysect) / fs->csize;                             /* Number of clusters */
 800b94c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b954:	8952      	ldrh	r2, [r2, #10]
 800b956:	fbb3 f3f2 	udiv	r3, r3, r2
 800b95a:	627b      	str	r3, [r7, #36]	; 0x24
      if (nclst == 0) return FR_NO_FILESYSTEM;                          /* (Invalid volume size) */
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <find_volume+0x32e>
 800b962:	230d      	movs	r3, #13
 800b964:	e0e1      	b.n	800bb2a <find_volume+0x4f2>

      fmt = FS_FAT32;
 800b966:	2303      	movs	r3, #3
 800b968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b972:	4293      	cmp	r3, r2
 800b974:	d802      	bhi.n	800b97c <find_volume+0x344>
 800b976:	2302      	movs	r3, #2
 800b978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

      if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b982:	4293      	cmp	r3, r2
 800b984:	d802      	bhi.n	800b98c <find_volume+0x354>
 800b986:	2301      	movs	r3, #1
 800b988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

      /* Boundaries and Limits */
      fs->n_fatent = nclst + 2;                                                         /* Number of FAT entries */
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	1c9a      	adds	r2, r3, #2
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	619a      	str	r2, [r3, #24]
      fs->volbase = bsect;                                                              /* Volume start sector */
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b998:	621a      	str	r2, [r3, #32]
      fs->fatbase = bsect + nrsv;                                               /* FAT start sector */
 800b99a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99e:	441a      	add	r2, r3
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	625a      	str	r2, [r3, #36]	; 0x24
      fs->database = bsect + sysect;                                            /* Data start sector */
 800b9a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	441a      	add	r2, r3
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	62da      	str	r2, [r3, #44]	; 0x2c
      if (fmt == FS_FAT32)
 800b9ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d11e      	bne.n	800b9f4 <find_volume+0x3bc>
      {
         if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;                      /* (Must be FAT32 revision 0.0) */
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	3334      	adds	r3, #52	; 0x34
 800b9ba:	332a      	adds	r3, #42	; 0x2a
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe fb9b 	bl	800a0f8 <ld_word>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <find_volume+0x394>
 800b9c8:	230d      	movs	r3, #13
 800b9ca:	e0ae      	b.n	800bb2a <find_volume+0x4f2>

         if (fs->n_rootdir) return FR_NO_FILESYSTEM;                    /* (BPB_RootEntCnt must be 0) */
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	891b      	ldrh	r3, [r3, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <find_volume+0x3a0>
 800b9d4:	230d      	movs	r3, #13
 800b9d6:	e0a8      	b.n	800bb2a <find_volume+0x4f2>

         fs->dirbase = ld_dword(fs->win + BPB_RootClus32);                      /* Root directory start cluster */
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9da:	3334      	adds	r3, #52	; 0x34
 800b9dc:	332c      	adds	r3, #44	; 0x2c
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7fe fba2 	bl	800a128 <ld_dword>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	629a      	str	r2, [r3, #40]	; 0x28
         szbfat = fs->n_fatent * 4;                                                     /* (Needed FAT size) */
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9f2:	e01f      	b.n	800ba34 <find_volume+0x3fc>
      }
      else
      {
         if (fs->n_rootdir == 0) return FR_NO_FILESYSTEM;               /* (BPB_RootEntCnt must not be 0) */
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	891b      	ldrh	r3, [r3, #8]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <find_volume+0x3c8>
 800b9fc:	230d      	movs	r3, #13
 800b9fe:	e094      	b.n	800bb2a <find_volume+0x4f2>

         fs->dirbase = fs->fatbase + fasize;                                    /* Root directory start sector */
 800ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba06:	441a      	add	r2, r3
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	629a      	str	r2, [r3, #40]	; 0x28
         szbfat = (fmt == FS_FAT16) ?                                           /* (Needed FAT size) */
                  fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ba0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d103      	bne.n	800ba1c <find_volume+0x3e4>
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	e00a      	b.n	800ba32 <find_volume+0x3fa>
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	699a      	ldr	r2, [r3, #24]
 800ba20:	4613      	mov	r3, r2
 800ba22:	005b      	lsls	r3, r3, #1
 800ba24:	4413      	add	r3, r2
 800ba26:	085a      	lsrs	r2, r3, #1
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	4413      	add	r3, r2
         szbfat = (fmt == FS_FAT16) ?                                           /* (Needed FAT size) */
 800ba32:	647b      	str	r3, [r7, #68]	; 0x44
      }

      if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;                /* (BPB_FATSz must not be less than the size needed) */
 800ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba36:	69da      	ldr	r2, [r3, #28]
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	899b      	ldrh	r3, [r3, #12]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba40:	440b      	add	r3, r1
 800ba42:	3b01      	subs	r3, #1
 800ba44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba46:	8989      	ldrh	r1, [r1, #12]
 800ba48:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d201      	bcs.n	800ba54 <find_volume+0x41c>
 800ba50:	230d      	movs	r3, #13
 800ba52:	e06a      	b.n	800bb2a <find_volume+0x4f2>

      #if !_FS_READONLY
      /* Get FSINFO if available */
      fs->last_clst = fs->free_clst = 0xFFFFFFFF;                       /* Initialize cluster allocation information */
 800ba54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba56:	f04f 32ff 	mov.w	r2, #4294967295
 800ba5a:	615a      	str	r2, [r3, #20]
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5e:	695a      	ldr	r2, [r3, #20]
 800ba60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba62:	611a      	str	r2, [r3, #16]
      fs->fsi_flag = 0x80;
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	2280      	movs	r2, #128	; 0x80
 800ba68:	711a      	strb	r2, [r3, #4]
      #if (_FS_NOFSINFO & 3) != 3
      if (fmt == FS_FAT32                                       /* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ba6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba6e:	2b03      	cmp	r3, #3
 800ba70:	d149      	bne.n	800bb06 <find_volume+0x4ce>
          && ld_word(fs->win + BPB_FSInfo32) == 1
 800ba72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba74:	3334      	adds	r3, #52	; 0x34
 800ba76:	3330      	adds	r3, #48	; 0x30
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fe fb3d 	bl	800a0f8 <ld_word>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d140      	bne.n	800bb06 <find_volume+0x4ce>
          && move_window(fs, bsect + 1) == FR_OK)
 800ba84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba86:	3301      	adds	r3, #1
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba8c:	f7fe fde4 	bl	800a658 <move_window>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d137      	bne.n	800bb06 <find_volume+0x4ce>
      {
         fs->fsi_flag = 0;
 800ba96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba98:	2200      	movs	r2, #0
 800ba9a:	711a      	strb	r2, [r3, #4]
         if (ld_word(fs->win + BS_55AA) == 0xAA55                       /* Load FSINFO data if available */
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9e:	3334      	adds	r3, #52	; 0x34
 800baa0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe fb27 	bl	800a0f8 <ld_word>
 800baaa:	4603      	mov	r3, r0
 800baac:	461a      	mov	r2, r3
 800baae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d127      	bne.n	800bb06 <find_volume+0x4ce>
             && ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	3334      	adds	r3, #52	; 0x34
 800baba:	4618      	mov	r0, r3
 800babc:	f7fe fb34 	bl	800a128 <ld_dword>
 800bac0:	4602      	mov	r2, r0
 800bac2:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <find_volume+0x4fc>)
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d11e      	bne.n	800bb06 <find_volume+0x4ce>
             && ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	3334      	adds	r3, #52	; 0x34
 800bacc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fe fb29 	bl	800a128 <ld_dword>
 800bad6:	4602      	mov	r2, r0
 800bad8:	4b17      	ldr	r3, [pc, #92]	; (800bb38 <find_volume+0x500>)
 800bada:	429a      	cmp	r2, r3
 800badc:	d113      	bne.n	800bb06 <find_volume+0x4ce>
         {
            #if (_FS_NOFSINFO & 1) == 0
            fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	3334      	adds	r3, #52	; 0x34
 800bae2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe fb1e 	bl	800a128 <ld_dword>
 800baec:	4602      	mov	r2, r0
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	615a      	str	r2, [r3, #20]
            #endif
            #if (_FS_NOFSINFO & 2) == 0
            fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800baf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf4:	3334      	adds	r3, #52	; 0x34
 800baf6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe fb14 	bl	800a128 <ld_dword>
 800bb00:	4602      	mov	r2, r0
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	611a      	str	r2, [r3, #16]

      #endif /* (_FS_NOFSINFO & 3) != 3 */
      #endif /* !_FS_READONLY */
   }

   fs->fs_type = fmt;                   /* FAT sub-type */
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bb0c:	701a      	strb	r2, [r3, #0]
   fs->id = ++Fsid;                     /* File system mount ID */
 800bb0e:	4b0b      	ldr	r3, [pc, #44]	; (800bb3c <find_volume+0x504>)
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	3301      	adds	r3, #1
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	4b09      	ldr	r3, [pc, #36]	; (800bb3c <find_volume+0x504>)
 800bb18:	801a      	strh	r2, [r3, #0]
 800bb1a:	4b08      	ldr	r3, [pc, #32]	; (800bb3c <find_volume+0x504>)
 800bb1c:	881a      	ldrh	r2, [r3, #0]
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	80da      	strh	r2, [r3, #6]
   #endif
   #if _FS_RPATH != 0
   fs->cdir = 0;                        /* Initialize current directory */
   #endif
   #if _FS_LOCK != 0                    /* Clear file lock semaphores */
   clear_lock(fs);
 800bb22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb24:	f7fe fd30 	bl	800a588 <clear_lock>
   #endif
   return FR_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3758      	adds	r7, #88	; 0x58
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	41615252 	.word	0x41615252
 800bb38:	61417272 	.word	0x61417272
 800bb3c:	200010f0 	.word	0x200010f0

0800bb40 <validate>:
static
FRESULT validate (      /* Returns FR_OK or FR_INVALID_OBJECT */
   _FDID* obj,                  /* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
   FATFS** fs                   /* Pointer to pointer to the owner file system object to return */
                 )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
   FRESULT  res = FR_INVALID_OBJECT;
 800bb4a:	2309      	movs	r3, #9
 800bb4c:	73fb      	strb	r3, [r7, #15]


   if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id)            /* Test if the object is valid */
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d01c      	beq.n	800bb8e <validate+0x4e>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d018      	beq.n	800bb8e <validate+0x4e>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d013      	beq.n	800bb8e <validate+0x4e>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	889a      	ldrh	r2, [r3, #4]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	88db      	ldrh	r3, [r3, #6]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d10c      	bne.n	800bb8e <validate+0x4e>
      {
         res = FR_TIMEOUT;
      }

      #else
      if (!(disk_status(obj->fs->drv) & STA_NOINIT))             /* Test if the phsical drive is kept initialized */
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	785b      	ldrb	r3, [r3, #1]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fa1e 	bl	8009fbc <disk_status>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <validate+0x4e>
      {
         res = FR_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
      }

      #endif
   }

   *fs = (res == FR_OK) ? obj->fs : 0;          /* Corresponding filesystem object */
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <validate+0x5a>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	e000      	b.n	800bb9c <validate+0x5c>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	6013      	str	r3, [r2, #0]
   return res;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <f_mount>:
FRESULT f_mount (
   FATFS* fs,                           /* Pointer to the file system object (NULL:unmount)*/
   const TCHAR* path,           /* Logical drive number to be mounted/unmounted */
   BYTE opt                             /* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
                )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	71fb      	strb	r3, [r7, #7]
   FATFS        *cfs;
   int          vol;
   FRESULT      res;
   const TCHAR  *rp = path;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	613b      	str	r3, [r7, #16]


   /* Get logical drive number */
   vol = get_ldnumber(&rp);
 800bbbe:	f107 0310 	add.w	r3, r7, #16
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fc9e 	bl	800b504 <get_ldnumber>
 800bbc8:	61f8      	str	r0, [r7, #28]
   if (vol < 0) return FR_INVALID_DRIVE;
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	da01      	bge.n	800bbd4 <f_mount+0x28>
 800bbd0:	230b      	movs	r3, #11
 800bbd2:	e02b      	b.n	800bc2c <f_mount+0x80>

   cfs = FatFs[vol];                                            /* Pointer to fs object */
 800bbd4:	4a17      	ldr	r2, [pc, #92]	; (800bc34 <f_mount+0x88>)
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbdc:	61bb      	str	r3, [r7, #24]

   if (cfs)
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d005      	beq.n	800bbf0 <f_mount+0x44>
   {
      #if _FS_LOCK != 0
      clear_lock(cfs);
 800bbe4:	69b8      	ldr	r0, [r7, #24]
 800bbe6:	f7fe fccf 	bl	800a588 <clear_lock>
      #endif
      #if _FS_REENTRANT                                         /* Discard sync object of the current volume */
      if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;

      #endif
      cfs->fs_type = 0;                                         /* Clear old fs object */
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	2200      	movs	r2, #0
 800bbee:	701a      	strb	r2, [r3, #0]
   }

   if (fs)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d002      	beq.n	800bbfc <f_mount+0x50>
   {
      fs->fs_type = 0;                                          /* Clear new fs object */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	701a      	strb	r2, [r3, #0]
      if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;

      #endif
   }

   FatFs[vol] = fs;                                             /* Register new fs object */
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	490d      	ldr	r1, [pc, #52]	; (800bc34 <f_mount+0x88>)
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

   if (!fs || opt != 1) return FR_OK;           /* Do not mount now, it will be mounted later */
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <f_mount+0x66>
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d001      	beq.n	800bc16 <f_mount+0x6a>
 800bc12:	2300      	movs	r3, #0
 800bc14:	e00a      	b.n	800bc2c <f_mount+0x80>

   res = find_volume(&path, &fs, 0);            /* Force mounted the volume */
 800bc16:	f107 010c 	add.w	r1, r7, #12
 800bc1a:	f107 0308 	add.w	r3, r7, #8
 800bc1e:	2200      	movs	r2, #0
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7ff fd09 	bl	800b638 <find_volume>
 800bc26:	4603      	mov	r3, r0
 800bc28:	75fb      	strb	r3, [r7, #23]
   LEAVE_FF(fs, res);
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	200010ec 	.word	0x200010ec

0800bc38 <f_open>:
FRESULT f_open (
   FIL* fp,                             /* Pointer to the blank file object */
   const TCHAR* path,           /* Pointer to the file name */
   BYTE mode                            /* Access mode and file open mode flags */
               )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b098      	sub	sp, #96	; 0x60
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	4613      	mov	r3, r2
 800bc44:	71fb      	strb	r3, [r7, #7]
   FSIZE_t  ofs;
   #endif
   DEF_NAMBUF


   if (!fp) return FR_INVALID_OBJECT;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <f_open+0x18>
 800bc4c:	2309      	movs	r3, #9
 800bc4e:	e1bb      	b.n	800bfc8 <f_open+0x390>

   /* Get logical drive */
   mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bc50:	79fb      	ldrb	r3, [r7, #7]
 800bc52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc56:	71fb      	strb	r3, [r7, #7]

   res = find_volume(&path, &fs, mode);
 800bc58:	79fa      	ldrb	r2, [r7, #7]
 800bc5a:	f107 0110 	add.w	r1, r7, #16
 800bc5e:	f107 0308 	add.w	r3, r7, #8
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff fce8 	bl	800b638 <find_volume>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
   if (res == FR_OK)
 800bc6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f040 819f 	bne.w	800bfb6 <f_open+0x37e>
   {
      dj.obj.fs = fs;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	617b      	str	r3, [r7, #20]
      INIT_NAMBUF(fs);
      res = follow_path(&dj, path);             /* Follow the file path */
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	f107 0314 	add.w	r3, r7, #20
 800bc82:	4611      	mov	r1, r2
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff fbc1 	bl	800b40c <follow_path>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      #if !_FS_READONLY /* R/W configuration */
      if (res == FR_OK)
 800bc90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d11a      	bne.n	800bcce <f_open+0x96>
      {
         if (dj.fn[NSFLAG] & NS_NONAME)                         /* Origin directory itself? */
 800bc98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da03      	bge.n	800bcaa <f_open+0x72>
         {
            res = FR_INVALID_NAME;
 800bca2:	2306      	movs	r3, #6
 800bca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bca8:	e011      	b.n	800bcce <f_open+0x96>
         }

         #if _FS_LOCK != 0
         else
         {
            res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bcaa:	79fb      	ldrb	r3, [r7, #7]
 800bcac:	f023 0301 	bic.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	bf14      	ite	ne
 800bcb4:	2301      	movne	r3, #1
 800bcb6:	2300      	moveq	r3, #0
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f107 0314 	add.w	r3, r7, #20
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fb18 	bl	800a2f8 <chk_lock>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
         }
         #endif
      }

      /* Create or Open a file */
      if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	f003 031c 	and.w	r3, r3, #28
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d07f      	beq.n	800bdd8 <f_open+0x1a0>
      {
         if (res != FR_OK)                                                      /* No file, create new */
 800bcd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d017      	beq.n	800bd10 <f_open+0xd8>
         {
            if (res == FR_NO_FILE)                                      /* There is no file to open, create a new entry */
 800bce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	d10e      	bne.n	800bd06 <f_open+0xce>
            {
               #if _FS_LOCK != 0
               res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bce8:	f7fe fb62 	bl	800a3b0 <enq_lock>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d006      	beq.n	800bd00 <f_open+0xc8>
 800bcf2:	f107 0314 	add.w	r3, r7, #20
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fac1 	bl	800b27e <dir_register>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	e000      	b.n	800bd02 <f_open+0xca>
 800bd00:	2312      	movs	r3, #18
 800bd02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
               #else
               res = dir_register(&dj);
               #endif
            }

            mode |= FA_CREATE_ALWAYS;                                   /* File is created */
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	f043 0308 	orr.w	r3, r3, #8
 800bd0c:	71fb      	strb	r3, [r7, #7]
 800bd0e:	e010      	b.n	800bd32 <f_open+0xfa>
         }
         else                                                                           /* Any object is already existing */
         {
            if (dj.obj.attr & (AM_RDO | AM_DIR))                        /* Cannot overwrite it (R/O or DIR) */
 800bd10:	7ebb      	ldrb	r3, [r7, #26]
 800bd12:	f003 0311 	and.w	r3, r3, #17
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <f_open+0xea>
            {
               res = FR_DENIED;
 800bd1a:	2307      	movs	r3, #7
 800bd1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd20:	e007      	b.n	800bd32 <f_open+0xfa>
            }
            else
            {
               if (mode & FA_CREATE_NEW) res = FR_EXIST;                                /* Cannot create as new file */
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	f003 0304 	and.w	r3, r3, #4
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <f_open+0xfa>
 800bd2c:	2308      	movs	r3, #8
 800bd2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

            }
         }

         if (res == FR_OK && (mode & FA_CREATE_ALWAYS))                         /* Truncate it if overwrite mode */
 800bd32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d168      	bne.n	800be0c <f_open+0x1d4>
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	f003 0308 	and.w	r3, r3, #8
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d063      	beq.n	800be0c <f_open+0x1d4>
         {
            dw = GET_FATTIME();
 800bd44:	f7fb f942 	bl	8006fcc <get_fattime>
 800bd48:	6538      	str	r0, [r7, #80]	; 0x50
            }
            else
            #endif
            {
               /* Clean directory info */
               st_dword(dj.dir + DIR_CrtTime, dw);                              /* Set created time */
 800bd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4c:	330e      	adds	r3, #14
 800bd4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fe fa27 	bl	800a1a4 <st_dword>
               st_dword(dj.dir + DIR_ModTime, dw);                              /* Set modified time */
 800bd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd58:	3316      	adds	r3, #22
 800bd5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fe fa21 	bl	800a1a4 <st_dword>
               dj.dir[DIR_Attr] = AM_ARC;                                               /* Reset attribute */
 800bd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd64:	330b      	adds	r3, #11
 800bd66:	2220      	movs	r2, #32
 800bd68:	701a      	strb	r2, [r3, #0]
               cl = ld_clust(fs, dj.dir);                                               /* Get cluster chain */
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff f9f0 	bl	800b156 <ld_clust>
 800bd76:	64f8      	str	r0, [r7, #76]	; 0x4c
               st_clust(fs, dj.dir, 0);                                                 /* Reset file allocation info */
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7ff fa08 	bl	800b194 <st_clust>
               st_dword(dj.dir + DIR_FileSize, 0);
 800bd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd86:	331c      	adds	r3, #28
 800bd88:	2100      	movs	r1, #0
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe fa0a 	bl	800a1a4 <st_dword>
               fs->wflag = 1;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	2201      	movs	r2, #1
 800bd94:	70da      	strb	r2, [r3, #3]

               if (cl)                                                                                  /* Remove the cluster chain if exist */
 800bd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d037      	beq.n	800be0c <f_open+0x1d4>
               {
                  dw = fs->winsect;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda0:	653b      	str	r3, [r7, #80]	; 0x50
                  res = remove_chain(&dj.obj, cl, 0);
 800bda2:	f107 0314 	add.w	r3, r7, #20
 800bda6:	2200      	movs	r2, #0
 800bda8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fef8 	bl	800aba0 <remove_chain>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                  if (res == FR_OK)
 800bdb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d126      	bne.n	800be0c <f_open+0x1d4>
                  {
                     res = move_window(fs, dw);
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fe fc48 	bl	800a658 <move_window>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                     fs->last_clst = cl - 1;                                            /* Reuse the cluster hole */
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdd2:	3a01      	subs	r2, #1
 800bdd4:	611a      	str	r2, [r3, #16]
 800bdd6:	e019      	b.n	800be0c <f_open+0x1d4>
            }
         }
      }
      else              /* Open an existing file */
      {
         if (res == FR_OK)                                                      /* Following succeeded */
 800bdd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d115      	bne.n	800be0c <f_open+0x1d4>
         {
            if (dj.obj.attr & AM_DIR)                                   /* It is a directory */
 800bde0:	7ebb      	ldrb	r3, [r7, #26]
 800bde2:	f003 0310 	and.w	r3, r3, #16
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <f_open+0x1ba>
            {
               res = FR_NO_FILE;
 800bdea:	2304      	movs	r3, #4
 800bdec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bdf0:	e00c      	b.n	800be0c <f_open+0x1d4>
            }
            else
            {
               if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO))                            /* R/O violation */
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d007      	beq.n	800be0c <f_open+0x1d4>
 800bdfc:	7ebb      	ldrb	r3, [r7, #26]
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <f_open+0x1d4>
               {
                  res = FR_DENIED;
 800be06:	2307      	movs	r3, #7
 800be08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
               }
            }
         }
      }

      if (res == FR_OK)
 800be0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be10:	2b00      	cmp	r3, #0
 800be12:	d128      	bne.n	800be66 <f_open+0x22e>
      {
         if (mode & FA_CREATE_ALWAYS)                           /* Set file change flag if created or overwritten */
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	f003 0308 	and.w	r3, r3, #8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <f_open+0x1ee>
            mode |= FA_MODIFIED;
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be24:	71fb      	strb	r3, [r7, #7]

         fp->dir_sect = fs->winsect;                                    /* Pointer to the directory entry */
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	625a      	str	r2, [r3, #36]	; 0x24
         fp->dir_ptr = dj.dir;
 800be2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	629a      	str	r2, [r3, #40]	; 0x28
         #if _FS_LOCK != 0
         fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	f023 0301 	bic.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	bf14      	ite	ne
 800be3e:	2301      	movne	r3, #1
 800be40:	2300      	moveq	r3, #0
 800be42:	b2db      	uxtb	r3, r3
 800be44:	461a      	mov	r2, r3
 800be46:	f107 0314 	add.w	r3, r7, #20
 800be4a:	4611      	mov	r1, r2
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe fad1 	bl	800a3f4 <inc_lock>
 800be52:	4602      	mov	r2, r0
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	611a      	str	r2, [r3, #16]
         if (!fp->obj.lockid) res = FR_INT_ERR;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <f_open+0x22e>
 800be60:	2302      	movs	r3, #2
 800be62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
         }
      }

      #endif

      if (res == FR_OK)
 800be66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f040 80a3 	bne.w	800bfb6 <f_open+0x37e>
            fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
         }
         else
         #endif
         {
            fp->obj.sclust = ld_clust(fs, dj.dir);                                                      /* Get object allocation info */
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff f96d 	bl	800b156 <ld_clust>
 800be7c:	4602      	mov	r2, r0
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	609a      	str	r2, [r3, #8]
            fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800be82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be84:	331c      	adds	r3, #28
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe f94e 	bl	800a128 <ld_dword>
 800be8c:	4602      	mov	r2, r0
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	60da      	str	r2, [r3, #12]
         }

         #if _USE_FASTSEEK
         fp->cltbl = 0;                                 /* Disable fast seek mode */
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	62da      	str	r2, [r3, #44]	; 0x2c
         #endif
         fp->obj.fs = fs;                               /* Validate the file object */
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	601a      	str	r2, [r3, #0]
         fp->obj.id = fs->id;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	88da      	ldrh	r2, [r3, #6]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	809a      	strh	r2, [r3, #4]
         fp->flag = mode;                               /* Set file access mode */
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	79fa      	ldrb	r2, [r7, #7]
 800beaa:	751a      	strb	r2, [r3, #20]
         fp->err = 0;                                   /* Clear error flag */
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	755a      	strb	r2, [r3, #21]
         fp->sect = 0;                                  /* Invalidate current data sector */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	621a      	str	r2, [r3, #32]
         fp->fptr = 0;                                  /* Set file pointer top of the file */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	619a      	str	r2, [r3, #24]
         #if !_FS_READONLY
         #if !_FS_TINY
         mem_set(fp->buf, 0, _MAX_SS);                  /* Clear sector buffer */
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3330      	adds	r3, #48	; 0x30
 800bec2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bec6:	2100      	movs	r1, #0
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fe f9b8 	bl	800a23e <mem_set>
         #endif
         if ((mode & FA_SEEKEND) && fp->obj.objsize > 0)                        /* Seek to end of file if FA_OPEN_APPEND is specified */
 800bece:	79fb      	ldrb	r3, [r7, #7]
 800bed0:	f003 0320 	and.w	r3, r3, #32
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d06e      	beq.n	800bfb6 <f_open+0x37e>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d06a      	beq.n	800bfb6 <f_open+0x37e>
         {
            fp->fptr = fp->obj.objsize;                                         /* Offset to seek */
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	68da      	ldr	r2, [r3, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	619a      	str	r2, [r3, #24]
            bcs = (DWORD)fs->csize * SS(fs);                            /* Cluster size in byte */
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	895b      	ldrh	r3, [r3, #10]
 800beec:	461a      	mov	r2, r3
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	899b      	ldrh	r3, [r3, #12]
 800bef2:	fb03 f302 	mul.w	r3, r3, r2
 800bef6:	64bb      	str	r3, [r7, #72]	; 0x48
            clst = fp->obj.sclust;                                              /* Follow the cluster chain */
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	65bb      	str	r3, [r7, #88]	; 0x58
            for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	657b      	str	r3, [r7, #84]	; 0x54
 800bf04:	e016      	b.n	800bf34 <f_open+0x2fc>
               clst = get_fat(&fp->obj, clst);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe fc61 	bl	800a7d2 <get_fat>
 800bf10:	65b8      	str	r0, [r7, #88]	; 0x58
               if (clst <= 1) res = FR_INT_ERR;
 800bf12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d802      	bhi.n	800bf1e <f_open+0x2e6>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

               if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bf1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf24:	d102      	bne.n	800bf2c <f_open+0x2f4>
 800bf26:	2301      	movs	r3, #1
 800bf28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	657b      	str	r3, [r7, #84]	; 0x54
 800bf34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d103      	bne.n	800bf44 <f_open+0x30c>
 800bf3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d8e0      	bhi.n	800bf06 <f_open+0x2ce>
            }
            fp->clust = clst;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf48:	61da      	str	r2, [r3, #28]
            if (res == FR_OK && ofs % SS(fs))                           /* Fill sector buffer if not on the sector boundary */
 800bf4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d131      	bne.n	800bfb6 <f_open+0x37e>
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	899b      	ldrh	r3, [r3, #12]
 800bf56:	461a      	mov	r2, r3
 800bf58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf5e:	fb02 f201 	mul.w	r2, r2, r1
 800bf62:	1a9b      	subs	r3, r3, r2
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d026      	beq.n	800bfb6 <f_open+0x37e>
            {
               if ((sc = clust2sect(fs, clst)) == 0)
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fe fc11 	bl	800a794 <clust2sect>
 800bf72:	6478      	str	r0, [r7, #68]	; 0x44
 800bf74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d103      	bne.n	800bf82 <f_open+0x34a>
               {
                  res = FR_INT_ERR;
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bf80:	e019      	b.n	800bfb6 <f_open+0x37e>
               }
               else
               {
                  fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	899b      	ldrh	r3, [r3, #12]
 800bf86:	461a      	mov	r2, r3
 800bf88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf90:	441a      	add	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	621a      	str	r2, [r3, #32]
                  #if !_FS_TINY
                  if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	7858      	ldrb	r0, [r3, #1]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6a1a      	ldr	r2, [r3, #32]
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f7fe f849 	bl	800a03c <disk_read>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <f_open+0x37e>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      }

      FREE_NAMBUF();
   }

   if (res != FR_OK) fp->obj.fs = 0;            /* Invalidate file object on error */
 800bfb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <f_open+0x38c>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	601a      	str	r2, [r3, #0]

   LEAVE_FF(fs, res);
 800bfc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3760      	adds	r7, #96	; 0x60
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <f_read>:
   FIL* fp,             /* Pointer to the file object */
   void* buff,          /* Pointer to data buffer */
   UINT btr,            /* Number of bytes to read */
   UINT* br             /* Pointer to number of bytes read */
               )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08e      	sub	sp, #56	; 0x38
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]
   FRESULT  res;
   FATFS    *fs;
   DWORD    clst, sect;
   FSIZE_t  remain;
   UINT     rcnt, cc, csect;
   BYTE     *rbuff = (BYTE*)buff;
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	627b      	str	r3, [r7, #36]	; 0x24


   *br = 0;             /* Clear read byte counter */
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	601a      	str	r2, [r3, #0]
   res = validate(&fp->obj, &fs);                               /* Check validity of the file object */
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f107 0214 	add.w	r2, r7, #20
 800bfee:	4611      	mov	r1, r2
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff fda5 	bl	800bb40 <validate>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);            /* Check validity */
 800bffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c000:	2b00      	cmp	r3, #0
 800c002:	d107      	bne.n	800c014 <f_read+0x44>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	7d5b      	ldrb	r3, [r3, #21]
 800c008:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c00c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <f_read+0x4a>
 800c014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c018:	e135      	b.n	800c286 <f_read+0x2b6>

   if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);      /* Check access mode */
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	7d1b      	ldrb	r3, [r3, #20]
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <f_read+0x5a>
 800c026:	2307      	movs	r3, #7
 800c028:	e12d      	b.n	800c286 <f_read+0x2b6>

   remain = fp->obj.objsize - fp->fptr;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	68da      	ldr	r2, [r3, #12]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	623b      	str	r3, [r7, #32]
   if (btr > remain) btr = (UINT)remain;                /* Truncate btr by remaining bytes */
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	f240 811e 	bls.w	800c27c <f_read+0x2ac>
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	607b      	str	r3, [r7, #4]

   for ( ;  btr;                                                                /* Repeat until all data read */
 800c044:	e11a      	b.n	800c27c <f_read+0x2ac>
         rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt)
   {
      if (fp->fptr % SS(fs) == 0)                               /* On the sector boundary? */
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	8992      	ldrh	r2, [r2, #12]
 800c04e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c052:	fb02 f201 	mul.w	r2, r2, r1
 800c056:	1a9b      	subs	r3, r3, r2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f040 80d5 	bne.w	800c208 <f_read+0x238>
      {
         csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));                   /* Sector offset in the cluster */
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	8992      	ldrh	r2, [r2, #12]
 800c066:	fbb3 f3f2 	udiv	r3, r3, r2
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	8952      	ldrh	r2, [r2, #10]
 800c06e:	3a01      	subs	r2, #1
 800c070:	4013      	ands	r3, r2
 800c072:	61fb      	str	r3, [r7, #28]
         if (csect == 0)                                                        /* On the cluster boundary? */
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d12f      	bne.n	800c0da <f_read+0x10a>
         {
            if (fp->fptr == 0)                                          /* On the top of the file? */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d103      	bne.n	800c08a <f_read+0xba>
            {
               clst = fp->obj.sclust;                                   /* Follow cluster chain from the origin */
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	633b      	str	r3, [r7, #48]	; 0x30
 800c088:	e013      	b.n	800c0b2 <f_read+0xe2>
            }
            else                                                                        /* Middle or end of the file */
            {
               #if _USE_FASTSEEK
               if (fp->cltbl)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d007      	beq.n	800c0a2 <f_read+0xd2>
               {
                  clst = clmt_clust(fp, fp->fptr);                                      /* Get cluster# from the CLMT */
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	4619      	mov	r1, r3
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f7fe fe7e 	bl	800ad9a <clmt_clust>
 800c09e:	6338      	str	r0, [r7, #48]	; 0x30
 800c0a0:	e007      	b.n	800c0b2 <f_read+0xe2>
               }
               else
               #endif
               {
                  clst = get_fat(&fp->obj, fp->clust);                                  /* Follow cluster chain on the FAT */
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	f7fe fb91 	bl	800a7d2 <get_fat>
 800c0b0:	6338      	str	r0, [r7, #48]	; 0x30
               }
            }

            if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d804      	bhi.n	800c0c2 <f_read+0xf2>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	755a      	strb	r2, [r3, #21]
 800c0be:	2302      	movs	r3, #2
 800c0c0:	e0e1      	b.n	800c286 <f_read+0x2b6>

            if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c8:	d104      	bne.n	800c0d4 <f_read+0x104>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	755a      	strb	r2, [r3, #21]
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e0d8      	b.n	800c286 <f_read+0x2b6>

            fp->clust = clst;                                                   /* Update current cluster */
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0d8:	61da      	str	r2, [r3, #28]
         }

         sect = clust2sect(fs, fp->clust);                      /* Get current sector */
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	69db      	ldr	r3, [r3, #28]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	f7fe fb56 	bl	800a794 <clust2sect>
 800c0e8:	61b8      	str	r0, [r7, #24]
         if (!sect) ABORT(fs, FR_INT_ERR);
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d104      	bne.n	800c0fa <f_read+0x12a>
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	755a      	strb	r2, [r3, #21]
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	e0c5      	b.n	800c286 <f_read+0x2b6>

         sect += csect;
 800c0fa:	69ba      	ldr	r2, [r7, #24]
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	4413      	add	r3, r2
 800c100:	61bb      	str	r3, [r7, #24]
         cc = btr / SS(fs);                                                     /* When remaining bytes >= sector size, */
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	899b      	ldrh	r3, [r3, #12]
 800c106:	461a      	mov	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28
         if (cc)                                                                        /* Read maximum contiguous sectors directly */
 800c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c112:	2b00      	cmp	r3, #0
 800c114:	d041      	beq.n	800c19a <f_read+0x1ca>
         {
            if (csect + cc > fs->csize)                         /* Clip at cluster boundary */
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11a:	4413      	add	r3, r2
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	8952      	ldrh	r2, [r2, #10]
 800c120:	4293      	cmp	r3, r2
 800c122:	d905      	bls.n	800c130 <f_read+0x160>
            {
               cc = fs->csize - csect;
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	895b      	ldrh	r3, [r3, #10]
 800c128:	461a      	mov	r2, r3
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	7858      	ldrb	r0, [r3, #1]
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c13a:	f7fd ff7f 	bl	800a03c <disk_read>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d004      	beq.n	800c14e <f_read+0x17e>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2201      	movs	r2, #1
 800c148:	755a      	strb	r2, [r3, #21]
 800c14a:	2301      	movs	r3, #1
 800c14c:	e09b      	b.n	800c286 <f_read+0x2b6>
            {
               mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
            }

            #else
            if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	7d1b      	ldrb	r3, [r3, #20]
 800c152:	b25b      	sxtb	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	da18      	bge.n	800c18a <f_read+0x1ba>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6a1a      	ldr	r2, [r3, #32]
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c162:	429a      	cmp	r2, r3
 800c164:	d911      	bls.n	800c18a <f_read+0x1ba>
            {
               mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6a1a      	ldr	r2, [r3, #32]
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	8992      	ldrh	r2, [r2, #12]
 800c172:	fb02 f303 	mul.w	r3, r2, r3
 800c176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c178:	18d0      	adds	r0, r2, r3
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	899b      	ldrh	r3, [r3, #12]
 800c184:	461a      	mov	r2, r3
 800c186:	f7fe f839 	bl	800a1fc <mem_cpy>
            }

            #endif
            #endif
            rcnt = SS(fs) * cc;                                                 /* Number of bytes transferred */
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	899b      	ldrh	r3, [r3, #12]
 800c18e:	461a      	mov	r2, r3
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	fb02 f303 	mul.w	r3, r2, r3
 800c196:	62fb      	str	r3, [r7, #44]	; 0x2c
            continue;
 800c198:	e05c      	b.n	800c254 <f_read+0x284>
         }

         #if !_FS_TINY
         if (fp->sect != sect)                                  /* Load data sector if not in cache */
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	69ba      	ldr	r2, [r7, #24]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d02e      	beq.n	800c202 <f_read+0x232>
         {
            #if !_FS_READONLY
            if (fp->flag & FA_DIRTY)                                    /* Write-back dirty sector cache */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	7d1b      	ldrb	r3, [r3, #20]
 800c1a8:	b25b      	sxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	da18      	bge.n	800c1e0 <f_read+0x210>
            {
               if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	7858      	ldrb	r0, [r3, #1]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6a1a      	ldr	r2, [r3, #32]
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f7fd ff5d 	bl	800a07c <disk_write>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <f_read+0x202>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	755a      	strb	r2, [r3, #21]
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e059      	b.n	800c286 <f_read+0x2b6>

               fp->flag &= (BYTE) ~FA_DIRTY;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	7d1b      	ldrb	r3, [r3, #20]
 800c1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	751a      	strb	r2, [r3, #20]
            }

            #endif
            if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);                         /* Fill sector cache */
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	7858      	ldrb	r0, [r3, #1]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	69ba      	ldr	r2, [r7, #24]
 800c1ee:	f7fd ff25 	bl	800a03c <disk_read>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d004      	beq.n	800c202 <f_read+0x232>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	755a      	strb	r2, [r3, #21]
 800c1fe:	2301      	movs	r3, #1
 800c200:	e041      	b.n	800c286 <f_read+0x2b6>

         }

         #endif
         fp->sect = sect;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	69ba      	ldr	r2, [r7, #24]
 800c206:	621a      	str	r2, [r3, #32]
      }

      rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);                  /* Number of bytes left in the sector */
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	899b      	ldrh	r3, [r3, #12]
 800c20c:	4618      	mov	r0, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	699b      	ldr	r3, [r3, #24]
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	8992      	ldrh	r2, [r2, #12]
 800c216:	fbb3 f1f2 	udiv	r1, r3, r2
 800c21a:	fb02 f201 	mul.w	r2, r2, r1
 800c21e:	1a9b      	subs	r3, r3, r2
 800c220:	1ac3      	subs	r3, r0, r3
 800c222:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (rcnt > btr) rcnt = btr;                                               /* Clip it by btr if needed */
 800c224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d901      	bls.n	800c230 <f_read+0x260>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	62fb      	str	r3, [r7, #44]	; 0x2c
      #if _FS_TINY
      if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);           /* Move sector window */

      mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);                /* Extract partial sector */
      #else
      mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);                /* Extract partial sector */
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	699b      	ldr	r3, [r3, #24]
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	8992      	ldrh	r2, [r2, #12]
 800c23e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c242:	fb02 f200 	mul.w	r2, r2, r0
 800c246:	1a9b      	subs	r3, r3, r2
 800c248:	440b      	add	r3, r1
 800c24a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c24c:	4619      	mov	r1, r3
 800c24e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c250:	f7fd ffd4 	bl	800a1fc <mem_cpy>
         rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt)
 800c254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c258:	4413      	add	r3, r2
 800c25a:	627b      	str	r3, [r7, #36]	; 0x24
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	699a      	ldr	r2, [r3, #24]
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	441a      	add	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	619a      	str	r2, [r3, #24]
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	441a      	add	r2, r3
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	607b      	str	r3, [r7, #4]
   for ( ;  btr;                                                                /* Repeat until all data read */
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f47f aee1 	bne.w	800c046 <f_read+0x76>
      #endif
   }

   LEAVE_FF(fs, FR_OK);
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3738      	adds	r7, #56	; 0x38
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
   FIL* fp              /* Pointer to the file object */
               )
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b086      	sub	sp, #24
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
   #if _FS_EXFAT
   DIR  dj;
   DEF_NAMBUF
   #endif

   res = validate(&fp->obj, &fs);       /* Check validity of the file object */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f107 0208 	add.w	r2, r7, #8
 800c29c:	4611      	mov	r1, r2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff fc4e 	bl	800bb40 <validate>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	75fb      	strb	r3, [r7, #23]
   if (res == FR_OK)
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d168      	bne.n	800c380 <f_sync+0xf2>
   {
      if (fp->flag & FA_MODIFIED)               /* Is there any change to the file? */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	7d1b      	ldrb	r3, [r3, #20]
 800c2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d062      	beq.n	800c380 <f_sync+0xf2>
      {
         #if !_FS_TINY
         if (fp->flag & FA_DIRTY)                       /* Write-back cached data if needed */
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	7d1b      	ldrb	r3, [r3, #20]
 800c2be:	b25b      	sxtb	r3, r3
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	da15      	bge.n	800c2f0 <f_sync+0x62>
         {
            if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	7858      	ldrb	r0, [r3, #1]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a1a      	ldr	r2, [r3, #32]
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	f7fd fed2 	bl	800a07c <disk_write>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <f_sync+0x54>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e04f      	b.n	800c382 <f_sync+0xf4>

            fp->flag &= (BYTE) ~FA_DIRTY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	7d1b      	ldrb	r3, [r3, #20]
 800c2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	751a      	strb	r2, [r3, #20]
         }

         #endif
         /* Update the directory entry */
         tm = GET_FATTIME();                                            /* Modified time */
 800c2f0:	f7fa fe6c 	bl	8006fcc <get_fattime>
 800c2f4:	6138      	str	r0, [r7, #16]
            }
         }
         else
         #endif
         {
            res = move_window(fs, fp->dir_sect);
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4610      	mov	r0, r2
 800c300:	f7fe f9aa 	bl	800a658 <move_window>
 800c304:	4603      	mov	r3, r0
 800c306:	75fb      	strb	r3, [r7, #23]
            if (res == FR_OK)
 800c308:	7dfb      	ldrb	r3, [r7, #23]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d138      	bne.n	800c380 <f_sync+0xf2>
            {
               dir = fp->dir_ptr;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c312:	60fb      	str	r3, [r7, #12]
               dir[DIR_Attr] |= AM_ARC;                                                                         /* Set archive bit */
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	330b      	adds	r3, #11
 800c318:	781a      	ldrb	r2, [r3, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	330b      	adds	r3, #11
 800c31e:	f042 0220 	orr.w	r2, r2, #32
 800c322:	b2d2      	uxtb	r2, r2
 800c324:	701a      	strb	r2, [r3, #0]
               st_clust(fp->obj.fs, dir, fp->obj.sclust);                                       /* Update file allocation info  */
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6818      	ldr	r0, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	461a      	mov	r2, r3
 800c330:	68f9      	ldr	r1, [r7, #12]
 800c332:	f7fe ff2f 	bl	800b194 <st_clust>
               st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);                            /* Update file size */
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f103 021c 	add.w	r2, r3, #28
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	4619      	mov	r1, r3
 800c342:	4610      	mov	r0, r2
 800c344:	f7fd ff2e 	bl	800a1a4 <st_dword>
               st_dword(dir + DIR_ModTime, tm);                                                         /* Update modified time */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3316      	adds	r3, #22
 800c34c:	6939      	ldr	r1, [r7, #16]
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fd ff28 	bl	800a1a4 <st_dword>
               st_word(dir + DIR_LstAccDate, 0);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3312      	adds	r3, #18
 800c358:	2100      	movs	r1, #0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fd ff07 	bl	800a16e <st_word>
               fs->wflag = 1;
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2201      	movs	r2, #1
 800c364:	70da      	strb	r2, [r3, #3]
               res = sync_fs(fs);                                                               /* Restore it to the directory */
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe f9a3 	bl	800a6b4 <sync_fs>
 800c36e:	4603      	mov	r3, r0
 800c370:	75fb      	strb	r3, [r7, #23]
               fp->flag &= (BYTE) ~FA_MODIFIED;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	7d1b      	ldrb	r3, [r3, #20]
 800c376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c37a:	b2da      	uxtb	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	751a      	strb	r2, [r3, #20]
            }
         }
      }
   }

   LEAVE_FF(fs, res);
 800c380:	7dfb      	ldrb	r3, [r7, #23]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
   FIL* fp              /* Pointer to the file object to be closed */
                )
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
   FRESULT  res;
   FATFS    *fs;


   #if !_FS_READONLY
   res = f_sync(fp);                                            /* Flush cached data */
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff ff7b 	bl	800c28e <f_sync>
 800c398:	4603      	mov	r3, r0
 800c39a:	73fb      	strb	r3, [r7, #15]
   if (res == FR_OK)
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d118      	bne.n	800c3d4 <f_close+0x4a>
   #endif
   {
      res = validate(&fp->obj, &fs);            /* Lock volume */
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f107 0208 	add.w	r2, r7, #8
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fbc8 	bl	800bb40 <validate>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	73fb      	strb	r3, [r7, #15]
      if (res == FR_OK)
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10c      	bne.n	800c3d4 <f_close+0x4a>
      {
         #if _FS_LOCK != 0
         res = dec_lock(fp->obj.lockid);                /* Decrement file open counter */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe f8a6 	bl	800a510 <dec_lock>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
         if (res == FR_OK)
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d102      	bne.n	800c3d4 <f_close+0x4a>
         #endif
         {
            fp->obj.fs = 0;                                     /* Invalidate file object */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	601a      	str	r2, [r3, #0]
         unlock_fs(fs, FR_OK);                          /* Unlock volume */
         #endif
      }
   }

   return res;
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <f_lseek>:

FRESULT f_lseek (
   FIL* fp,                     /* Pointer to the file object */
   FSIZE_t ofs                  /* File pointer from top of file */
                )
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b090      	sub	sp, #64	; 0x40
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	6039      	str	r1, [r7, #0]

   #if _USE_FASTSEEK
   DWORD  cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
   #endif

   res = validate(&fp->obj, &fs);               /* Check validity of the file object */
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f107 0208 	add.w	r2, r7, #8
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7ff fba5 	bl	800bb40 <validate>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
   if (res == FR_OK) res = (FRESULT)fp->err;
 800c3fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <f_lseek+0x2e>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7d5b      	ldrb	r3, [r3, #21]
 800c408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
   {
      res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);            /* Fill last fragment on the FAT if needed */
   }

   #endif
   if (res != FR_OK) LEAVE_FF(fs, res);
 800c40c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <f_lseek+0x3c>
 800c414:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c418:	e201      	b.n	800c81e <f_lseek+0x440>

   #if _USE_FASTSEEK
   if (fp->cltbl)               /* Fast seek */
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 80d9 	beq.w	800c5d6 <f_lseek+0x1f8>
   {
      if (ofs == CREATE_LINKMAP)                /* Create CLMT */
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42a:	d15a      	bne.n	800c4e2 <f_lseek+0x104>
      {
         tbl = fp->cltbl;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
         tlen = *tbl++; ulen = 2;                       /* Given table size and required table size */
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	1d1a      	adds	r2, r3, #4
 800c436:	627a      	str	r2, [r7, #36]	; 0x24
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	2302      	movs	r3, #2
 800c43e:	62bb      	str	r3, [r7, #40]	; 0x28
         cl = fp->obj.sclust;                           /* Origin of the chain */
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	633b      	str	r3, [r7, #48]	; 0x30
         if (cl)
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d03a      	beq.n	800c4c2 <f_lseek+0xe4>
         {
            do {
               /* Get a fragment */
               tcl = cl; ncl = 0; ulen += 2;                            /* Top, length and used items */
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	613b      	str	r3, [r7, #16]
 800c450:	2300      	movs	r3, #0
 800c452:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	3302      	adds	r3, #2
 800c458:	62bb      	str	r3, [r7, #40]	; 0x28
               do {
                  pcl = cl; ncl++;
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	60fb      	str	r3, [r7, #12]
 800c45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c460:	3301      	adds	r3, #1
 800c462:	62fb      	str	r3, [r7, #44]	; 0x2c
                  cl = get_fat(&fp->obj, cl);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fe f9b2 	bl	800a7d2 <get_fat>
 800c46e:	6338      	str	r0, [r7, #48]	; 0x30
                  if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	2b01      	cmp	r3, #1
 800c474:	d804      	bhi.n	800c480 <f_lseek+0xa2>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2202      	movs	r2, #2
 800c47a:	755a      	strb	r2, [r3, #21]
 800c47c:	2302      	movs	r3, #2
 800c47e:	e1ce      	b.n	800c81e <f_lseek+0x440>

                  if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c486:	d104      	bne.n	800c492 <f_lseek+0xb4>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	755a      	strb	r2, [r3, #21]
 800c48e:	2301      	movs	r3, #1
 800c490:	e1c5      	b.n	800c81e <f_lseek+0x440>
               } while (cl == pcl + 1);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c498:	429a      	cmp	r2, r3
 800c49a:	d0de      	beq.n	800c45a <f_lseek+0x7c>
               if (ulen <= tlen)                                        /* Store the length and top of the fragment */
 800c49c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d809      	bhi.n	800c4b8 <f_lseek+0xda>
               {
                  *tbl++ = ncl; *tbl++ = tcl;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	1d1a      	adds	r2, r3, #4
 800c4a8:	627a      	str	r2, [r7, #36]	; 0x24
 800c4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	1d1a      	adds	r2, r3, #4
 800c4b2:	627a      	str	r2, [r7, #36]	; 0x24
 800c4b4:	693a      	ldr	r2, [r7, #16]
 800c4b6:	601a      	str	r2, [r3, #0]
               }
            } while (cl < fs->n_fatent);                        /* Repeat until end of chain */
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d3c4      	bcc.n	800c44c <f_lseek+0x6e>
         }

         *fp->cltbl = ulen;                     /* Number of items used */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4c8:	601a      	str	r2, [r3, #0]
         if (ulen <= tlen)
 800c4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d803      	bhi.n	800c4da <f_lseek+0xfc>
         {
            *tbl = 0;                                   /* Terminate table */
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]
 800c4d8:	e19f      	b.n	800c81a <f_lseek+0x43c>
         }
         else
         {
            res = FR_NOT_ENOUGH_CORE;                           /* Given table size is smaller than required */
 800c4da:	2311      	movs	r3, #17
 800c4dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c4e0:	e19b      	b.n	800c81a <f_lseek+0x43c>
         }
      }
      else                                                              /* Fast seek */
      {
         if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;                      /* Clip offset at the file size */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d902      	bls.n	800c4f2 <f_lseek+0x114>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	603b      	str	r3, [r7, #0]

         fp->fptr = ofs;                                        /* Set file pointer */
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	683a      	ldr	r2, [r7, #0]
 800c4f6:	619a      	str	r2, [r3, #24]
         if (ofs)
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 818d 	beq.w	800c81a <f_lseek+0x43c>
         {
            fp->clust = clmt_clust(fp, ofs - 1);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	3b01      	subs	r3, #1
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7fe fc47 	bl	800ad9a <clmt_clust>
 800c50c:	4602      	mov	r2, r0
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	61da      	str	r2, [r3, #28]
            dsc = clust2sect(fs, fp->clust);
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	4619      	mov	r1, r3
 800c51a:	4610      	mov	r0, r2
 800c51c:	f7fe f93a 	bl	800a794 <clust2sect>
 800c520:	61b8      	str	r0, [r7, #24]
            if (!dsc) ABORT(fs, FR_INT_ERR);
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d104      	bne.n	800c532 <f_lseek+0x154>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	755a      	strb	r2, [r3, #21]
 800c52e:	2302      	movs	r3, #2
 800c530:	e175      	b.n	800c81e <f_lseek+0x440>

            dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	3b01      	subs	r3, #1
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	8992      	ldrh	r2, [r2, #12]
 800c53a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	8952      	ldrh	r2, [r2, #10]
 800c542:	3a01      	subs	r2, #1
 800c544:	4013      	ands	r3, r2
 800c546:	69ba      	ldr	r2, [r7, #24]
 800c548:	4413      	add	r3, r2
 800c54a:	61bb      	str	r3, [r7, #24]
            if (fp->fptr % SS(fs) && dsc != fp->sect)                           /* Refill sector cache if needed */
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	8992      	ldrh	r2, [r2, #12]
 800c554:	fbb3 f1f2 	udiv	r1, r3, r2
 800c558:	fb02 f201 	mul.w	r2, r2, r1
 800c55c:	1a9b      	subs	r3, r3, r2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f000 815b 	beq.w	800c81a <f_lseek+0x43c>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a1b      	ldr	r3, [r3, #32]
 800c568:	69ba      	ldr	r2, [r7, #24]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	f000 8155 	beq.w	800c81a <f_lseek+0x43c>
            {
               #if !_FS_TINY
               #if !_FS_READONLY
               if (fp->flag & FA_DIRTY)                                         /* Write-back dirty sector cache */
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	7d1b      	ldrb	r3, [r3, #20]
 800c574:	b25b      	sxtb	r3, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	da18      	bge.n	800c5ac <f_lseek+0x1ce>
               {
                  if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	7858      	ldrb	r0, [r3, #1]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6a1a      	ldr	r2, [r3, #32]
 800c588:	2301      	movs	r3, #1
 800c58a:	f7fd fd77 	bl	800a07c <disk_write>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d004      	beq.n	800c59e <f_lseek+0x1c0>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	755a      	strb	r2, [r3, #21]
 800c59a:	2301      	movs	r3, #1
 800c59c:	e13f      	b.n	800c81e <f_lseek+0x440>

                  fp->flag &= (BYTE) ~FA_DIRTY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	7d1b      	ldrb	r3, [r3, #20]
 800c5a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	751a      	strb	r2, [r3, #20]
               }

               #endif
               if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);                               /* Load current sector */
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	7858      	ldrb	r0, [r3, #1]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	69ba      	ldr	r2, [r7, #24]
 800c5ba:	f7fd fd3f 	bl	800a03c <disk_read>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d004      	beq.n	800c5ce <f_lseek+0x1f0>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	755a      	strb	r2, [r3, #21]
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e127      	b.n	800c81e <f_lseek+0x440>

               #endif
               fp->sect = dsc;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	69ba      	ldr	r2, [r7, #24]
 800c5d2:	621a      	str	r2, [r3, #32]
 800c5d4:	e121      	b.n	800c81a <f_lseek+0x43c>
   {
      #if _FS_EXFAT
      if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;              /* Clip at 4GiB-1 if at FATxx */

      #endif
      if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE)))                    /* In read-only mode, clip offset with the file size */
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d908      	bls.n	800c5f2 <f_lseek+0x214>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7d1b      	ldrb	r3, [r3, #20]
 800c5e4:	f003 0302 	and.w	r3, r3, #2
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d102      	bne.n	800c5f2 <f_lseek+0x214>
      {
         ofs = fp->obj.objsize;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	603b      	str	r3, [r7, #0]
      }

      ifptr = fp->fptr;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	699b      	ldr	r3, [r3, #24]
 800c5f6:	623b      	str	r3, [r7, #32]
      fp->fptr = nsect = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c600:	619a      	str	r2, [r3, #24]
      if (ofs)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 80b5 	beq.w	800c774 <f_lseek+0x396>
      {
         bcs = (DWORD)fs->csize * SS(fs);                       /* Cluster size (byte) */
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	895b      	ldrh	r3, [r3, #10]
 800c60e:	461a      	mov	r2, r3
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	899b      	ldrh	r3, [r3, #12]
 800c614:	fb03 f302 	mul.w	r3, r3, r2
 800c618:	61fb      	str	r3, [r7, #28]
         if (ifptr > 0 &&
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01b      	beq.n	800c658 <f_lseek+0x27a>
             (ofs - 1) / bcs >= (ifptr - 1) / bcs)                      /* When seek to same or following cluster, */
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	1e5a      	subs	r2, r3, #1
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	fbb2 f2f3 	udiv	r2, r2, r3
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	1e59      	subs	r1, r3, #1
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	fbb1 f3f3 	udiv	r3, r1, r3
         if (ifptr > 0 &&
 800c634:	429a      	cmp	r2, r3
 800c636:	d30f      	bcc.n	800c658 <f_lseek+0x27a>
         {
            fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);                       /* start from the current cluster */
 800c638:	6a3b      	ldr	r3, [r7, #32]
 800c63a:	1e5a      	subs	r2, r3, #1
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	425b      	negs	r3, r3
 800c640:	401a      	ands	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	619a      	str	r2, [r3, #24]
            ofs -= fp->fptr;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	603b      	str	r3, [r7, #0]
            clst = fp->clust;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	63bb      	str	r3, [r7, #56]	; 0x38
 800c656:	e022      	b.n	800c69e <f_lseek+0x2c0>
         }
         else                                                                                           /* When seek to back cluster, */
         {
            clst = fp->obj.sclust;                                                      /* start from the first cluster */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	63bb      	str	r3, [r7, #56]	; 0x38
            #if !_FS_READONLY
            if (clst == 0)                                                                      /* If no cluster chain, create a new chain */
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	2b00      	cmp	r3, #0
 800c662:	d119      	bne.n	800c698 <f_lseek+0x2ba>
            {
               clst = create_chain(&fp->obj, 0);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2100      	movs	r1, #0
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fe fafe 	bl	800ac6a <create_chain>
 800c66e:	63b8      	str	r0, [r7, #56]	; 0x38
               if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c672:	2b01      	cmp	r3, #1
 800c674:	d104      	bne.n	800c680 <f_lseek+0x2a2>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2202      	movs	r2, #2
 800c67a:	755a      	strb	r2, [r3, #21]
 800c67c:	2302      	movs	r3, #2
 800c67e:	e0ce      	b.n	800c81e <f_lseek+0x440>

               if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c686:	d104      	bne.n	800c692 <f_lseek+0x2b4>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	755a      	strb	r2, [r3, #21]
 800c68e:	2301      	movs	r3, #1
 800c690:	e0c5      	b.n	800c81e <f_lseek+0x440>

               fp->obj.sclust = clst;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c696:	609a      	str	r2, [r3, #8]
            }

            #endif
            fp->clust = clst;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c69c:	61da      	str	r2, [r3, #28]
         }

         if (clst != 0)
 800c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d067      	beq.n	800c774 <f_lseek+0x396>
         {
            while (ofs > bcs) {                                                                 /* Cluster following loop */
 800c6a4:	e03a      	b.n	800c71c <f_lseek+0x33e>
               ofs -= bcs; fp->fptr += bcs;
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	603b      	str	r3, [r7, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699a      	ldr	r2, [r3, #24]
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	441a      	add	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	619a      	str	r2, [r3, #24]
               #if !_FS_READONLY
               if (fp->flag & FA_WRITE)                                                 /* Check if in write mode or not */
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	7d1b      	ldrb	r3, [r3, #20]
 800c6be:	f003 0302 	and.w	r3, r3, #2
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00b      	beq.n	800c6de <f_lseek+0x300>
                  {
                     fp->obj.objsize = fp->fptr;
                     fp->flag |= FA_MODIFIED;
                  }

                  clst = create_chain(&fp->obj, clst);                                  /* Follow chain with forceed stretch */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe facd 	bl	800ac6a <create_chain>
 800c6d0:	63b8      	str	r0, [r7, #56]	; 0x38
                  if (clst == 0)                                                                /* Clip file size in case of disk full */
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d108      	bne.n	800c6ea <f_lseek+0x30c>
                  {
                     ofs = 0; break;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	603b      	str	r3, [r7, #0]
 800c6dc:	e022      	b.n	800c724 <f_lseek+0x346>
                  }
               }
               else
               #endif
               {
                  clst = get_fat(&fp->obj, clst);                               /* Follow cluster chain if not in write mode */
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe f875 	bl	800a7d2 <get_fat>
 800c6e8:	63b8      	str	r0, [r7, #56]	; 0x38
               }

               if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f0:	d104      	bne.n	800c6fc <f_lseek+0x31e>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	755a      	strb	r2, [r3, #21]
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e090      	b.n	800c81e <f_lseek+0x440>

               if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d904      	bls.n	800c70c <f_lseek+0x32e>
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c708:	429a      	cmp	r2, r3
 800c70a:	d304      	bcc.n	800c716 <f_lseek+0x338>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2202      	movs	r2, #2
 800c710:	755a      	strb	r2, [r3, #21]
 800c712:	2302      	movs	r3, #2
 800c714:	e083      	b.n	800c81e <f_lseek+0x440>

               fp->clust = clst;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c71a:	61da      	str	r2, [r3, #28]
            while (ofs > bcs) {                                                                 /* Cluster following loop */
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	429a      	cmp	r2, r3
 800c722:	d8c0      	bhi.n	800c6a6 <f_lseek+0x2c8>
            }
            fp->fptr += ofs;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	699a      	ldr	r2, [r3, #24]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	441a      	add	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	619a      	str	r2, [r3, #24]
            if (ofs % SS(fs))
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	899b      	ldrh	r3, [r3, #12]
 800c734:	461a      	mov	r2, r3
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	fbb3 f1f2 	udiv	r1, r3, r2
 800c73c:	fb02 f201 	mul.w	r2, r2, r1
 800c740:	1a9b      	subs	r3, r3, r2
 800c742:	2b00      	cmp	r3, #0
 800c744:	d016      	beq.n	800c774 <f_lseek+0x396>
            {
               nsect = clust2sect(fs, clst);                            /* Current sector */
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fe f822 	bl	800a794 <clust2sect>
 800c750:	6378      	str	r0, [r7, #52]	; 0x34
               if (!nsect) ABORT(fs, FR_INT_ERR);
 800c752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c754:	2b00      	cmp	r3, #0
 800c756:	d104      	bne.n	800c762 <f_lseek+0x384>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2202      	movs	r2, #2
 800c75c:	755a      	strb	r2, [r3, #21]
 800c75e:	2302      	movs	r3, #2
 800c760:	e05d      	b.n	800c81e <f_lseek+0x440>

               nsect += (DWORD)(ofs / SS(fs));
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	899b      	ldrh	r3, [r3, #12]
 800c766:	461a      	mov	r2, r3
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c76e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c770:	4413      	add	r3, r2
 800c772:	637b      	str	r3, [r7, #52]	; 0x34
            }
         }
      }

      if (!_FS_READONLY && fp->fptr > fp->obj.objsize)                          /* Set file change flag if the file size is extended */
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	699a      	ldr	r2, [r3, #24]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d90a      	bls.n	800c796 <f_lseek+0x3b8>
      {
         fp->obj.objsize = fp->fptr;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	699a      	ldr	r2, [r3, #24]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	60da      	str	r2, [r3, #12]
         fp->flag |= FA_MODIFIED;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	7d1b      	ldrb	r3, [r3, #20]
 800c78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c790:	b2da      	uxtb	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	751a      	strb	r2, [r3, #20]
      }

      if (fp->fptr % SS(fs) && nsect != fp->sect)               /* Fill sector cache if needed */
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	699b      	ldr	r3, [r3, #24]
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	8992      	ldrh	r2, [r2, #12]
 800c79e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7a2:	fb02 f201 	mul.w	r2, r2, r1
 800c7a6:	1a9b      	subs	r3, r3, r2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d036      	beq.n	800c81a <f_lseek+0x43c>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d031      	beq.n	800c81a <f_lseek+0x43c>
      {
         #if !_FS_TINY
         #if !_FS_READONLY
         if (fp->flag & FA_DIRTY)                                       /* Write-back dirty sector cache */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	7d1b      	ldrb	r3, [r3, #20]
 800c7ba:	b25b      	sxtb	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	da18      	bge.n	800c7f2 <f_lseek+0x414>
         {
            if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	7858      	ldrb	r0, [r3, #1]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a1a      	ldr	r2, [r3, #32]
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	f7fd fc54 	bl	800a07c <disk_write>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d004      	beq.n	800c7e4 <f_lseek+0x406>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	755a      	strb	r2, [r3, #21]
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e01c      	b.n	800c81e <f_lseek+0x440>

            fp->flag &= (BYTE) ~FA_DIRTY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	7d1b      	ldrb	r3, [r3, #20]
 800c7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	751a      	strb	r2, [r3, #20]
         }

         #endif
         if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);                   /* Fill sector cache */
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	7858      	ldrb	r0, [r3, #1]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c800:	f7fd fc1c 	bl	800a03c <disk_read>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d004      	beq.n	800c814 <f_lseek+0x436>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2201      	movs	r2, #1
 800c80e:	755a      	strb	r2, [r3, #21]
 800c810:	2301      	movs	r3, #1
 800c812:	e004      	b.n	800c81e <f_lseek+0x440>

         #endif
         fp->sect = nsect;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c818:	621a      	str	r2, [r3, #32]
      }
   }

   LEAVE_FF(fs, res);
 800c81a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3740      	adds	r7, #64	; 0x40
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c828:	b480      	push	{r7}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	4613      	mov	r3, r2
 800c834:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c836:	2301      	movs	r3, #1
 800c838:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c83e:	4b1f      	ldr	r3, [pc, #124]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c840:	7a5b      	ldrb	r3, [r3, #9]
 800c842:	b2db      	uxtb	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d131      	bne.n	800c8ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c848:	4b1c      	ldr	r3, [pc, #112]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c84a:	7a5b      	ldrb	r3, [r3, #9]
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	461a      	mov	r2, r3
 800c850:	4b1a      	ldr	r3, [pc, #104]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c852:	2100      	movs	r1, #0
 800c854:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c856:	4b19      	ldr	r3, [pc, #100]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c858:	7a5b      	ldrb	r3, [r3, #9]
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	4a17      	ldr	r2, [pc, #92]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c866:	4b15      	ldr	r3, [pc, #84]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c868:	7a5b      	ldrb	r3, [r3, #9]
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	461a      	mov	r2, r3
 800c86e:	4b13      	ldr	r3, [pc, #76]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c870:	4413      	add	r3, r2
 800c872:	79fa      	ldrb	r2, [r7, #7]
 800c874:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c876:	4b11      	ldr	r3, [pc, #68]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c878:	7a5b      	ldrb	r3, [r3, #9]
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	1c5a      	adds	r2, r3, #1
 800c87e:	b2d1      	uxtb	r1, r2
 800c880:	4a0e      	ldr	r2, [pc, #56]	; (800c8bc <FATFS_LinkDriverEx+0x94>)
 800c882:	7251      	strb	r1, [r2, #9]
 800c884:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c886:	7dbb      	ldrb	r3, [r7, #22]
 800c888:	3330      	adds	r3, #48	; 0x30
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	3301      	adds	r3, #1
 800c894:	223a      	movs	r2, #58	; 0x3a
 800c896:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	3302      	adds	r3, #2
 800c89c:	222f      	movs	r2, #47	; 0x2f
 800c89e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	3303      	adds	r3, #3
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	371c      	adds	r7, #28
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	20001114 	.word	0x20001114

0800c8c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	6839      	ldr	r1, [r7, #0]
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7ff ffaa 	bl	800c828 <FATFS_LinkDriverEx>
 800c8d4:	4603      	mov	r3, r0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
	...

0800c8e0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	4906      	ldr	r1, [pc, #24]	; (800c900 <MX_USB_HOST_Init+0x20>)
 800c8e8:	4806      	ldr	r0, [pc, #24]	; (800c904 <MX_USB_HOST_Init+0x24>)
 800c8ea:	f7fc f80d 	bl	8008908 <USBH_Init>
  {
    //Error_Handler();
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c8ee:	4906      	ldr	r1, [pc, #24]	; (800c908 <MX_USB_HOST_Init+0x28>)
 800c8f0:	4804      	ldr	r0, [pc, #16]	; (800c904 <MX_USB_HOST_Init+0x24>)
 800c8f2:	f7fc f897 	bl	8008a24 <USBH_RegisterClass>
  {
    //Error_Handler();
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c8f6:	4803      	ldr	r0, [pc, #12]	; (800c904 <MX_USB_HOST_Init+0x24>)
 800c8f8:	f7fc f920 	bl	8008b3c <USBH_Start>
    //Error_Handler();
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c8fc:	bf00      	nop
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	0800c921 	.word	0x0800c921
 800c904:	20005338 	.word	0x20005338
 800c908:	20000014 	.word	0x20000014

0800c90c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c910:	4802      	ldr	r0, [pc, #8]	; (800c91c <MX_USB_HOST_Process+0x10>)
 800c912:	f7fc f923 	bl	8008b5c <USBH_Process>
}
 800c916:	bf00      	nop
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20005338 	.word	0x20005338

0800c920 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c92c:	78fb      	ldrb	r3, [r7, #3]
 800c92e:	3b01      	subs	r3, #1
 800c930:	2b04      	cmp	r3, #4
 800c932:	d819      	bhi.n	800c968 <USBH_UserProcess+0x48>
 800c934:	a201      	add	r2, pc, #4	; (adr r2, 800c93c <USBH_UserProcess+0x1c>)
 800c936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c93a:	bf00      	nop
 800c93c:	0800c969 	.word	0x0800c969
 800c940:	0800c959 	.word	0x0800c959
 800c944:	0800c969 	.word	0x0800c969
 800c948:	0800c961 	.word	0x0800c961
 800c94c:	0800c951 	.word	0x0800c951
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
	  USBState = APPLICATION_DISCONNECT;
 800c950:	4b09      	ldr	r3, [pc, #36]	; (800c978 <USBH_UserProcess+0x58>)
 800c952:	2203      	movs	r2, #3
 800c954:	701a      	strb	r2, [r3, #0]
  break;
 800c956:	e008      	b.n	800c96a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
	  USBState = APPLICATION_READY;
 800c958:	4b07      	ldr	r3, [pc, #28]	; (800c978 <USBH_UserProcess+0x58>)
 800c95a:	2202      	movs	r2, #2
 800c95c:	701a      	strb	r2, [r3, #0]
  break;
 800c95e:	e004      	b.n	800c96a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
	  USBState = APPLICATION_START;
 800c960:	4b05      	ldr	r3, [pc, #20]	; (800c978 <USBH_UserProcess+0x58>)
 800c962:	2201      	movs	r2, #1
 800c964:	701a      	strb	r2, [r3, #0]
  break;
 800c966:	e000      	b.n	800c96a <USBH_UserProcess+0x4a>

  default:
  break;
 800c968:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c96a:	bf00      	nop
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	20001120 	.word	0x20001120

0800c97c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	; 0x28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c984:	f107 0314 	add.w	r3, r7, #20
 800c988:	2200      	movs	r2, #0
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	605a      	str	r2, [r3, #4]
 800c98e:	609a      	str	r2, [r3, #8]
 800c990:	60da      	str	r2, [r3, #12]
 800c992:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c99c:	d13a      	bne.n	800ca14 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c99e:	2300      	movs	r3, #0
 800c9a0:	613b      	str	r3, [r7, #16]
 800c9a2:	4b1e      	ldr	r3, [pc, #120]	; (800ca1c <HAL_HCD_MspInit+0xa0>)
 800c9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a6:	4a1d      	ldr	r2, [pc, #116]	; (800ca1c <HAL_HCD_MspInit+0xa0>)
 800c9a8:	f043 0301 	orr.w	r3, r3, #1
 800c9ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c9ae:	4b1b      	ldr	r3, [pc, #108]	; (800ca1c <HAL_HCD_MspInit+0xa0>)
 800c9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	613b      	str	r3, [r7, #16]
 800c9b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c9ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c9be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c9cc:	230a      	movs	r3, #10
 800c9ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9d0:	f107 0314 	add.w	r3, r7, #20
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	4812      	ldr	r0, [pc, #72]	; (800ca20 <HAL_HCD_MspInit+0xa4>)
 800c9d8:	f7f5 f84c 	bl	8001a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <HAL_HCD_MspInit+0xa0>)
 800c9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e0:	4a0e      	ldr	r2, [pc, #56]	; (800ca1c <HAL_HCD_MspInit+0xa0>)
 800c9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e6:	6353      	str	r3, [r2, #52]	; 0x34
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	4b0b      	ldr	r3, [pc, #44]	; (800ca1c <HAL_HCD_MspInit+0xa0>)
 800c9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f0:	4a0a      	ldr	r2, [pc, #40]	; (800ca1c <HAL_HCD_MspInit+0xa0>)
 800c9f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c9f6:	6453      	str	r3, [r2, #68]	; 0x44
 800c9f8:	4b08      	ldr	r3, [pc, #32]	; (800ca1c <HAL_HCD_MspInit+0xa0>)
 800c9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ca04:	2200      	movs	r2, #0
 800ca06:	2100      	movs	r1, #0
 800ca08:	2043      	movs	r0, #67	; 0x43
 800ca0a:	f7f4 fc2a 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ca0e:	2043      	movs	r0, #67	; 0x43
 800ca10:	f7f4 fc43 	bl	800129a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca14:	bf00      	nop
 800ca16:	3728      	adds	r7, #40	; 0x28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	40023800 	.word	0x40023800
 800ca20:	40020000 	.word	0x40020000

0800ca24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fc fc65 	bl	8009302 <USBH_LL_IncTimer>
}
 800ca38:	bf00      	nop
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fc fc9d 	bl	800938e <USBH_LL_Connect>
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fc fca6 	bl	80093bc <USBH_LL_Disconnect>
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
 800ca84:	4613      	mov	r3, r2
 800ca86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fc fc57 	bl	8009356 <USBH_LL_PortEnabled>
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fc fc57 	bl	8009372 <USBH_LL_PortDisabled>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d125      	bne.n	800cb2a <USBH_LL_Init+0x5e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cade:	4a15      	ldr	r2, [pc, #84]	; (800cb34 <USBH_LL_Init+0x68>)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a12      	ldr	r2, [pc, #72]	; (800cb34 <USBH_LL_Init+0x68>)
 800caea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800caee:	4b11      	ldr	r3, [pc, #68]	; (800cb34 <USBH_LL_Init+0x68>)
 800caf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800caf4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800caf6:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <USBH_LL_Init+0x68>)
 800caf8:	2208      	movs	r2, #8
 800cafa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cafc:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <USBH_LL_Init+0x68>)
 800cafe:	2201      	movs	r2, #1
 800cb00:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb02:	4b0c      	ldr	r3, [pc, #48]	; (800cb34 <USBH_LL_Init+0x68>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cb08:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <USBH_LL_Init+0x68>)
 800cb0a:	2202      	movs	r2, #2
 800cb0c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb0e:	4b09      	ldr	r3, [pc, #36]	; (800cb34 <USBH_LL_Init+0x68>)
 800cb10:	2200      	movs	r2, #0
 800cb12:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cb14:	4807      	ldr	r0, [pc, #28]	; (800cb34 <USBH_LL_Init+0x68>)
 800cb16:	f7f5 f984 	bl	8001e22 <HAL_HCD_Init>
  {
    //Error_Handler( );
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cb1a:	4806      	ldr	r0, [pc, #24]	; (800cb34 <USBH_LL_Init+0x68>)
 800cb1c:	f7f5 fd8c 	bl	8002638 <HAL_HCD_GetCurrentFrame>
 800cb20:	4603      	mov	r3, r0
 800cb22:	4619      	mov	r1, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7fc fbdd 	bl	80092e4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	20005710 	.word	0x20005710

0800cb38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7f5 fcfa 	bl	8002548 <HAL_HCD_Start>
 800cb54:	4603      	mov	r3, r0
 800cb56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb58:	7bfb      	ldrb	r3, [r7, #15]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 f986 	bl	800ce6c <USBH_Get_USB_Status>
 800cb60:	4603      	mov	r3, r0
 800cb62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb64:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b084      	sub	sp, #16
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f5 fd02 	bl	800258e <HAL_HCD_Stop>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 f96b 	bl	800ce6c <USBH_Get_USB_Status>
 800cb96:	4603      	mov	r3, r0
 800cb98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cbac:	2301      	movs	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7f5 fd4c 	bl	8002654 <HAL_HCD_GetCurrentSpeed>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d007      	beq.n	800cbd2 <USBH_LL_GetSpeed+0x2e>
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d302      	bcc.n	800cbcc <USBH_LL_GetSpeed+0x28>
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d006      	beq.n	800cbd8 <USBH_LL_GetSpeed+0x34>
 800cbca:	e008      	b.n	800cbde <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd0:	e008      	b.n	800cbe4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd6:	e005      	b.n	800cbe4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cbd8:	2302      	movs	r3, #2
 800cbda:	73fb      	strb	r3, [r7, #15]
    break;
 800cbdc:	e002      	b.n	800cbe4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe2:	bf00      	nop
  }
  return  speed;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b084      	sub	sp, #16
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7f5 fcdf 	bl	80025c8 <HAL_HCD_ResetPort>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 f92b 	bl	800ce6c <USBH_Get_USB_Status>
 800cc16:	4603      	mov	r3, r0
 800cc18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc36:	78fa      	ldrb	r2, [r7, #3]
 800cc38:	4611      	mov	r1, r2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7f5 fce7 	bl	800260e <HAL_HCD_HC_GetXferCount>
 800cc40:	4603      	mov	r3, r0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cc4a:	b590      	push	{r4, r7, lr}
 800cc4c:	b089      	sub	sp, #36	; 0x24
 800cc4e:	af04      	add	r7, sp, #16
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	4608      	mov	r0, r1
 800cc54:	4611      	mov	r1, r2
 800cc56:	461a      	mov	r2, r3
 800cc58:	4603      	mov	r3, r0
 800cc5a:	70fb      	strb	r3, [r7, #3]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	70bb      	strb	r3, [r7, #2]
 800cc60:	4613      	mov	r3, r2
 800cc62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cc72:	787c      	ldrb	r4, [r7, #1]
 800cc74:	78ba      	ldrb	r2, [r7, #2]
 800cc76:	78f9      	ldrb	r1, [r7, #3]
 800cc78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc7a:	9302      	str	r3, [sp, #8]
 800cc7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cc80:	9301      	str	r3, [sp, #4]
 800cc82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	4623      	mov	r3, r4
 800cc8a:	f7f5 f92c 	bl	8001ee6 <HAL_HCD_HC_Init>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 f8e9 	bl	800ce6c <USBH_Get_USB_Status>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd90      	pop	{r4, r7, pc}

0800cca8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccc2:	78fa      	ldrb	r2, [r7, #3]
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f5 f9a5 	bl	8002016 <HAL_HCD_HC_Halt>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 f8ca 	bl	800ce6c <USBH_Get_USB_Status>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cce6:	b590      	push	{r4, r7, lr}
 800cce8:	b089      	sub	sp, #36	; 0x24
 800ccea:	af04      	add	r7, sp, #16
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	4608      	mov	r0, r1
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	70fb      	strb	r3, [r7, #3]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	70bb      	strb	r3, [r7, #2]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd04:	2300      	movs	r3, #0
 800cd06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd0e:	787c      	ldrb	r4, [r7, #1]
 800cd10:	78ba      	ldrb	r2, [r7, #2]
 800cd12:	78f9      	ldrb	r1, [r7, #3]
 800cd14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd18:	9303      	str	r3, [sp, #12]
 800cd1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd1c:	9302      	str	r3, [sp, #8]
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	4623      	mov	r3, r4
 800cd2a:	f7f5 f997 	bl	800205c <HAL_HCD_HC_SubmitRequest>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f000 f899 	bl	800ce6c <USBH_Get_USB_Status>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd90      	pop	{r4, r7, pc}

0800cd48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	460b      	mov	r3, r1
 800cd52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd5a:	78fa      	ldrb	r2, [r7, #3]
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7f5 fc40 	bl	80025e4 <HAL_HCD_HC_GetURBState>
 800cd64:	4603      	mov	r3, r0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	460b      	mov	r3, r1
 800cd78:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800cd7a:	20c8      	movs	r0, #200	; 0xc8
 800cd7c:	f7f3 ff64 	bl	8000c48 <HAL_Delay>
  return USBH_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b085      	sub	sp, #20
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	460b      	mov	r3, r1
 800cd94:	70fb      	strb	r3, [r7, #3]
 800cd96:	4613      	mov	r3, r2
 800cd98:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cda0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cda2:	78fa      	ldrb	r2, [r7, #3]
 800cda4:	68f9      	ldr	r1, [r7, #12]
 800cda6:	4613      	mov	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4413      	add	r3, r2
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	440b      	add	r3, r1
 800cdb0:	333b      	adds	r3, #59	; 0x3b
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00a      	beq.n	800cdce <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cdb8:	78fa      	ldrb	r2, [r7, #3]
 800cdba:	68f9      	ldr	r1, [r7, #12]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	4413      	add	r3, r2
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	440b      	add	r3, r1
 800cdc6:	3350      	adds	r3, #80	; 0x50
 800cdc8:	78ba      	ldrb	r2, [r7, #2]
 800cdca:	701a      	strb	r2, [r3, #0]
 800cdcc:	e009      	b.n	800cde2 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cdce:	78fa      	ldrb	r2, [r7, #3]
 800cdd0:	68f9      	ldr	r1, [r7, #12]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	00db      	lsls	r3, r3, #3
 800cdda:	440b      	add	r3, r1
 800cddc:	3351      	adds	r3, #81	; 0x51
 800cdde:	78ba      	ldrb	r2, [r7, #2]
 800cde0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce06:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ce08:	78fa      	ldrb	r2, [r7, #3]
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	440b      	add	r3, r1
 800ce16:	333b      	adds	r3, #59	; 0x3b
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800ce1e:	78fa      	ldrb	r2, [r7, #3]
 800ce20:	68b9      	ldr	r1, [r7, #8]
 800ce22:	4613      	mov	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	440b      	add	r3, r1
 800ce2c:	3350      	adds	r3, #80	; 0x50
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	73fb      	strb	r3, [r7, #15]
 800ce32:	e009      	b.n	800ce48 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800ce34:	78fa      	ldrb	r2, [r7, #3]
 800ce36:	68b9      	ldr	r1, [r7, #8]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	440b      	add	r3, r1
 800ce42:	3351      	adds	r3, #81	; 0x51
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3714      	adds	r7, #20
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7f3 fef2 	bl	8000c48 <HAL_Delay>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce7a:	79fb      	ldrb	r3, [r7, #7]
 800ce7c:	2b03      	cmp	r3, #3
 800ce7e:	d817      	bhi.n	800ceb0 <USBH_Get_USB_Status+0x44>
 800ce80:	a201      	add	r2, pc, #4	; (adr r2, 800ce88 <USBH_Get_USB_Status+0x1c>)
 800ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce86:	bf00      	nop
 800ce88:	0800ce99 	.word	0x0800ce99
 800ce8c:	0800ce9f 	.word	0x0800ce9f
 800ce90:	0800cea5 	.word	0x0800cea5
 800ce94:	0800ceab 	.word	0x0800ceab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce9c:	e00b      	b.n	800ceb6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ce9e:	2302      	movs	r3, #2
 800cea0:	73fb      	strb	r3, [r7, #15]
    break;
 800cea2:	e008      	b.n	800ceb6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cea4:	2301      	movs	r3, #1
 800cea6:	73fb      	strb	r3, [r7, #15]
    break;
 800cea8:	e005      	b.n	800ceb6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ceaa:	2302      	movs	r3, #2
 800ceac:	73fb      	strb	r3, [r7, #15]
    break;
 800ceae:	e002      	b.n	800ceb6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb4:	bf00      	nop
  }
  return usb_status;
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3714      	adds	r7, #20
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <__libc_init_array>:
 800cec4:	b570      	push	{r4, r5, r6, lr}
 800cec6:	4e0d      	ldr	r6, [pc, #52]	; (800cefc <__libc_init_array+0x38>)
 800cec8:	4c0d      	ldr	r4, [pc, #52]	; (800cf00 <__libc_init_array+0x3c>)
 800ceca:	1ba4      	subs	r4, r4, r6
 800cecc:	10a4      	asrs	r4, r4, #2
 800cece:	2500      	movs	r5, #0
 800ced0:	42a5      	cmp	r5, r4
 800ced2:	d109      	bne.n	800cee8 <__libc_init_array+0x24>
 800ced4:	4e0b      	ldr	r6, [pc, #44]	; (800cf04 <__libc_init_array+0x40>)
 800ced6:	4c0c      	ldr	r4, [pc, #48]	; (800cf08 <__libc_init_array+0x44>)
 800ced8:	f000 f904 	bl	800d0e4 <_init>
 800cedc:	1ba4      	subs	r4, r4, r6
 800cede:	10a4      	asrs	r4, r4, #2
 800cee0:	2500      	movs	r5, #0
 800cee2:	42a5      	cmp	r5, r4
 800cee4:	d105      	bne.n	800cef2 <__libc_init_array+0x2e>
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
 800cee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ceec:	4798      	blx	r3
 800ceee:	3501      	adds	r5, #1
 800cef0:	e7ee      	b.n	800ced0 <__libc_init_array+0xc>
 800cef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cef6:	4798      	blx	r3
 800cef8:	3501      	adds	r5, #1
 800cefa:	e7f2      	b.n	800cee2 <__libc_init_array+0x1e>
 800cefc:	0800d278 	.word	0x0800d278
 800cf00:	0800d278 	.word	0x0800d278
 800cf04:	0800d278 	.word	0x0800d278
 800cf08:	0800d27c 	.word	0x0800d27c

0800cf0c <malloc>:
 800cf0c:	4b02      	ldr	r3, [pc, #8]	; (800cf18 <malloc+0xc>)
 800cf0e:	4601      	mov	r1, r0
 800cf10:	6818      	ldr	r0, [r3, #0]
 800cf12:	f000 b86d 	b.w	800cff0 <_malloc_r>
 800cf16:	bf00      	nop
 800cf18:	20000034 	.word	0x20000034

0800cf1c <free>:
 800cf1c:	4b02      	ldr	r3, [pc, #8]	; (800cf28 <free+0xc>)
 800cf1e:	4601      	mov	r1, r0
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	f000 b817 	b.w	800cf54 <_free_r>
 800cf26:	bf00      	nop
 800cf28:	20000034 	.word	0x20000034

0800cf2c <memcpy>:
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	1e43      	subs	r3, r0, #1
 800cf30:	440a      	add	r2, r1
 800cf32:	4291      	cmp	r1, r2
 800cf34:	d100      	bne.n	800cf38 <memcpy+0xc>
 800cf36:	bd10      	pop	{r4, pc}
 800cf38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf40:	e7f7      	b.n	800cf32 <memcpy+0x6>

0800cf42 <memset>:
 800cf42:	4402      	add	r2, r0
 800cf44:	4603      	mov	r3, r0
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d100      	bne.n	800cf4c <memset+0xa>
 800cf4a:	4770      	bx	lr
 800cf4c:	f803 1b01 	strb.w	r1, [r3], #1
 800cf50:	e7f9      	b.n	800cf46 <memset+0x4>
	...

0800cf54 <_free_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4605      	mov	r5, r0
 800cf58:	2900      	cmp	r1, #0
 800cf5a:	d045      	beq.n	800cfe8 <_free_r+0x94>
 800cf5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf60:	1f0c      	subs	r4, r1, #4
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	bfb8      	it	lt
 800cf66:	18e4      	addlt	r4, r4, r3
 800cf68:	f000 f8ac 	bl	800d0c4 <__malloc_lock>
 800cf6c:	4a1f      	ldr	r2, [pc, #124]	; (800cfec <_free_r+0x98>)
 800cf6e:	6813      	ldr	r3, [r2, #0]
 800cf70:	4610      	mov	r0, r2
 800cf72:	b933      	cbnz	r3, 800cf82 <_free_r+0x2e>
 800cf74:	6063      	str	r3, [r4, #4]
 800cf76:	6014      	str	r4, [r2, #0]
 800cf78:	4628      	mov	r0, r5
 800cf7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf7e:	f000 b8a2 	b.w	800d0c6 <__malloc_unlock>
 800cf82:	42a3      	cmp	r3, r4
 800cf84:	d90c      	bls.n	800cfa0 <_free_r+0x4c>
 800cf86:	6821      	ldr	r1, [r4, #0]
 800cf88:	1862      	adds	r2, r4, r1
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	bf04      	itt	eq
 800cf8e:	681a      	ldreq	r2, [r3, #0]
 800cf90:	685b      	ldreq	r3, [r3, #4]
 800cf92:	6063      	str	r3, [r4, #4]
 800cf94:	bf04      	itt	eq
 800cf96:	1852      	addeq	r2, r2, r1
 800cf98:	6022      	streq	r2, [r4, #0]
 800cf9a:	6004      	str	r4, [r0, #0]
 800cf9c:	e7ec      	b.n	800cf78 <_free_r+0x24>
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	b10a      	cbz	r2, 800cfa8 <_free_r+0x54>
 800cfa4:	42a2      	cmp	r2, r4
 800cfa6:	d9fa      	bls.n	800cf9e <_free_r+0x4a>
 800cfa8:	6819      	ldr	r1, [r3, #0]
 800cfaa:	1858      	adds	r0, r3, r1
 800cfac:	42a0      	cmp	r0, r4
 800cfae:	d10b      	bne.n	800cfc8 <_free_r+0x74>
 800cfb0:	6820      	ldr	r0, [r4, #0]
 800cfb2:	4401      	add	r1, r0
 800cfb4:	1858      	adds	r0, r3, r1
 800cfb6:	4282      	cmp	r2, r0
 800cfb8:	6019      	str	r1, [r3, #0]
 800cfba:	d1dd      	bne.n	800cf78 <_free_r+0x24>
 800cfbc:	6810      	ldr	r0, [r2, #0]
 800cfbe:	6852      	ldr	r2, [r2, #4]
 800cfc0:	605a      	str	r2, [r3, #4]
 800cfc2:	4401      	add	r1, r0
 800cfc4:	6019      	str	r1, [r3, #0]
 800cfc6:	e7d7      	b.n	800cf78 <_free_r+0x24>
 800cfc8:	d902      	bls.n	800cfd0 <_free_r+0x7c>
 800cfca:	230c      	movs	r3, #12
 800cfcc:	602b      	str	r3, [r5, #0]
 800cfce:	e7d3      	b.n	800cf78 <_free_r+0x24>
 800cfd0:	6820      	ldr	r0, [r4, #0]
 800cfd2:	1821      	adds	r1, r4, r0
 800cfd4:	428a      	cmp	r2, r1
 800cfd6:	bf04      	itt	eq
 800cfd8:	6811      	ldreq	r1, [r2, #0]
 800cfda:	6852      	ldreq	r2, [r2, #4]
 800cfdc:	6062      	str	r2, [r4, #4]
 800cfde:	bf04      	itt	eq
 800cfe0:	1809      	addeq	r1, r1, r0
 800cfe2:	6021      	streq	r1, [r4, #0]
 800cfe4:	605c      	str	r4, [r3, #4]
 800cfe6:	e7c7      	b.n	800cf78 <_free_r+0x24>
 800cfe8:	bd38      	pop	{r3, r4, r5, pc}
 800cfea:	bf00      	nop
 800cfec:	20001124 	.word	0x20001124

0800cff0 <_malloc_r>:
 800cff0:	b570      	push	{r4, r5, r6, lr}
 800cff2:	1ccd      	adds	r5, r1, #3
 800cff4:	f025 0503 	bic.w	r5, r5, #3
 800cff8:	3508      	adds	r5, #8
 800cffa:	2d0c      	cmp	r5, #12
 800cffc:	bf38      	it	cc
 800cffe:	250c      	movcc	r5, #12
 800d000:	2d00      	cmp	r5, #0
 800d002:	4606      	mov	r6, r0
 800d004:	db01      	blt.n	800d00a <_malloc_r+0x1a>
 800d006:	42a9      	cmp	r1, r5
 800d008:	d903      	bls.n	800d012 <_malloc_r+0x22>
 800d00a:	230c      	movs	r3, #12
 800d00c:	6033      	str	r3, [r6, #0]
 800d00e:	2000      	movs	r0, #0
 800d010:	bd70      	pop	{r4, r5, r6, pc}
 800d012:	f000 f857 	bl	800d0c4 <__malloc_lock>
 800d016:	4a21      	ldr	r2, [pc, #132]	; (800d09c <_malloc_r+0xac>)
 800d018:	6814      	ldr	r4, [r2, #0]
 800d01a:	4621      	mov	r1, r4
 800d01c:	b991      	cbnz	r1, 800d044 <_malloc_r+0x54>
 800d01e:	4c20      	ldr	r4, [pc, #128]	; (800d0a0 <_malloc_r+0xb0>)
 800d020:	6823      	ldr	r3, [r4, #0]
 800d022:	b91b      	cbnz	r3, 800d02c <_malloc_r+0x3c>
 800d024:	4630      	mov	r0, r6
 800d026:	f000 f83d 	bl	800d0a4 <_sbrk_r>
 800d02a:	6020      	str	r0, [r4, #0]
 800d02c:	4629      	mov	r1, r5
 800d02e:	4630      	mov	r0, r6
 800d030:	f000 f838 	bl	800d0a4 <_sbrk_r>
 800d034:	1c43      	adds	r3, r0, #1
 800d036:	d124      	bne.n	800d082 <_malloc_r+0x92>
 800d038:	230c      	movs	r3, #12
 800d03a:	6033      	str	r3, [r6, #0]
 800d03c:	4630      	mov	r0, r6
 800d03e:	f000 f842 	bl	800d0c6 <__malloc_unlock>
 800d042:	e7e4      	b.n	800d00e <_malloc_r+0x1e>
 800d044:	680b      	ldr	r3, [r1, #0]
 800d046:	1b5b      	subs	r3, r3, r5
 800d048:	d418      	bmi.n	800d07c <_malloc_r+0x8c>
 800d04a:	2b0b      	cmp	r3, #11
 800d04c:	d90f      	bls.n	800d06e <_malloc_r+0x7e>
 800d04e:	600b      	str	r3, [r1, #0]
 800d050:	50cd      	str	r5, [r1, r3]
 800d052:	18cc      	adds	r4, r1, r3
 800d054:	4630      	mov	r0, r6
 800d056:	f000 f836 	bl	800d0c6 <__malloc_unlock>
 800d05a:	f104 000b 	add.w	r0, r4, #11
 800d05e:	1d23      	adds	r3, r4, #4
 800d060:	f020 0007 	bic.w	r0, r0, #7
 800d064:	1ac3      	subs	r3, r0, r3
 800d066:	d0d3      	beq.n	800d010 <_malloc_r+0x20>
 800d068:	425a      	negs	r2, r3
 800d06a:	50e2      	str	r2, [r4, r3]
 800d06c:	e7d0      	b.n	800d010 <_malloc_r+0x20>
 800d06e:	428c      	cmp	r4, r1
 800d070:	684b      	ldr	r3, [r1, #4]
 800d072:	bf16      	itet	ne
 800d074:	6063      	strne	r3, [r4, #4]
 800d076:	6013      	streq	r3, [r2, #0]
 800d078:	460c      	movne	r4, r1
 800d07a:	e7eb      	b.n	800d054 <_malloc_r+0x64>
 800d07c:	460c      	mov	r4, r1
 800d07e:	6849      	ldr	r1, [r1, #4]
 800d080:	e7cc      	b.n	800d01c <_malloc_r+0x2c>
 800d082:	1cc4      	adds	r4, r0, #3
 800d084:	f024 0403 	bic.w	r4, r4, #3
 800d088:	42a0      	cmp	r0, r4
 800d08a:	d005      	beq.n	800d098 <_malloc_r+0xa8>
 800d08c:	1a21      	subs	r1, r4, r0
 800d08e:	4630      	mov	r0, r6
 800d090:	f000 f808 	bl	800d0a4 <_sbrk_r>
 800d094:	3001      	adds	r0, #1
 800d096:	d0cf      	beq.n	800d038 <_malloc_r+0x48>
 800d098:	6025      	str	r5, [r4, #0]
 800d09a:	e7db      	b.n	800d054 <_malloc_r+0x64>
 800d09c:	20001124 	.word	0x20001124
 800d0a0:	20001128 	.word	0x20001128

0800d0a4 <_sbrk_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4c06      	ldr	r4, [pc, #24]	; (800d0c0 <_sbrk_r+0x1c>)
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	4608      	mov	r0, r1
 800d0ae:	6023      	str	r3, [r4, #0]
 800d0b0:	f000 f80a 	bl	800d0c8 <_sbrk>
 800d0b4:	1c43      	adds	r3, r0, #1
 800d0b6:	d102      	bne.n	800d0be <_sbrk_r+0x1a>
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	b103      	cbz	r3, 800d0be <_sbrk_r+0x1a>
 800d0bc:	602b      	str	r3, [r5, #0]
 800d0be:	bd38      	pop	{r3, r4, r5, pc}
 800d0c0:	200059d4 	.word	0x200059d4

0800d0c4 <__malloc_lock>:
 800d0c4:	4770      	bx	lr

0800d0c6 <__malloc_unlock>:
 800d0c6:	4770      	bx	lr

0800d0c8 <_sbrk>:
 800d0c8:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <_sbrk+0x14>)
 800d0ca:	6819      	ldr	r1, [r3, #0]
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	b909      	cbnz	r1, 800d0d4 <_sbrk+0xc>
 800d0d0:	4903      	ldr	r1, [pc, #12]	; (800d0e0 <_sbrk+0x18>)
 800d0d2:	6019      	str	r1, [r3, #0]
 800d0d4:	6818      	ldr	r0, [r3, #0]
 800d0d6:	4402      	add	r2, r0
 800d0d8:	601a      	str	r2, [r3, #0]
 800d0da:	4770      	bx	lr
 800d0dc:	2000112c 	.word	0x2000112c
 800d0e0:	200059d8 	.word	0x200059d8

0800d0e4 <_init>:
 800d0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e6:	bf00      	nop
 800d0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ea:	bc08      	pop	{r3}
 800d0ec:	469e      	mov	lr, r3
 800d0ee:	4770      	bx	lr

0800d0f0 <_fini>:
 800d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f2:	bf00      	nop
 800d0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0f6:	bc08      	pop	{r3}
 800d0f8:	469e      	mov	lr, r3
 800d0fa:	4770      	bx	lr
